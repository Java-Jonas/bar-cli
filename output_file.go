package main

import (
	"bytes"
	"go/ast"
	"go/parser"
	"go/printer"
	"go/token"
	"strings"
)

type outputFile struct {
	name       string
	declPrefix string
	content    bytes.Buffer
}

func newOutputFile(name, declPrefix, packageName string) outputFile {
	var content bytes.Buffer

	content.WriteString("// this file was generated by https://github.com/jobergner/decltostring\n\n")
	content.WriteString("package " + packageName + "\n\n")

	return outputFile{name, declPrefix, content}
}

func (o *outputFile) writeFile() {
}

func (o *outputFile) formatContent() *outputFile {
	fileSet := token.NewFileSet()
	f, err := parser.ParseFile(fileSet, "", o.content.Bytes(), parser.ParseComments)
	check(err)
	var formattedContent bytes.Buffer
	printer.Fprint(&formattedContent, fileSet, f)
	o.content = formattedContent
	return o
}

func escapeBackticks(s string) string {
	return strings.Replace(s, "`", "` + \"`\" +  `", -1)
}

func (o *outputFile) writeDecl(decl ast.Decl, containingFileName string) {

	outputDeclName := evalDeclName(decl, containingFileName)
	if o.declPrefix != "" {
		outputDeclName = o.declPrefix + "_" + outputDeclName
	}
	outputDeclValue := escapeBackticks(stringifyDecl(decl))

	o.content.WriteString("\n\nconst " + outputDeclName + " string = `" + outputDeclValue + "`")
}
