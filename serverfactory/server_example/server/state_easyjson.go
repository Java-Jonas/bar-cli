// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package state

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer(in *jlexer.Lexer, out *zoneItemCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ZoneItemID(in.Int())
		case "item":
			out.Item = ItemID(in.Int())
		case "position":
			out.Position = PositionID(in.Int())
		case "operationKind_":
			out.OperationKind_ = OperationKind(in.String())
		case "hasParent_":
			out.HasParent_ = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer(out *jwriter.Writer, in zoneItemCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Item != 0 {
		const prefix string = ",\"item\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Item))
	}
	if in.Position != 0 {
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Position))
	}
	if in.OperationKind_ != "" {
		const prefix string = ",\"operationKind_\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind_))
	}
	if in.HasParent_ {
		const prefix string = ",\"hasParent_\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasParent_))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v zoneItemCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v zoneItemCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *zoneItemCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *zoneItemCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer(l, v)
}
func easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer1(in *jlexer.Lexer, out *zoneCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ZoneID(in.Int())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]ZoneItemID, 0, 8)
					} else {
						out.Items = []ZoneItemID{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v1 ZoneItemID
					v1 = ZoneItemID(in.Int())
					out.Items = append(out.Items, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "players":
			if in.IsNull() {
				in.Skip()
				out.Players = nil
			} else {
				in.Delim('[')
				if out.Players == nil {
					if !in.IsDelim(']') {
						out.Players = make([]PlayerID, 0, 8)
					} else {
						out.Players = []PlayerID{}
					}
				} else {
					out.Players = (out.Players)[:0]
				}
				for !in.IsDelim(']') {
					var v2 PlayerID
					v2 = PlayerID(in.Int())
					out.Players = append(out.Players, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.Tags = append(out.Tags, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "operationKind_":
			out.OperationKind_ = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer1(out *jwriter.Writer, in zoneCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v4, v5 := range in.Items {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v5))
			}
			out.RawByte(']')
		}
	}
	if len(in.Players) != 0 {
		const prefix string = ",\"players\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v6, v7 := range in.Players {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v7))
			}
			out.RawByte(']')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Tags {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	if in.OperationKind_ != "" {
		const prefix string = ",\"operationKind_\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind_))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v zoneCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v zoneCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *zoneCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *zoneCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer1(l, v)
}
func easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer2(in *jlexer.Lexer, out *tZoneItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ZoneItemID(in.Int())
		case "item":
			if in.IsNull() {
				in.Skip()
				out.Item = nil
			} else {
				if out.Item == nil {
					out.Item = new(TITem)
				}
				(*out.Item).UnmarshalEasyJSON(in)
			}
		case "position":
			if in.IsNull() {
				in.Skip()
				out.Position = nil
			} else {
				if out.Position == nil {
					out.Position = new(tPosition)
				}
				(*out.Position).UnmarshalEasyJSON(in)
			}
		case "operationKind_":
			out.OperationKind_ = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer2(out *jwriter.Writer, in tZoneItem) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Item != nil {
		const prefix string = ",\"item\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Item).MarshalEasyJSON(out)
	}
	if in.Position != nil {
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Position).MarshalEasyJSON(out)
	}
	if in.OperationKind_ != "" {
		const prefix string = ",\"operationKind_\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind_))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tZoneItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tZoneItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tZoneItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tZoneItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer2(l, v)
}
func easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer3(in *jlexer.Lexer, out *tZone) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ZoneID(in.Int())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]tZoneItem, 0, 1)
					} else {
						out.Items = []tZoneItem{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v10 tZoneItem
					(v10).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "players":
			if in.IsNull() {
				in.Skip()
				out.Players = nil
			} else {
				in.Delim('[')
				if out.Players == nil {
					if !in.IsDelim(']') {
						out.Players = make([]tPlayer, 0, 1)
					} else {
						out.Players = []tPlayer{}
					}
				} else {
					out.Players = (out.Players)[:0]
				}
				for !in.IsDelim(']') {
					var v11 tPlayer
					(v11).UnmarshalEasyJSON(in)
					out.Players = append(out.Players, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.Tags = append(out.Tags, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "operationKind_":
			out.OperationKind_ = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer3(out *jwriter.Writer, in tZone) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v13, v14 := range in.Items {
				if v13 > 0 {
					out.RawByte(',')
				}
				(v14).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Players) != 0 {
		const prefix string = ",\"players\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.Players {
				if v15 > 0 {
					out.RawByte(',')
				}
				(v16).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.Tags {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	if in.OperationKind_ != "" {
		const prefix string = ",\"operationKind_\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind_))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tZone) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tZone) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tZone) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tZone) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer3(l, v)
}
func easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer4(in *jlexer.Lexer, out *tPosition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = PositionID(in.Int())
		case "x":
			out.X = float64(in.Float64())
		case "y":
			out.Y = float64(in.Float64())
		case "operationKind_":
			out.OperationKind_ = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer4(out *jwriter.Writer, in tPosition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.X != 0 {
		const prefix string = ",\"x\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Y))
	}
	if in.OperationKind_ != "" {
		const prefix string = ",\"operationKind_\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind_))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tPosition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tPosition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tPosition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tPosition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer4(l, v)
}
func easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer5(in *jlexer.Lexer, out *tPlayer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = PlayerID(in.Int())
		case "gearScore":
			if in.IsNull() {
				in.Skip()
				out.GearScore = nil
			} else {
				if out.GearScore == nil {
					out.GearScore = new(tGearScore)
				}
				(*out.GearScore).UnmarshalEasyJSON(in)
			}
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]TITem, 0, 2)
					} else {
						out.Items = []TITem{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v19 TITem
					(v19).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "position":
			if in.IsNull() {
				in.Skip()
				out.Position = nil
			} else {
				if out.Position == nil {
					out.Position = new(tPosition)
				}
				(*out.Position).UnmarshalEasyJSON(in)
			}
		case "operationKind_":
			out.OperationKind_ = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer5(out *jwriter.Writer, in tPlayer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.GearScore != nil {
		const prefix string = ",\"gearScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.GearScore).MarshalEasyJSON(out)
	}
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.Items {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Position != nil {
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Position).MarshalEasyJSON(out)
	}
	if in.OperationKind_ != "" {
		const prefix string = ",\"operationKind_\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind_))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tPlayer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tPlayer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tPlayer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tPlayer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer5(l, v)
}
func easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer6(in *jlexer.Lexer, out *TITem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ItemID(in.Int())
		case "gearScore":
			if in.IsNull() {
				in.Skip()
				out.GearScore = nil
			} else {
				if out.GearScore == nil {
					out.GearScore = new(tGearScore)
				}
				(*out.GearScore).UnmarshalEasyJSON(in)
			}
		case "operationKind_":
			out.OperationKind_ = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer6(out *jwriter.Writer, in TITem) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.GearScore != nil {
		const prefix string = ",\"gearScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.GearScore).MarshalEasyJSON(out)
	}
	if in.OperationKind_ != "" {
		const prefix string = ",\"operationKind_\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind_))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TITem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TITem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TITem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TITem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer6(l, v)
}
func easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer7(in *jlexer.Lexer, out *tGearScore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = GearScoreID(in.Int())
		case "level":
			out.Level = int(in.Int())
		case "score":
			out.Score = int(in.Int())
		case "operationKind_":
			out.OperationKind_ = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer7(out *jwriter.Writer, in tGearScore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Level != 0 {
		const prefix string = ",\"level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Level))
	}
	if in.Score != 0 {
		const prefix string = ",\"score\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Score))
	}
	if in.OperationKind_ != "" {
		const prefix string = ",\"operationKind_\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind_))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tGearScore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tGearScore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tGearScore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tGearScore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer7(l, v)
}
func easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer8(in *jlexer.Lexer, out *positionCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = PositionID(in.Int())
		case "x":
			out.X = float64(in.Float64())
		case "y":
			out.Y = float64(in.Float64())
		case "operationKind_":
			out.OperationKind_ = OperationKind(in.String())
		case "hasParent_":
			out.HasParent_ = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer8(out *jwriter.Writer, in positionCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.X != 0 {
		const prefix string = ",\"x\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Y))
	}
	if in.OperationKind_ != "" {
		const prefix string = ",\"operationKind_\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind_))
	}
	if in.HasParent_ {
		const prefix string = ",\"hasParent_\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasParent_))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v positionCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v positionCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *positionCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *positionCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer8(l, v)
}
func easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer9(in *jlexer.Lexer, out *playerCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = PlayerID(in.Int())
		case "gearScore":
			out.GearScore = GearScoreID(in.Int())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]ItemID, 0, 8)
					} else {
						out.Items = []ItemID{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v22 ItemID
					v22 = ItemID(in.Int())
					out.Items = append(out.Items, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "position":
			out.Position = PositionID(in.Int())
		case "operationKind_":
			out.OperationKind_ = OperationKind(in.String())
		case "hasParent_":
			out.HasParent_ = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer9(out *jwriter.Writer, in playerCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.GearScore != 0 {
		const prefix string = ",\"gearScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.GearScore))
	}
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v23, v24 := range in.Items {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v24))
			}
			out.RawByte(']')
		}
	}
	if in.Position != 0 {
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Position))
	}
	if in.OperationKind_ != "" {
		const prefix string = ",\"operationKind_\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind_))
	}
	if in.HasParent_ {
		const prefix string = ",\"hasParent_\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasParent_))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v playerCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v playerCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *playerCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *playerCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer9(l, v)
}
func easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer10(in *jlexer.Lexer, out *itemCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ItemID(in.Int())
		case "gearScore":
			out.GearScore = GearScoreID(in.Int())
		case "operationKind_":
			out.OperationKind_ = OperationKind(in.String())
		case "hasParent_":
			out.HasParent_ = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer10(out *jwriter.Writer, in itemCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.GearScore != 0 {
		const prefix string = ",\"gearScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.GearScore))
	}
	if in.OperationKind_ != "" {
		const prefix string = ",\"operationKind_\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind_))
	}
	if in.HasParent_ {
		const prefix string = ",\"hasParent_\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasParent_))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v itemCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v itemCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *itemCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *itemCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer10(l, v)
}
func easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer11(in *jlexer.Lexer, out *gearScoreCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = GearScoreID(in.Int())
		case "level":
			out.Level = int(in.Int())
		case "score":
			out.Score = int(in.Int())
		case "operationKind_":
			out.OperationKind_ = OperationKind(in.String())
		case "hasParent_":
			out.HasParent_ = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer11(out *jwriter.Writer, in gearScoreCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Level != 0 {
		const prefix string = ",\"level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Level))
	}
	if in.Score != 0 {
		const prefix string = ",\"score\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Score))
	}
	if in.OperationKind_ != "" {
		const prefix string = ",\"operationKind_\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind_))
	}
	if in.HasParent_ {
		const prefix string = ",\"hasParent_\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasParent_))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v gearScoreCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v gearScoreCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *gearScoreCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *gearScoreCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer11(l, v)
}
func easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer12(in *jlexer.Lexer, out *ZoneItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer12(out *jwriter.Writer, in ZoneItem) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ZoneItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ZoneItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ZoneItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ZoneItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer12(l, v)
}
func easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer13(in *jlexer.Lexer, out *Zone) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer13(out *jwriter.Writer, in Zone) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Zone) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Zone) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Zone) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Zone) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer13(l, v)
}
func easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer14(in *jlexer.Lexer, out *Tree) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "gearScore":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.GearScore = make(map[GearScoreID]tGearScore)
				} else {
					out.GearScore = nil
				}
				for !in.IsDelim('}') {
					key := GearScoreID(in.IntStr())
					in.WantColon()
					var v25 tGearScore
					(v25).UnmarshalEasyJSON(in)
					(out.GearScore)[key] = v25
					in.WantComma()
				}
				in.Delim('}')
			}
		case "item":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Item = make(map[ItemID]TITem)
				} else {
					out.Item = nil
				}
				for !in.IsDelim('}') {
					key := ItemID(in.IntStr())
					in.WantColon()
					var v26 TITem
					(v26).UnmarshalEasyJSON(in)
					(out.Item)[key] = v26
					in.WantComma()
				}
				in.Delim('}')
			}
		case "player":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Player = make(map[PlayerID]tPlayer)
				} else {
					out.Player = nil
				}
				for !in.IsDelim('}') {
					key := PlayerID(in.IntStr())
					in.WantColon()
					var v27 tPlayer
					(v27).UnmarshalEasyJSON(in)
					(out.Player)[key] = v27
					in.WantComma()
				}
				in.Delim('}')
			}
		case "position":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Position = make(map[PositionID]tPosition)
				} else {
					out.Position = nil
				}
				for !in.IsDelim('}') {
					key := PositionID(in.IntStr())
					in.WantColon()
					var v28 tPosition
					(v28).UnmarshalEasyJSON(in)
					(out.Position)[key] = v28
					in.WantComma()
				}
				in.Delim('}')
			}
		case "zone":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Zone = make(map[ZoneID]tZone)
				} else {
					out.Zone = nil
				}
				for !in.IsDelim('}') {
					key := ZoneID(in.IntStr())
					in.WantColon()
					var v29 tZone
					(v29).UnmarshalEasyJSON(in)
					(out.Zone)[key] = v29
					in.WantComma()
				}
				in.Delim('}')
			}
		case "zoneItem":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ZoneItem = make(map[ZoneItemID]tZoneItem)
				} else {
					out.ZoneItem = nil
				}
				for !in.IsDelim('}') {
					key := ZoneItemID(in.IntStr())
					in.WantColon()
					var v30 tZoneItem
					(v30).UnmarshalEasyJSON(in)
					(out.ZoneItem)[key] = v30
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer14(out *jwriter.Writer, in Tree) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.GearScore) != 0 {
		const prefix string = ",\"gearScore\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v31First := true
			for v31Name, v31Value := range in.GearScore {
				if v31First {
					v31First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v31Name))
				out.RawByte(':')
				(v31Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Item) != 0 {
		const prefix string = ",\"item\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v32First := true
			for v32Name, v32Value := range in.Item {
				if v32First {
					v32First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v32Name))
				out.RawByte(':')
				(v32Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Player) != 0 {
		const prefix string = ",\"player\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v33First := true
			for v33Name, v33Value := range in.Player {
				if v33First {
					v33First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v33Name))
				out.RawByte(':')
				(v33Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Position) != 0 {
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v34First := true
			for v34Name, v34Value := range in.Position {
				if v34First {
					v34First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v34Name))
				out.RawByte(':')
				(v34Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Zone) != 0 {
		const prefix string = ",\"zone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v35First := true
			for v35Name, v35Value := range in.Zone {
				if v35First {
					v35First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v35Name))
				out.RawByte(':')
				(v35Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.ZoneItem) != 0 {
		const prefix string = ",\"zoneItem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v36First := true
			for v36Name, v36Value := range in.ZoneItem {
				if v36First {
					v36First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v36Name))
				out.RawByte(':')
				(v36Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tree) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tree) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tree) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tree) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer14(l, v)
}
func easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer15(in *jlexer.Lexer, out *State) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "gearScore":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.GearScore = make(map[GearScoreID]gearScoreCore)
				} else {
					out.GearScore = nil
				}
				for !in.IsDelim('}') {
					key := GearScoreID(in.IntStr())
					in.WantColon()
					var v37 gearScoreCore
					(v37).UnmarshalEasyJSON(in)
					(out.GearScore)[key] = v37
					in.WantComma()
				}
				in.Delim('}')
			}
		case "item":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Item = make(map[ItemID]itemCore)
				} else {
					out.Item = nil
				}
				for !in.IsDelim('}') {
					key := ItemID(in.IntStr())
					in.WantColon()
					var v38 itemCore
					(v38).UnmarshalEasyJSON(in)
					(out.Item)[key] = v38
					in.WantComma()
				}
				in.Delim('}')
			}
		case "player":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Player = make(map[PlayerID]playerCore)
				} else {
					out.Player = nil
				}
				for !in.IsDelim('}') {
					key := PlayerID(in.IntStr())
					in.WantColon()
					var v39 playerCore
					(v39).UnmarshalEasyJSON(in)
					(out.Player)[key] = v39
					in.WantComma()
				}
				in.Delim('}')
			}
		case "position":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Position = make(map[PositionID]positionCore)
				} else {
					out.Position = nil
				}
				for !in.IsDelim('}') {
					key := PositionID(in.IntStr())
					in.WantColon()
					var v40 positionCore
					(v40).UnmarshalEasyJSON(in)
					(out.Position)[key] = v40
					in.WantComma()
				}
				in.Delim('}')
			}
		case "zone":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Zone = make(map[ZoneID]zoneCore)
				} else {
					out.Zone = nil
				}
				for !in.IsDelim('}') {
					key := ZoneID(in.IntStr())
					in.WantColon()
					var v41 zoneCore
					(v41).UnmarshalEasyJSON(in)
					(out.Zone)[key] = v41
					in.WantComma()
				}
				in.Delim('}')
			}
		case "zoneItem":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ZoneItem = make(map[ZoneItemID]zoneItemCore)
				} else {
					out.ZoneItem = nil
				}
				for !in.IsDelim('}') {
					key := ZoneItemID(in.IntStr())
					in.WantColon()
					var v42 zoneItemCore
					(v42).UnmarshalEasyJSON(in)
					(out.ZoneItem)[key] = v42
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer15(out *jwriter.Writer, in State) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.GearScore) != 0 {
		const prefix string = ",\"gearScore\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v43First := true
			for v43Name, v43Value := range in.GearScore {
				if v43First {
					v43First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v43Name))
				out.RawByte(':')
				(v43Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Item) != 0 {
		const prefix string = ",\"item\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v44First := true
			for v44Name, v44Value := range in.Item {
				if v44First {
					v44First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v44Name))
				out.RawByte(':')
				(v44Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Player) != 0 {
		const prefix string = ",\"player\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v45First := true
			for v45Name, v45Value := range in.Player {
				if v45First {
					v45First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v45Name))
				out.RawByte(':')
				(v45Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Position) != 0 {
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v46First := true
			for v46Name, v46Value := range in.Position {
				if v46First {
					v46First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v46Name))
				out.RawByte(':')
				(v46Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Zone) != 0 {
		const prefix string = ",\"zone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v47First := true
			for v47Name, v47Value := range in.Zone {
				if v47First {
					v47First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v47Name))
				out.RawByte(':')
				(v47Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.ZoneItem) != 0 {
		const prefix string = ",\"zoneItem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v48First := true
			for v48Name, v48Value := range in.ZoneItem {
				if v48First {
					v48First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v48Name))
				out.RawByte(':')
				(v48Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v State) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v State) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *State) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *State) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer15(l, v)
}
func easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer16(in *jlexer.Lexer, out *Position) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer16(out *jwriter.Writer, in Position) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Position) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Position) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Position) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Position) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer16(l, v)
}
func easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer17(in *jlexer.Lexer, out *Player) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer17(out *jwriter.Writer, in Player) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Player) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Player) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Player) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Player) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer17(l, v)
}
func easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer18(in *jlexer.Lexer, out *Item) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer18(out *jwriter.Writer, in Item) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Item) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Item) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Item) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Item) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer18(l, v)
}
func easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer19(in *jlexer.Lexer, out *GearScore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer19(out *jwriter.Writer, in GearScore) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GearScore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GearScore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GearScore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GearScore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer19(l, v)
}
func easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer20(in *jlexer.Lexer, out *Engine) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "State":
			(out.State).UnmarshalEasyJSON(in)
		case "Patch":
			(out.Patch).UnmarshalEasyJSON(in)
		case "IDgen":
			out.IDgen = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer20(out *jwriter.Writer, in Engine) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"State\":"
		first = false
		out.RawString(prefix[1:])
		(in.State).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"Patch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Patch).MarshalEasyJSON(out)
	}
	if in.IDgen != 0 {
		const prefix string = ",\"IDgen\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.IDgen))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Engine) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Engine) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeBarCliServerfactoryServerExampleServer20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Engine) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Engine) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeBarCliServerfactoryServerExampleServer20(l, v)
}
