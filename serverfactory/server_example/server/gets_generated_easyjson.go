// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package state

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson48d448a9DecodeBarCliServerfactoryServerExampleServer(in *jlexer.Lexer, out *actions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson48d448a9EncodeBarCliServerfactoryServerExampleServer(out *jwriter.Writer, in actions) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v actions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson48d448a9EncodeBarCliServerfactoryServerExampleServer(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v actions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson48d448a9EncodeBarCliServerfactoryServerExampleServer(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *actions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson48d448a9DecodeBarCliServerfactoryServerExampleServer(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *actions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson48d448a9DecodeBarCliServerfactoryServerExampleServer(l, v)
}
func easyjson48d448a9DecodeBarCliServerfactoryServerExampleServer1(in *jlexer.Lexer, out *_spawnZoneItemsParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]TITem, 0, 2)
					} else {
						out.Items = []TITem{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v1 TITem
					easyjson48d448a9DecodeBarCliServerfactoryServerExampleServer2(in, &v1)
					out.Items = append(out.Items, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson48d448a9EncodeBarCliServerfactoryServerExampleServer1(out *jwriter.Writer, in _spawnZoneItemsParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix[1:])
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Items {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson48d448a9EncodeBarCliServerfactoryServerExampleServer2(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v _spawnZoneItemsParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson48d448a9EncodeBarCliServerfactoryServerExampleServer1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v _spawnZoneItemsParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson48d448a9EncodeBarCliServerfactoryServerExampleServer1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *_spawnZoneItemsParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson48d448a9DecodeBarCliServerfactoryServerExampleServer1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *_spawnZoneItemsParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson48d448a9DecodeBarCliServerfactoryServerExampleServer1(l, v)
}
func easyjson48d448a9DecodeBarCliServerfactoryServerExampleServer2(in *jlexer.Lexer, out *TITem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ItemID(in.Int())
		case "gearScore":
			if in.IsNull() {
				in.Skip()
				out.GearScore = nil
			} else {
				if out.GearScore == nil {
					out.GearScore = new(tGearScore)
				}
				easyjson48d448a9DecodeBarCliServerfactoryServerExampleServer3(in, out.GearScore)
			}
		case "operationKind_":
			out.OperationKind_ = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson48d448a9EncodeBarCliServerfactoryServerExampleServer2(out *jwriter.Writer, in TITem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"gearScore\":"
		out.RawString(prefix)
		if in.GearScore == nil {
			out.RawString("null")
		} else {
			easyjson48d448a9EncodeBarCliServerfactoryServerExampleServer3(out, *in.GearScore)
		}
	}
	{
		const prefix string = ",\"operationKind_\":"
		out.RawString(prefix)
		out.String(string(in.OperationKind_))
	}
	out.RawByte('}')
}
func easyjson48d448a9DecodeBarCliServerfactoryServerExampleServer3(in *jlexer.Lexer, out *tGearScore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = GearScoreID(in.Int())
		case "level":
			out.Level = int(in.Int())
		case "score":
			out.Score = int(in.Int())
		case "operationKind_":
			out.OperationKind_ = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson48d448a9EncodeBarCliServerfactoryServerExampleServer3(out *jwriter.Writer, in tGearScore) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"level\":"
		out.RawString(prefix)
		out.Int(int(in.Level))
	}
	{
		const prefix string = ",\"score\":"
		out.RawString(prefix)
		out.Int(int(in.Score))
	}
	{
		const prefix string = ",\"operationKind_\":"
		out.RawString(prefix)
		out.String(string(in.OperationKind_))
	}
	out.RawByte('}')
}
func easyjson48d448a9DecodeBarCliServerfactoryServerExampleServer4(in *jlexer.Lexer, out *_addItemToPlayerParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "item":
			easyjson48d448a9DecodeBarCliServerfactoryServerExampleServer2(in, &out.Item)
		case "playerID":
			out.PlayerID = PlayerID(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson48d448a9EncodeBarCliServerfactoryServerExampleServer4(out *jwriter.Writer, in _addItemToPlayerParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"item\":"
		out.RawString(prefix[1:])
		easyjson48d448a9EncodeBarCliServerfactoryServerExampleServer2(out, in.Item)
	}
	{
		const prefix string = ",\"playerID\":"
		out.RawString(prefix)
		out.Int(int(in.PlayerID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v _addItemToPlayerParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson48d448a9EncodeBarCliServerfactoryServerExampleServer4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v _addItemToPlayerParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson48d448a9EncodeBarCliServerfactoryServerExampleServer4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *_addItemToPlayerParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson48d448a9DecodeBarCliServerfactoryServerExampleServer4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *_addItemToPlayerParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson48d448a9DecodeBarCliServerfactoryServerExampleServer4(l, v)
}
func easyjson48d448a9DecodeBarCliServerfactoryServerExampleServer5(in *jlexer.Lexer, out *_MovePlayerParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "playerID":
			out.PlayerID = PlayerID(in.Int())
		case "changeX":
			out.ChangeX = float64(in.Float64())
		case "changeY":
			out.ChangeY = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson48d448a9EncodeBarCliServerfactoryServerExampleServer5(out *jwriter.Writer, in _MovePlayerParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"playerID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PlayerID))
	}
	{
		const prefix string = ",\"changeX\":"
		out.RawString(prefix)
		out.Float64(float64(in.ChangeX))
	}
	{
		const prefix string = ",\"changeY\":"
		out.RawString(prefix)
		out.Float64(float64(in.ChangeY))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v _MovePlayerParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson48d448a9EncodeBarCliServerfactoryServerExampleServer5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v _MovePlayerParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson48d448a9EncodeBarCliServerfactoryServerExampleServer5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *_MovePlayerParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson48d448a9DecodeBarCliServerfactoryServerExampleServer5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *_MovePlayerParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson48d448a9DecodeBarCliServerfactoryServerExampleServer5(l, v)
}
