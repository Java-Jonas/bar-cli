// this file was generated by https://github.com/Java-Jonas/decltostring

package enginefactory

const AddPlayer_Zone_func string = `func (_e Zone) AddPlayer(se *Engine) Player {
	e := se.Zone(_e.zone.ID)
	if e.zone.OperationKind == OperationKindDelete {
		return Player{playerCore{OperationKind: OperationKindDelete}}
	}
	player := se.createPlayer(true)
	e.zone.Players = append(e.zone.Players, player.player.ID)
	e.zone.OperationKind = OperationKindUpdate
	se.Patch.Zone[e.zone.ID] = e.zone
	return player
}`

const AddItem_Zone_func string = `func (_e Zone) AddItem(se *Engine) ZoneItem {
	e := se.Zone(_e.zone.ID)
	if e.zone.OperationKind == OperationKindDelete {
		return ZoneItem{zoneItemCore{OperationKind: OperationKindDelete}}
	}
	zoneItem := se.createZoneItem(true)
	e.zone.Items = append(e.zone.Items, zoneItem.zoneItem.ID)
	e.zone.OperationKind = OperationKindUpdate
	se.Patch.Zone[e.zone.ID] = e.zone
	return zoneItem
}`

const AddTags_Zone_func string = `func (_e Zone) AddTags(se *Engine, tags ...string) {
	e := se.Zone(_e.zone.ID)
	if e.zone.OperationKind == OperationKindDelete {
		return
	}
	e.zone.Tags = append(e.zone.Tags, tags...)
	e.zone.OperationKind = OperationKindUpdate
	se.Patch.Zone[e.zone.ID] = e.zone
}`

const AddItem_Player_func string = `func (_e Player) AddItem(se *Engine) Item {
	e := se.Player(_e.player.ID)
	if e.player.OperationKind == OperationKindDelete {
		return Item{itemCore{OperationKind: OperationKindDelete}}
	}
	item := se.createItem(true)
	e.player.Items = append(e.player.Items, item.item.ID)
	e.player.OperationKind = OperationKindUpdate
	se.Patch.Player[e.player.ID] = e.player
	return item
}`

const assembleGearScore_Engine_func string = `func (se *Engine) assembleGearScore(gearScoreID GearScoreID) (_gearScore, bool) {
	gearScore, hasUpdated := se.Patch.GearScore[gearScoreID]
	if !hasUpdated {
		return _gearScore{}, false
	}
	var treeGearScore _gearScore
	treeGearScore.ID = gearScore.ID
	treeGearScore.OperationKind = gearScore.OperationKind
	treeGearScore.Level = gearScore.Level
	treeGearScore.Score = gearScore.Score
	return treeGearScore, true
}`

const assemblePosition_Engine_func string = `func (se *Engine) assemblePosition(positionID PositionID) (_position, bool) {
	position, hasUpdated := se.Patch.Position[positionID]
	if !hasUpdated {
		return _position{}, false
	}
	var treePosition _position
	treePosition.ID = position.ID
	treePosition.OperationKind = position.OperationKind
	treePosition.X = position.X
	treePosition.Y = position.Y
	return treePosition, true
}`

const assembleItem_Engine_func string = `func (se *Engine) assembleItem(itemID ItemID) (_item, bool) {
	item, hasUpdated := se.Patch.Item[itemID]
	if !hasUpdated {
		item = se.State.Item[itemID]
	}
	var treeItem _item
	if treeGearScore, gearScoreHasUpdated := se.assembleGearScore(item.GearScore); gearScoreHasUpdated {
		hasUpdated = true
		treeItem.GearScore = &treeGearScore
	}
	treeItem.ID = item.ID
	treeItem.OperationKind = item.OperationKind
	return treeItem, hasUpdated
}`

const assembleZoneItem_Engine_func string = `func (se *Engine) assembleZoneItem(zoneItemID ZoneItemID) (_zoneItem, bool) {
	zoneItem, hasUpdated := se.Patch.ZoneItem[zoneItemID]
	if !hasUpdated {
		zoneItem = se.State.ZoneItem[zoneItemID]
	}
	var treeZoneItem _zoneItem
	if treeItem, itemHasUpdated := se.assembleItem(zoneItem.Item); itemHasUpdated {
		hasUpdated = true
		treeZoneItem.Item = &treeItem
	}
	if treePosition, positionHasUpdated := se.assemblePosition(zoneItem.Position); positionHasUpdated {
		hasUpdated = true
		treeZoneItem.Position = &treePosition
	}
	treeZoneItem.ID = zoneItem.ID
	treeZoneItem.OperationKind = zoneItem.OperationKind
	return treeZoneItem, hasUpdated
}`

const assemblePlayer_Engine_func string = `func (se *Engine) assemblePlayer(playerID PlayerID) (_player, bool) {
	player, hasUpdated := se.Patch.Player[playerID]
	if !hasUpdated {
		player = se.State.Player[playerID]
	}
	var treePlayer _player
	if treeGearScore, gearScoreHasUpdated := se.assembleGearScore(player.GearScore); gearScoreHasUpdated {
		hasUpdated = true
		treePlayer.GearScore = &treeGearScore
	}
	for _, itemID := range deduplicateItemIDs(se.State.Player[player.ID].Items, se.Patch.Player[player.ID].Items) {
		if treeItem, itemHasUpdated := se.assembleItem(itemID); itemHasUpdated {
			hasUpdated = true
			treePlayer.Items = append(treePlayer.Items, treeItem)
		}
	}
	if treePosition, positionHasUpdated := se.assemblePosition(player.Position); positionHasUpdated {
		hasUpdated = true
		treePlayer.Position = &treePosition
	}
	treePlayer.ID = player.ID
	treePlayer.OperationKind = player.OperationKind
	return treePlayer, hasUpdated
}`

const assembleZone_Engine_func string = `func (se *Engine) assembleZone(zoneID ZoneID) (_zone, bool) {
	zone, hasUpdated := se.Patch.Zone[zoneID]
	if !hasUpdated {
		zone = se.State.Zone[zoneID]
	}
	var treeZone _zone
	for _, zoneItemID := range deduplicateZoneItemIDs(se.State.Zone[zone.ID].Items, se.Patch.Zone[zone.ID].Items) {
		if treeZoneItem, zoneItemHasUpdated := se.assembleZoneItem(zoneItemID); zoneItemHasUpdated {
			hasUpdated = true
			treeZone.Items = append(treeZone.Items, treeZoneItem)
		}
	}
	for _, playerID := range deduplicatePlayerIDs(se.State.Zone[zone.ID].Players, se.Patch.Zone[zone.ID].Players) {
		if treePlayer, playerHasUpdated := se.assemblePlayer(playerID); playerHasUpdated {
			hasUpdated = true
			treeZone.Players = append(treeZone.Players, treePlayer)
		}
	}
	treeZone.ID = zone.ID
	treeZone.OperationKind = zone.OperationKind
	treeZone.Tags = zone.Tags
	return treeZone, hasUpdated
}`

const assembleTree_Engine_func string = `func (se *Engine) assembleTree() Tree {
	tree := newTree()
	for _, gearScore := range se.Patch.GearScore {
		if !gearScore.HasParent {
			treeGearScore, hasUpdated := se.assembleGearScore(gearScore.ID)
			if hasUpdated {
				tree.GearScore[gearScore.ID] = treeGearScore
			}
		}
	}
	for _, item := range se.Patch.Item {
		if !item.HasParent {
			treeItem, hasUpdated := se.assembleItem(item.ID)
			if hasUpdated {
				tree.Item[item.ID] = treeItem
			}
		}
	}
	for _, player := range se.Patch.Player {
		if !player.HasParent {
			treePlayer, hasUpdated := se.assemblePlayer(player.ID)
			if hasUpdated {
				tree.Player[player.ID] = treePlayer
			}
		}
	}
	for _, position := range se.Patch.Position {
		if !position.HasParent {
			treePosition, hasUpdated := se.assemblePosition(position.ID)
			if hasUpdated {
				tree.Position[position.ID] = treePosition
			}
		}
	}
	for _, zone := range se.Patch.Zone {
		treeZone, hasUpdated := se.assembleZone(zone.ID)
		if hasUpdated {
			tree.Zone[zone.ID] = treeZone
		}
	}
	for _, zoneItem := range se.Patch.ZoneItem {
		if !zoneItem.HasParent {
			treeZoneItem, hasUpdated := se.assembleZoneItem(zoneItem.ID)
			if hasUpdated {
				tree.ZoneItem[zoneItem.ID] = treeZoneItem
			}
		}
	}
	for _, gearScore := range se.State.GearScore {
		if !gearScore.HasParent {
			if _, ok := tree.GearScore[gearScore.ID]; !ok {
				treeGearScore, hasUpdated := se.assembleGearScore(gearScore.ID)
				if hasUpdated {
					tree.GearScore[gearScore.ID] = treeGearScore
				}
			}
		}
	}
	for _, item := range se.State.Item {
		if !item.HasParent {
			if _, ok := tree.Item[item.ID]; !ok {
				treeItem, hasUpdated := se.assembleItem(item.ID)
				if hasUpdated {
					tree.Item[item.ID] = treeItem
				}
			}
		}
	}
	for _, player := range se.State.Player {
		if !player.HasParent {
			if _, ok := tree.Player[player.ID]; !ok {
				treePlayer, hasUpdated := se.assemblePlayer(player.ID)
				if hasUpdated {
					tree.Player[player.ID] = treePlayer
				}
			}
		}
	}
	for _, position := range se.State.Position {
		if !position.HasParent {
			if _, ok := tree.Position[position.ID]; !ok {
				treePosition, hasUpdated := se.assemblePosition(position.ID)
				if hasUpdated {
					tree.Position[position.ID] = treePosition
				}
			}
		}
	}
	for _, zone := range se.State.Zone {
		if _, ok := tree.Zone[zone.ID]; !ok {
			treeZone, hasUpdated := se.assembleZone(zone.ID)
			if hasUpdated {
				tree.Zone[zone.ID] = treeZone
			}
		}
	}
	for _, zoneItem := range se.State.ZoneItem {
		if !zoneItem.HasParent {
			if _, ok := tree.ZoneItem[zoneItem.ID]; !ok {
				treeZoneItem, hasUpdated := se.assembleZoneItem(zoneItem.ID)
				if hasUpdated {
					tree.ZoneItem[zoneItem.ID] = treeZoneItem
				}
			}
		}
	}
	return tree
}`

const CreateGearScore_Engine_func string = `func (se *Engine) CreateGearScore() GearScore {
	return se.createGearScore(false)
}`

const createGearScore_Engine_func string = `func (se *Engine) createGearScore(hasParent bool) GearScore {
	var e gearScoreCore
	e.ID = GearScoreID(se.GenerateID())
	e.HasParent = hasParent
	e.OperationKind = OperationKindUpdate
	se.Patch.GearScore[e.ID] = e
	return GearScore{gearScore: e}
}`

const CreatePosition_Engine_func string = `func (se *Engine) CreatePosition() Position {
	return se.createPosition(false)
}`

const createPosition_Engine_func string = `func (se *Engine) createPosition(hasParent bool) Position {
	var e positionCore
	e.ID = PositionID(se.GenerateID())
	e.HasParent = hasParent
	e.OperationKind = OperationKindUpdate
	se.Patch.Position[e.ID] = e
	return Position{position: e}
}`

const CreateItem_Engine_func string = `func (se *Engine) CreateItem() Item {
	return se.createItem(false)
}`

const createItem_Engine_func string = `func (se *Engine) createItem(hasParent bool) Item {
	var e itemCore
	e.ID = ItemID(se.GenerateID())
	e.HasParent = hasParent
	elementGearScore := se.createGearScore(true)
	e.GearScore = elementGearScore.gearScore.ID
	e.OperationKind = OperationKindUpdate
	se.Patch.Item[e.ID] = e
	return Item{item: e}
}`

const CreateZoneItem_Engine_func string = `func (se *Engine) CreateZoneItem() ZoneItem {
	return se.createZoneItem(false)
}`

const createZoneItem_Engine_func string = `func (se *Engine) createZoneItem(hasParent bool) ZoneItem {
	var e zoneItemCore
	e.ID = ZoneItemID(se.GenerateID())
	e.HasParent = hasParent
	elementItem := se.createItem(true)
	e.Item = elementItem.item.ID
	elementPosition := se.createPosition(true)
	e.Position = elementPosition.position.ID
	e.OperationKind = OperationKindUpdate
	se.Patch.ZoneItem[e.ID] = e
	return ZoneItem{zoneItem: e}
}`

const CreatePlayer_Engine_func string = `func (se *Engine) CreatePlayer() Player {
	return se.createPlayer(false)
}`

const createPlayer_Engine_func string = `func (se *Engine) createPlayer(hasParent bool) Player {
	var e playerCore
	e.ID = PlayerID(se.GenerateID())
	e.HasParent = hasParent
	elementGearScore := se.createGearScore(true)
	e.GearScore = elementGearScore.gearScore.ID
	elementPosition := se.createPosition(true)
	e.Position = elementPosition.position.ID
	e.OperationKind = OperationKindUpdate
	se.Patch.Player[e.ID] = e
	return Player{player: e}
}`

const CreateZone_Engine_func string = `func (se *Engine) CreateZone() Zone {
	return se.createZone()
}`

const createZone_Engine_func string = `func (se *Engine) createZone() Zone {
	var e zoneCore
	e.ID = ZoneID(se.GenerateID())
	e.OperationKind = OperationKindUpdate
	se.Patch.Zone[e.ID] = e
	return Zone{zone: e}
}`

const DeletePlayer_Engine_func string = `func (se *Engine) DeletePlayer(playerID PlayerID) {
	player := se.Player(playerID).player
	if player.HasParent {
		return
	}
	se.deletePlayer(playerID)
}`

const deletePlayer_Engine_func string = `func (se *Engine) deletePlayer(playerID PlayerID) {
	player := se.Player(playerID).player
	player.OperationKind = OperationKindDelete
	se.Patch.Player[player.ID] = player
	se.deleteGearScore(player.GearScore)
	for _, itemID := range player.Items {
		se.deleteItem(itemID)
	}
	se.deletePosition(player.Position)
}`

const DeleteGearScore_Engine_func string = `func (se *Engine) DeleteGearScore(gearScoreID GearScoreID) {
	gearScore := se.GearScore(gearScoreID).gearScore
	if gearScore.HasParent {
		return
	}
	se.deleteGearScore(gearScoreID)
}`

const deleteGearScore_Engine_func string = `func (se *Engine) deleteGearScore(gearScoreID GearScoreID) {
	gearScore := se.GearScore(gearScoreID).gearScore
	gearScore.OperationKind = OperationKindDelete
	se.Patch.GearScore[gearScore.ID] = gearScore
}`

const DeletePosition_Engine_func string = `func (se *Engine) DeletePosition(positionID PositionID) {
	position := se.Position(positionID).position
	if position.HasParent {
		return
	}
	se.deletePosition(positionID)
}`

const deletePosition_Engine_func string = `func (se *Engine) deletePosition(positionID PositionID) {
	position := se.Position(positionID).position
	position.OperationKind = OperationKindDelete
	se.Patch.Position[position.ID] = position
}`

const DeleteItem_Engine_func string = `func (se *Engine) DeleteItem(itemID ItemID) {
	item := se.Item(itemID).item
	if item.HasParent {
		return
	}
	se.deleteItem(itemID)
}`

const deleteItem_Engine_func string = `func (se *Engine) deleteItem(itemID ItemID) {
	item := se.Item(itemID).item
	item.OperationKind = OperationKindDelete
	se.Patch.Item[item.ID] = item
	se.deleteGearScore(item.GearScore)
}`

const DeleteZoneItem_Engine_func string = `func (se *Engine) DeleteZoneItem(zoneItemID ZoneItemID) {
	zoneItem := se.ZoneItem(zoneItemID).zoneItem
	if zoneItem.HasParent {
		return
	}
	se.deleteZoneItem(zoneItemID)
}`

const deleteZoneItem_Engine_func string = `func (se *Engine) deleteZoneItem(zoneItemID ZoneItemID) {
	zoneItem := se.ZoneItem(zoneItemID).zoneItem
	zoneItem.OperationKind = OperationKindDelete
	se.Patch.ZoneItem[zoneItem.ID] = zoneItem
	se.deleteItem(zoneItem.Item)
	se.deletePosition(zoneItem.Position)
}`

const DeleteZone_Engine_func string = `func (se *Engine) DeleteZone(zoneID ZoneID) {
	se.deleteZone(zoneID)
}`

const deleteZone_Engine_func string = `func (se *Engine) deleteZone(zoneID ZoneID) {
	zone := se.Zone(zoneID).zone
	zone.OperationKind = OperationKindDelete
	se.Patch.Zone[zone.ID] = zone
	for _, zoneItemID := range zone.Items {
		se.deleteZoneItem(zoneItemID)
	}
	for _, playerID := range zone.Players {
		se.deletePlayer(playerID)
	}
}`

const Player_Engine_func string = `func (se *Engine) Player(playerID PlayerID) Player {
	patchingPlayer, ok := se.Patch.Player[playerID]
	if ok {
		return Player{patchingPlayer}
	}
	currentPlayer := se.State.Player[playerID]
	return Player{currentPlayer}
}`

const ID_Player_func string = `func (_e Player) ID(se *Engine) PlayerID {
	return _e.player.ID
}`

const Items_Player_func string = `func (_e Player) Items(se *Engine) []Item {
	e := se.Player(_e.player.ID)
	var items []Item
	for _, itemID := range e.player.Items {
		items = append(items, se.Item(itemID))
	}
	return items
}`

const GearScore_Player_func string = `func (_e Player) GearScore(se *Engine) GearScore {
	e := se.Player(_e.player.ID)
	return se.GearScore(e.player.GearScore)
}`

const Position_Player_func string = `func (_e Player) Position(se *Engine) Position {
	e := se.Player(_e.player.ID)
	return se.Position(e.player.Position)
}`

const GearScore_Engine_func string = `func (se *Engine) GearScore(gearScoreID GearScoreID) GearScore {
	patchingGearScore, ok := se.Patch.GearScore[gearScoreID]
	if ok {
		return GearScore{patchingGearScore}
	}
	currentGearScore := se.State.GearScore[gearScoreID]
	return GearScore{currentGearScore}
}`

const ID_GearScore_func string = `func (_e GearScore) ID(se *Engine) GearScoreID {
	return _e.gearScore.ID
}`

const Level_GearScore_func string = `func (_e GearScore) Level(se *Engine) int {
	e := se.GearScore(_e.gearScore.ID)
	return e.gearScore.Level
}`

const Score_GearScore_func string = `func (_e GearScore) Score(se *Engine) int {
	e := se.GearScore(_e.gearScore.ID)
	return e.gearScore.Score
}`

const Item_Engine_func string = `func (se *Engine) Item(itemID ItemID) Item {
	patchingItem, ok := se.Patch.Item[itemID]
	if ok {
		return Item{patchingItem}
	}
	currentItem := se.State.Item[itemID]
	return Item{currentItem}
}`

const ID_Item_func string = `func (_e Item) ID(se *Engine) ItemID {
	return _e.item.ID
}`

const GearScore_Item_func string = `func (_e Item) GearScore(se *Engine) GearScore {
	e := se.Item(_e.item.ID)
	return se.GearScore(e.item.GearScore)
}`

const Position_Engine_func string = `func (se *Engine) Position(positionID PositionID) Position {
	patchingPosition, ok := se.Patch.Position[positionID]
	if ok {
		return Position{patchingPosition}
	}
	currentPosition := se.State.Position[positionID]
	return Position{currentPosition}
}`

const ID_Position_func string = `func (_e Position) ID(se *Engine) PositionID {
	return _e.position.ID
}`

const X_Position_func string = `func (_e Position) X(se *Engine) float64 {
	e := se.Position(_e.position.ID)
	return e.position.X
}`

const Y_Position_func string = `func (_e Position) Y(se *Engine) float64 {
	e := se.Position(_e.position.ID)
	return e.position.Y
}`

const ZoneItem_Engine_func string = `func (se *Engine) ZoneItem(zoneItemID ZoneItemID) ZoneItem {
	patchingZoneItem, ok := se.Patch.ZoneItem[zoneItemID]
	if ok {
		return ZoneItem{patchingZoneItem}
	}
	currentZoneItem := se.State.ZoneItem[zoneItemID]
	return ZoneItem{currentZoneItem}
}`

const ID_ZoneItem_func string = `func (_e ZoneItem) ID(se *Engine) ZoneItemID {
	return _e.zoneItem.ID
}`

const Position_ZoneItem_func string = `func (_e ZoneItem) Position(se *Engine) Position {
	e := se.ZoneItem(_e.zoneItem.ID)
	return se.Position(e.zoneItem.Position)
}`

const Item_ZoneItem_func string = `func (_e ZoneItem) Item(se *Engine) Item {
	e := se.ZoneItem(_e.zoneItem.ID)
	return se.Item(e.zoneItem.Item)
}`

const Zone_Engine_func string = `func (se *Engine) Zone(zoneID ZoneID) Zone {
	patchingZone, ok := se.Patch.Zone[zoneID]
	if ok {
		return Zone{patchingZone}
	}
	currentZone := se.State.Zone[zoneID]
	return Zone{currentZone}
}`

const ID_Zone_func string = `func (_e Zone) ID(se *Engine) ZoneID {
	return _e.zone.ID
}`

const Players_Zone_func string = `func (_e Zone) Players(se *Engine) []Player {
	e := se.Zone(_e.zone.ID)
	var players []Player
	for _, playerID := range e.zone.Players {
		players = append(players, se.Player(playerID))
	}
	return players
}`

const Items_Zone_func string = `func (_e Zone) Items(se *Engine) []ZoneItem {
	e := se.Zone(_e.zone.ID)
	var items []ZoneItem
	for _, zoneItemID := range e.zone.Items {
		items = append(items, se.ZoneItem(zoneItemID))
	}
	return items
}`

const Tags_Zone_func string = `func (_e Zone) Tags(se *Engine) []string {
	e := se.Zone(_e.zone.ID)
	var tags []string
	for _, element := range e.zone.Tags {
		tags = append(tags, element)
	}
	return tags
}`

const deduplicateGearScoreIDs_func string = `func deduplicateGearScoreIDs(a []GearScoreID, b []GearScoreID) []GearScoreID {
	check := make(map[GearScoreID]bool)
	deduped := make([]GearScoreID, 0)
	for _, val := range a {
		check[val] = true
	}
	for _, val := range b {
		check[val] = true
	}
	for val := range check {
		deduped = append(deduped, val)
	}
	return deduped
}`

const deduplicateItemIDs_func string = `func deduplicateItemIDs(a []ItemID, b []ItemID) []ItemID {
	check := make(map[ItemID]bool)
	deduped := make([]ItemID, 0)
	for _, val := range a {
		check[val] = true
	}
	for _, val := range b {
		check[val] = true
	}
	for val := range check {
		deduped = append(deduped, val)
	}
	return deduped
}`

const deduplicatePlayerIDs_func string = `func deduplicatePlayerIDs(a []PlayerID, b []PlayerID) []PlayerID {
	check := make(map[PlayerID]bool)
	deduped := make([]PlayerID, 0)
	for _, val := range a {
		check[val] = true
	}
	for _, val := range b {
		check[val] = true
	}
	for val := range check {
		deduped = append(deduped, val)
	}
	return deduped
}`

const deduplicatePositionIDs_func string = `func deduplicatePositionIDs(a []PositionID, b []PositionID) []PositionID {
	check := make(map[PositionID]bool)
	deduped := make([]PositionID, 0)
	for _, val := range a {
		check[val] = true
	}
	for _, val := range b {
		check[val] = true
	}
	for val := range check {
		deduped = append(deduped, val)
	}
	return deduped
}`

const deduplicateZoneIDs_func string = `func deduplicateZoneIDs(a []ZoneID, b []ZoneID) []ZoneID {
	check := make(map[ZoneID]bool)
	deduped := make([]ZoneID, 0)
	for _, val := range a {
		check[val] = true
	}
	for _, val := range b {
		check[val] = true
	}
	for val := range check {
		deduped = append(deduped, val)
	}
	return deduped
}`

const deduplicateZoneItemIDs_func string = `func deduplicateZoneItemIDs(a []ZoneItemID, b []ZoneItemID) []ZoneItemID {
	check := make(map[ZoneItemID]bool)
	deduped := make([]ZoneItemID, 0)
	for _, val := range a {
		check[val] = true
	}
	for _, val := range b {
		check[val] = true
	}
	for val := range check {
		deduped = append(deduped, val)
	}
	return deduped
}`

const RemovePlayers_Zone_func string = `func (_e Zone) RemovePlayers(se *Engine, playersToRemove ...PlayerID) Zone {
	e := se.Zone(_e.zone.ID)
	if e.zone.OperationKind == OperationKindDelete {
		return e
	}
	var elementsAltered bool
	var newElements []PlayerID
	for _, element := range e.zone.Players {
		var toBeRemoved bool
		for _, elementToRemove := range playersToRemove {
			if element == elementToRemove {
				toBeRemoved = true
				elementsAltered = true
				se.deletePlayer(element)
			}
		}
		if !toBeRemoved {
			newElements = append(newElements, element)
		}
	}
	if !elementsAltered {
		return e
	}
	e.zone.Players = newElements
	e.zone.OperationKind = OperationKindUpdate
	se.Patch.Zone[e.zone.ID] = e.zone
	return e
}`

const RemoveItems_Zone_func string = `func (_e Zone) RemoveItems(se *Engine, zoneItemsToRemove ...ZoneItemID) Zone {
	e := se.Zone(_e.zone.ID)
	if e.zone.OperationKind == OperationKindDelete {
		return e
	}
	var elementsAltered bool
	var newElements []ZoneItemID
	for _, element := range e.zone.Items {
		var toBeRemoved bool
		for _, elementToRemove := range zoneItemsToRemove {
			if element == elementToRemove {
				toBeRemoved = true
				elementsAltered = true
				se.deleteZoneItem(element)
			}
		}
		if !toBeRemoved {
			newElements = append(newElements, element)
		}
	}
	if !elementsAltered {
		return e
	}
	e.zone.Items = newElements
	e.zone.OperationKind = OperationKindUpdate
	se.Patch.Zone[e.zone.ID] = e.zone
	return e
}`

const RemoveItems_Player_func string = `func (_e Player) RemoveItems(se *Engine, itemsToRemove ...ItemID) Player {
	e := se.Player(_e.player.ID)
	if e.player.OperationKind == OperationKindDelete {
		return e
	}
	var elementsAltered bool
	var newElements []ItemID
	for _, element := range e.player.Items {
		var toBeRemoved bool
		for _, elementToRemove := range itemsToRemove {
			if element == elementToRemove {
				toBeRemoved = true
				elementsAltered = true
				se.deleteItem(element)
			}
		}
		if !toBeRemoved {
			newElements = append(newElements, element)
		}
	}
	if !elementsAltered {
		return e
	}
	e.player.Items = newElements
	e.player.OperationKind = OperationKindUpdate
	se.Patch.Player[e.player.ID] = e.player
	return e
}`

const RemoveTags_Zone_func string = `func (_e Zone) RemoveTags(se *Engine, tagsToRemove ...string) Zone {
	e := se.Zone(_e.zone.ID)
	if e.zone.OperationKind == OperationKindDelete {
		return e
	}
	var elementsAltered bool
	var newElements []string
	for _, element := range e.zone.Tags {
		var toBeRemoved bool
		for _, elementToRemove := range tagsToRemove {
			if element == elementToRemove {
				toBeRemoved = true
				elementsAltered = true
			}
		}
		if !toBeRemoved {
			newElements = append(newElements, element)
		}
	}
	if !elementsAltered {
		return e
	}
	e.zone.Tags = newElements
	e.zone.OperationKind = OperationKindUpdate
	se.Patch.Zone[e.zone.ID] = e.zone
	return e
}`

const SetLevel_GearScore_func string = `func (_e GearScore) SetLevel(se *Engine, newLevel int) GearScore {
	e := se.GearScore(_e.gearScore.ID)
	if e.gearScore.OperationKind == OperationKindDelete {
		return e
	}
	e.gearScore.Level = newLevel
	e.gearScore.OperationKind = OperationKindUpdate
	se.Patch.GearScore[e.gearScore.ID] = e.gearScore
	return e
}`

const SetScore_GearScore_func string = `func (_e GearScore) SetScore(se *Engine, newScore int) GearScore {
	e := se.GearScore(_e.gearScore.ID)
	if e.gearScore.OperationKind == OperationKindDelete {
		return e
	}
	e.gearScore.Score = newScore
	e.gearScore.OperationKind = OperationKindUpdate
	se.Patch.GearScore[e.gearScore.ID] = e.gearScore
	return e
}`

const SetX_Position_func string = `func (_e Position) SetX(se *Engine, newX float64) Position {
	e := se.Position(_e.position.ID)
	if e.position.OperationKind == OperationKindDelete {
		return e
	}
	e.position.X = newX
	e.position.OperationKind = OperationKindUpdate
	se.Patch.Position[e.position.ID] = e.position
	return e
}`

const SetY_Position_func string = `func (_e Position) SetY(se *Engine, newY float64) Position {
	e := se.Position(_e.position.ID)
	if e.position.OperationKind == OperationKindDelete {
		return e
	}
	e.position.Y = newY
	e.position.OperationKind = OperationKindUpdate
	se.Patch.Position[e.position.ID] = e.position
	return e
}`

const GearScoreID_type string = `type GearScoreID int`

const ItemID_type string = `type ItemID int`

const PlayerID_type string = `type PlayerID int`

const PositionID_type string = `type PositionID int`

const ZoneID_type string = `type ZoneID int`

const ZoneItemID_type string = `type ZoneItemID int`

const State_type string = `type State struct {
	GearScore	map[GearScoreID]gearScoreCore	` + "`" + `json:"gearScore"` + "`" + `
	Item		map[ItemID]itemCore		` + "`" + `json:"item"` + "`" + `
	Player		map[PlayerID]playerCore		` + "`" + `json:"player"` + "`" + `
	Position	map[PositionID]positionCore	` + "`" + `json:"position"` + "`" + `
	Zone		map[ZoneID]zoneCore		` + "`" + `json:"zone"` + "`" + `
	ZoneItem	map[ZoneItemID]zoneItemCore	` + "`" + `json:"zoneItem"` + "`" + `
}`

const newState_func string = `func newState() State {
	return State{GearScore: make(map[GearScoreID]gearScoreCore), Item: make(map[ItemID]itemCore), Player: make(map[PlayerID]playerCore), Position: make(map[PositionID]positionCore), Zone: make(map[ZoneID]zoneCore), ZoneItem: make(map[ZoneItemID]zoneItemCore)}
}`

const zoneCore_type string = `type zoneCore struct {
	ID		ZoneID		` + "`" + `json:"id"` + "`" + `
	Items		[]ZoneItemID	` + "`" + `json:"items"` + "`" + `
	Players		[]PlayerID	` + "`" + `json:"players"` + "`" + `
	Tags		[]string	` + "`" + `json:"tags"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
}`

const Zone_type string = `type Zone struct{ zone zoneCore }`

const zoneItemCore_type string = `type zoneItemCore struct {
	ID		ZoneItemID	` + "`" + `json:"id"` + "`" + `
	Item		ItemID		` + "`" + `json:"item"` + "`" + `
	Position	PositionID	` + "`" + `json:"position"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
	HasParent	bool		` + "`" + `json:"hasParent"` + "`" + `
}`

const ZoneItem_type string = `type ZoneItem struct{ zoneItem zoneItemCore }`

const itemCore_type string = `type itemCore struct {
	ID		ItemID		` + "`" + `json:"id"` + "`" + `
	GearScore	GearScoreID	` + "`" + `json:"gearScore"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
	HasParent	bool		` + "`" + `json:"hasParent"` + "`" + `
}`

const Item_type string = `type Item struct{ item itemCore }`

const playerCore_type string = `type playerCore struct {
	ID		PlayerID	` + "`" + `json:"id"` + "`" + `
	GearScore	GearScoreID	` + "`" + `json:"gearScore"` + "`" + `
	Items		[]ItemID	` + "`" + `json:"items"` + "`" + `
	Position	PositionID	` + "`" + `json:"position"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
	HasParent	bool		` + "`" + `json:"hasParent"` + "`" + `
}`

const Player_type string = `type Player struct{ player playerCore }`

const gearScoreCore_type string = `type gearScoreCore struct {
	ID		GearScoreID	` + "`" + `json:"id"` + "`" + `
	Level		int		` + "`" + `json:"level"` + "`" + `
	Score		int		` + "`" + `json:"score"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
	HasParent	bool		` + "`" + `json:"hasParent"` + "`" + `
}`

const GearScore_type string = `type GearScore struct{ gearScore gearScoreCore }`

const positionCore_type string = `type positionCore struct {
	ID		PositionID	` + "`" + `json:"id"` + "`" + `
	X		float64		` + "`" + `json:"x"` + "`" + `
	Y		float64		` + "`" + `json:"y"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
	HasParent	bool		` + "`" + `json:"hasParent"` + "`" + `
}`

const Position_type string = `type Position struct{ position positionCore }`

const OperationKind_type string = `type OperationKind string`

const OperationKindDelete_type string = `const (
	OperationKindDelete	= "DELETE"
	OperationKindUpdate	= "UPDATE"
)`

const Engine_type string = `type Engine struct {
	State	State
	Patch	State
	IDgen	int
}`

const newEngine_func string = `func newEngine() *Engine {
	return &Engine{State: newState(), Patch: newState(), IDgen: 1}
}`

const GenerateID_Engine_func string = `func (se *Engine) GenerateID() int {
	newID := se.IDgen
	se.IDgen = se.IDgen + 1
	return newID
}`

const UpdateState_Engine_func string = `func (se *Engine) UpdateState() {
	for _, gearScore := range se.Patch.GearScore {
		if gearScore.OperationKind == OperationKindDelete {
			delete(se.State.GearScore, gearScore.ID)
		} else {
			se.State.GearScore[gearScore.ID] = gearScore
		}
	}
	for _, item := range se.Patch.Item {
		if item.OperationKind == OperationKindDelete {
			delete(se.State.Item, item.ID)
		} else {
			se.State.Item[item.ID] = item
		}
	}
	for _, player := range se.Patch.Player {
		if player.OperationKind == OperationKindDelete {
			delete(se.State.Player, player.ID)
		} else {
			se.State.Player[player.ID] = player
		}
	}
	for _, position := range se.Patch.Position {
		if position.OperationKind == OperationKindDelete {
			delete(se.State.Position, position.ID)
		} else {
			se.State.Position[position.ID] = position
		}
	}
	for _, zone := range se.Patch.Zone {
		if zone.OperationKind == OperationKindDelete {
			delete(se.State.Zone, zone.ID)
		} else {
			se.State.Zone[zone.ID] = zone
		}
	}
	for _, zoneItem := range se.Patch.ZoneItem {
		if zoneItem.OperationKind == OperationKindDelete {
			delete(se.State.ZoneItem, zoneItem.ID)
		} else {
			se.State.ZoneItem[zoneItem.ID] = zoneItem
		}
	}
	for key := range se.Patch.GearScore {
		delete(se.Patch.GearScore, key)
	}
	for key := range se.Patch.Item {
		delete(se.Patch.Item, key)
	}
	for key := range se.Patch.Player {
		delete(se.Patch.Player, key)
	}
	for key := range se.Patch.Position {
		delete(se.Patch.Position, key)
	}
	for key := range se.Patch.Zone {
		delete(se.Patch.Zone, key)
	}
	for key := range se.Patch.ZoneItem {
		delete(se.Patch.ZoneItem, key)
	}
}`

const Tree_type string = `type Tree struct {
	GearScore	map[GearScoreID]_gearScore	` + "`" + `json:"gearScore"` + "`" + `
	Item		map[ItemID]_item		` + "`" + `json:"item"` + "`" + `
	Player		map[PlayerID]_player		` + "`" + `json:"player"` + "`" + `
	Position	map[PositionID]_position	` + "`" + `json:"position"` + "`" + `
	Zone		map[ZoneID]_zone		` + "`" + `json:"zone"` + "`" + `
	ZoneItem	map[ZoneItemID]_zoneItem	` + "`" + `json:"zoneItem"` + "`" + `
}`

const newTree_func string = `func newTree() Tree {
	return Tree{GearScore: make(map[GearScoreID]_gearScore), Item: make(map[ItemID]_item), Player: make(map[PlayerID]_player), Position: make(map[PositionID]_position), Zone: make(map[ZoneID]_zone), ZoneItem: make(map[ZoneItemID]_zoneItem)}
}`

const _zoneItem_type string = `type _zoneItem struct {
	ID		ZoneItemID	` + "`" + `json:"id"` + "`" + `
	Item		*_item		` + "`" + `json:"item"` + "`" + `
	Position	*_position	` + "`" + `json:"position"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
}`

const _item_type string = `type _item struct {
	ID		ItemID		` + "`" + `json:"id"` + "`" + `
	GearScore	*_gearScore	` + "`" + `json:"gearScore"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
}`

const _position_type string = `type _position struct {
	ID		PositionID	` + "`" + `json:"id"` + "`" + `
	X		float64		` + "`" + `json:"x"` + "`" + `
	Y		float64		` + "`" + `json:"y"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
}`

const _gearScore_type string = `type _gearScore struct {
	ID		GearScoreID	` + "`" + `json:"id"` + "`" + `
	Level		int		` + "`" + `json:"level"` + "`" + `
	Score		int		` + "`" + `json:"score"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
}`

const _player_type string = `type _player struct {
	ID		PlayerID	` + "`" + `json:"id"` + "`" + `
	GearScore	*_gearScore	` + "`" + `json:"gearScore"` + "`" + `
	Items		[]_item		` + "`" + `json:"items"` + "`" + `
	Position	*_position	` + "`" + `json:"position"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
}`

const _zone_type string = `type _zone struct {
	ID		ZoneID		` + "`" + `json:"id"` + "`" + `
	Items		[]_zoneItem	` + "`" + `json:"items"` + "`" + `
	Players		[]_player	` + "`" + `json:"players"` + "`" + `
	Tags		[]string	` + "`" + `json:"tags"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
}`
