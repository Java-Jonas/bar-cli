// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package state

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson19a9978cDecodeBarCliEnginefactoryStateEngineExample(in *jlexer.Lexer, out *ZoneItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ZoneItemID(in.Int())
		case "item":
			if in.IsNull() {
				in.Skip()
				out.Item = nil
			} else {
				if out.Item == nil {
					out.Item = new(Item)
				}
				(*out.Item).UnmarshalEasyJSON(in)
			}
		case "position":
			if in.IsNull() {
				in.Skip()
				out.Position = nil
			} else {
				if out.Position == nil {
					out.Position = new(Position)
				}
				(*out.Position).UnmarshalEasyJSON(in)
			}
		case "operationKind_":
			out.OperationKind_ = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19a9978cEncodeBarCliEnginefactoryStateEngineExample(out *jwriter.Writer, in ZoneItem) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Item != nil {
		const prefix string = ",\"item\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Item).MarshalEasyJSON(out)
	}
	if in.Position != nil {
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Position).MarshalEasyJSON(out)
	}
	if in.OperationKind_ != "" {
		const prefix string = ",\"operationKind_\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind_))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ZoneItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson19a9978cEncodeBarCliEnginefactoryStateEngineExample(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ZoneItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson19a9978cEncodeBarCliEnginefactoryStateEngineExample(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ZoneItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson19a9978cDecodeBarCliEnginefactoryStateEngineExample(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ZoneItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19a9978cDecodeBarCliEnginefactoryStateEngineExample(l, v)
}
func easyjson19a9978cDecodeBarCliEnginefactoryStateEngineExample1(in *jlexer.Lexer, out *Zone) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ZoneID(in.Int())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]ZoneItem, 0, 1)
					} else {
						out.Items = []ZoneItem{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v1 ZoneItem
					(v1).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "players":
			if in.IsNull() {
				in.Skip()
				out.Players = nil
			} else {
				in.Delim('[')
				if out.Players == nil {
					if !in.IsDelim(']') {
						out.Players = make([]Player, 0, 0)
					} else {
						out.Players = []Player{}
					}
				} else {
					out.Players = (out.Players)[:0]
				}
				for !in.IsDelim(']') {
					var v2 Player
					(v2).UnmarshalEasyJSON(in)
					out.Players = append(out.Players, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.Tags = append(out.Tags, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "operationKind_":
			out.OperationKind_ = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19a9978cEncodeBarCliEnginefactoryStateEngineExample1(out *jwriter.Writer, in Zone) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v4, v5 := range in.Items {
				if v4 > 0 {
					out.RawByte(',')
				}
				(v5).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Players) != 0 {
		const prefix string = ",\"players\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v6, v7 := range in.Players {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Tags {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	if in.OperationKind_ != "" {
		const prefix string = ",\"operationKind_\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind_))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Zone) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson19a9978cEncodeBarCliEnginefactoryStateEngineExample1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Zone) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson19a9978cEncodeBarCliEnginefactoryStateEngineExample1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Zone) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson19a9978cDecodeBarCliEnginefactoryStateEngineExample1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Zone) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19a9978cDecodeBarCliEnginefactoryStateEngineExample1(l, v)
}
func easyjson19a9978cDecodeBarCliEnginefactoryStateEngineExample2(in *jlexer.Lexer, out *Tree) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "gearScore":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.GearScore = make(map[GearScoreID]GearScore)
				} else {
					out.GearScore = nil
				}
				for !in.IsDelim('}') {
					key := GearScoreID(in.IntStr())
					in.WantColon()
					var v10 GearScore
					(v10).UnmarshalEasyJSON(in)
					(out.GearScore)[key] = v10
					in.WantComma()
				}
				in.Delim('}')
			}
		case "item":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Item = make(map[ItemID]Item)
				} else {
					out.Item = nil
				}
				for !in.IsDelim('}') {
					key := ItemID(in.IntStr())
					in.WantColon()
					var v11 Item
					(v11).UnmarshalEasyJSON(in)
					(out.Item)[key] = v11
					in.WantComma()
				}
				in.Delim('}')
			}
		case "player":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Player = make(map[PlayerID]Player)
				} else {
					out.Player = nil
				}
				for !in.IsDelim('}') {
					key := PlayerID(in.IntStr())
					in.WantColon()
					var v12 Player
					(v12).UnmarshalEasyJSON(in)
					(out.Player)[key] = v12
					in.WantComma()
				}
				in.Delim('}')
			}
		case "position":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Position = make(map[PositionID]Position)
				} else {
					out.Position = nil
				}
				for !in.IsDelim('}') {
					key := PositionID(in.IntStr())
					in.WantColon()
					var v13 Position
					(v13).UnmarshalEasyJSON(in)
					(out.Position)[key] = v13
					in.WantComma()
				}
				in.Delim('}')
			}
		case "zone":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Zone = make(map[ZoneID]Zone)
				} else {
					out.Zone = nil
				}
				for !in.IsDelim('}') {
					key := ZoneID(in.IntStr())
					in.WantColon()
					var v14 Zone
					(v14).UnmarshalEasyJSON(in)
					(out.Zone)[key] = v14
					in.WantComma()
				}
				in.Delim('}')
			}
		case "zoneItem":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ZoneItem = make(map[ZoneItemID]ZoneItem)
				} else {
					out.ZoneItem = nil
				}
				for !in.IsDelim('}') {
					key := ZoneItemID(in.IntStr())
					in.WantColon()
					var v15 ZoneItem
					(v15).UnmarshalEasyJSON(in)
					(out.ZoneItem)[key] = v15
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19a9978cEncodeBarCliEnginefactoryStateEngineExample2(out *jwriter.Writer, in Tree) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.GearScore) != 0 {
		const prefix string = ",\"gearScore\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v16First := true
			for v16Name, v16Value := range in.GearScore {
				if v16First {
					v16First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v16Name))
				out.RawByte(':')
				(v16Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Item) != 0 {
		const prefix string = ",\"item\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v17First := true
			for v17Name, v17Value := range in.Item {
				if v17First {
					v17First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v17Name))
				out.RawByte(':')
				(v17Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Player) != 0 {
		const prefix string = ",\"player\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v18First := true
			for v18Name, v18Value := range in.Player {
				if v18First {
					v18First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v18Name))
				out.RawByte(':')
				(v18Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Position) != 0 {
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v19First := true
			for v19Name, v19Value := range in.Position {
				if v19First {
					v19First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v19Name))
				out.RawByte(':')
				(v19Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Zone) != 0 {
		const prefix string = ",\"zone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v20First := true
			for v20Name, v20Value := range in.Zone {
				if v20First {
					v20First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v20Name))
				out.RawByte(':')
				(v20Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.ZoneItem) != 0 {
		const prefix string = ",\"zoneItem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v21First := true
			for v21Name, v21Value := range in.ZoneItem {
				if v21First {
					v21First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v21Name))
				out.RawByte(':')
				(v21Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tree) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson19a9978cEncodeBarCliEnginefactoryStateEngineExample2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tree) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson19a9978cEncodeBarCliEnginefactoryStateEngineExample2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tree) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson19a9978cDecodeBarCliEnginefactoryStateEngineExample2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tree) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19a9978cDecodeBarCliEnginefactoryStateEngineExample2(l, v)
}
func easyjson19a9978cDecodeBarCliEnginefactoryStateEngineExample3(in *jlexer.Lexer, out *Position) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = PositionID(in.Int())
		case "x":
			out.X = float64(in.Float64())
		case "y":
			out.Y = float64(in.Float64())
		case "operationKind_":
			out.OperationKind_ = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19a9978cEncodeBarCliEnginefactoryStateEngineExample3(out *jwriter.Writer, in Position) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.X != 0 {
		const prefix string = ",\"x\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Y))
	}
	if in.OperationKind_ != "" {
		const prefix string = ",\"operationKind_\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind_))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Position) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson19a9978cEncodeBarCliEnginefactoryStateEngineExample3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Position) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson19a9978cEncodeBarCliEnginefactoryStateEngineExample3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Position) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson19a9978cDecodeBarCliEnginefactoryStateEngineExample3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Position) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19a9978cDecodeBarCliEnginefactoryStateEngineExample3(l, v)
}
func easyjson19a9978cDecodeBarCliEnginefactoryStateEngineExample4(in *jlexer.Lexer, out *Player) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = PlayerID(in.Int())
		case "gearScore":
			if in.IsNull() {
				in.Skip()
				out.GearScore = nil
			} else {
				if out.GearScore == nil {
					out.GearScore = new(GearScore)
				}
				(*out.GearScore).UnmarshalEasyJSON(in)
			}
		case "guildMembers":
			if in.IsNull() {
				in.Skip()
				out.GuildMembers = nil
			} else {
				in.Delim('[')
				if out.GuildMembers == nil {
					if !in.IsDelim(']') {
						out.GuildMembers = make([]ElementReference, 0, 2)
					} else {
						out.GuildMembers = []ElementReference{}
					}
				} else {
					out.GuildMembers = (out.GuildMembers)[:0]
				}
				for !in.IsDelim(']') {
					var v22 ElementReference
					(v22).UnmarshalEasyJSON(in)
					out.GuildMembers = append(out.GuildMembers, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]Item, 0, 1)
					} else {
						out.Items = []Item{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v23 Item
					(v23).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "position":
			if in.IsNull() {
				in.Skip()
				out.Position = nil
			} else {
				if out.Position == nil {
					out.Position = new(Position)
				}
				(*out.Position).UnmarshalEasyJSON(in)
			}
		case "operationKind_":
			out.OperationKind_ = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19a9978cEncodeBarCliEnginefactoryStateEngineExample4(out *jwriter.Writer, in Player) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.GearScore != nil {
		const prefix string = ",\"gearScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.GearScore).MarshalEasyJSON(out)
	}
	if len(in.GuildMembers) != 0 {
		const prefix string = ",\"guildMembers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v24, v25 := range in.GuildMembers {
				if v24 > 0 {
					out.RawByte(',')
				}
				(v25).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.Items {
				if v26 > 0 {
					out.RawByte(',')
				}
				(v27).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Position != nil {
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Position).MarshalEasyJSON(out)
	}
	if in.OperationKind_ != "" {
		const prefix string = ",\"operationKind_\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind_))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Player) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson19a9978cEncodeBarCliEnginefactoryStateEngineExample4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Player) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson19a9978cEncodeBarCliEnginefactoryStateEngineExample4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Player) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson19a9978cDecodeBarCliEnginefactoryStateEngineExample4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Player) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19a9978cDecodeBarCliEnginefactoryStateEngineExample4(l, v)
}
func easyjson19a9978cDecodeBarCliEnginefactoryStateEngineExample5(in *jlexer.Lexer, out *Item) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ItemID(in.Int())
		case "boundTo":
			(out.BoundTo).UnmarshalEasyJSON(in)
		case "gearScore":
			if in.IsNull() {
				in.Skip()
				out.GearScore = nil
			} else {
				if out.GearScore == nil {
					out.GearScore = new(GearScore)
				}
				(*out.GearScore).UnmarshalEasyJSON(in)
			}
		case "operationKind_":
			out.OperationKind_ = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19a9978cEncodeBarCliEnginefactoryStateEngineExample5(out *jwriter.Writer, in Item) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if true {
		const prefix string = ",\"boundTo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.BoundTo).MarshalEasyJSON(out)
	}
	if in.GearScore != nil {
		const prefix string = ",\"gearScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.GearScore).MarshalEasyJSON(out)
	}
	if in.OperationKind_ != "" {
		const prefix string = ",\"operationKind_\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind_))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Item) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson19a9978cEncodeBarCliEnginefactoryStateEngineExample5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Item) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson19a9978cEncodeBarCliEnginefactoryStateEngineExample5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Item) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson19a9978cDecodeBarCliEnginefactoryStateEngineExample5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Item) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19a9978cDecodeBarCliEnginefactoryStateEngineExample5(l, v)
}
func easyjson19a9978cDecodeBarCliEnginefactoryStateEngineExample6(in *jlexer.Lexer, out *GearScore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = GearScoreID(in.Int())
		case "level":
			out.Level = int(in.Int())
		case "score":
			out.Score = int(in.Int())
		case "operationKind_":
			out.OperationKind_ = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19a9978cEncodeBarCliEnginefactoryStateEngineExample6(out *jwriter.Writer, in GearScore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Level != 0 {
		const prefix string = ",\"level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Level))
	}
	if in.Score != 0 {
		const prefix string = ",\"score\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Score))
	}
	if in.OperationKind_ != "" {
		const prefix string = ",\"operationKind_\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind_))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GearScore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson19a9978cEncodeBarCliEnginefactoryStateEngineExample6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GearScore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson19a9978cEncodeBarCliEnginefactoryStateEngineExample6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GearScore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson19a9978cDecodeBarCliEnginefactoryStateEngineExample6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GearScore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19a9978cDecodeBarCliEnginefactoryStateEngineExample6(l, v)
}
func easyjson19a9978cDecodeBarCliEnginefactoryStateEngineExample7(in *jlexer.Lexer, out *ElementReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = int(in.Int())
		case "ElementKind":
			out.ElementKind = ElementKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19a9978cEncodeBarCliEnginefactoryStateEngineExample7(out *jwriter.Writer, in ElementReference) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"ID\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.ElementKind != "" {
		const prefix string = ",\"ElementKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElementKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ElementReference) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson19a9978cEncodeBarCliEnginefactoryStateEngineExample7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ElementReference) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson19a9978cEncodeBarCliEnginefactoryStateEngineExample7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ElementReference) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson19a9978cDecodeBarCliEnginefactoryStateEngineExample7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ElementReference) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19a9978cDecodeBarCliEnginefactoryStateEngineExample7(l, v)
}
