// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go

// Package mock_endtoend is a generated GoMock package.
package endtoend

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	message "github.com/jobergner/backent-cli/examples/message"
	server "github.com/jobergner/backent-cli/examples/server"
	state "github.com/jobergner/backent-cli/examples/state"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// AddItemToPlayer mocks base method.
func (m *MockController) AddItemToPlayer(params message.AddItemToPlayerParams, engine *state.Engine, roomName, clientID string) message.AddItemToPlayerResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItemToPlayer", params, engine, roomName, clientID)
	ret0, _ := ret[0].(message.AddItemToPlayerResponse)
	return ret0
}

// AddItemToPlayer indicates an expected call of AddItemToPlayer.
func (mr *MockControllerMockRecorder) AddItemToPlayer(params, engine, roomName, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItemToPlayer", reflect.TypeOf((*MockController)(nil).AddItemToPlayer), params, engine, roomName, clientID)
}

// MovePlayer mocks base method.
func (m *MockController) MovePlayer(params message.MovePlayerParams, engine *state.Engine, roomName, clientID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MovePlayer", params, engine, roomName, clientID)
}

// MovePlayer indicates an expected call of MovePlayer.
func (mr *MockControllerMockRecorder) MovePlayer(params, engine, roomName, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovePlayer", reflect.TypeOf((*MockController)(nil).MovePlayer), params, engine, roomName, clientID)
}

// OnClientConnect mocks base method.
func (m *MockController) OnClientConnect(client *server.Client, lobby *server.Lobby) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnClientConnect", client, lobby)
}

// OnClientConnect indicates an expected call of OnClientConnect.
func (mr *MockControllerMockRecorder) OnClientConnect(client, lobby interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnClientConnect", reflect.TypeOf((*MockController)(nil).OnClientConnect), client, lobby)
}

// OnClientDisconnect mocks base method.
func (m *MockController) OnClientDisconnect(room *server.Room, clientID string, lobby *server.Lobby) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnClientDisconnect", room, clientID, lobby)
}

// OnClientDisconnect indicates an expected call of OnClientDisconnect.
func (mr *MockControllerMockRecorder) OnClientDisconnect(room, clientID, lobby interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnClientDisconnect", reflect.TypeOf((*MockController)(nil).OnClientDisconnect), room, clientID, lobby)
}

// OnCreation mocks base method.
func (m *MockController) OnCreation(lobby *server.Lobby) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnCreation", lobby)
}

// OnCreation indicates an expected call of OnCreation.
func (mr *MockControllerMockRecorder) OnCreation(lobby interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnCreation", reflect.TypeOf((*MockController)(nil).OnCreation), lobby)
}

// OnFrameTick mocks base method.
func (m *MockController) OnFrameTick(engine *state.Engine) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnFrameTick", engine)
}

// OnFrameTick indicates an expected call of OnFrameTick.
func (mr *MockControllerMockRecorder) OnFrameTick(engine interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnFrameTick", reflect.TypeOf((*MockController)(nil).OnFrameTick), engine)
}

// OnSuperMessage mocks base method.
func (m *MockController) OnSuperMessage(msg server.Message, room *server.Room, client *server.Client, lobby *server.Lobby) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnSuperMessage", msg, room, client, lobby)
}

// OnSuperMessage indicates an expected call of OnSuperMessage.
func (mr *MockControllerMockRecorder) OnSuperMessage(msg, room, client, lobby interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSuperMessage", reflect.TypeOf((*MockController)(nil).OnSuperMessage), msg, room, client, lobby)
}

// SpawnZoneItems mocks base method.
func (m *MockController) SpawnZoneItems(params message.SpawnZoneItemsParams, engine *state.Engine, roomName, clientID string) message.SpawnZoneItemsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpawnZoneItems", params, engine, roomName, clientID)
	ret0, _ := ret[0].(message.SpawnZoneItemsResponse)
	return ret0
}

// SpawnZoneItems indicates an expected call of SpawnZoneItems.
func (mr *MockControllerMockRecorder) SpawnZoneItems(params, engine, roomName, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpawnZoneItems", reflect.TypeOf((*MockController)(nil).SpawnZoneItems), params, engine, roomName, clientID)
}
