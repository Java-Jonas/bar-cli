// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jobergner/backent-cli/test (interfaces: Controller)

// Package endtoend is a generated GoMock package.
package endtoend

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	message "github.com/jobergner/backent-cli/examples/message"
	server "github.com/jobergner/backent-cli/examples/server"
	state "github.com/jobergner/backent-cli/examples/state"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// AddItemToPlayerBroadcast mocks base method.
func (m *MockController) AddItemToPlayerBroadcast(arg0 message.AddItemToPlayerParams, arg1 *state.Engine, arg2, arg3 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddItemToPlayerBroadcast", arg0, arg1, arg2, arg3)
}

// AddItemToPlayerBroadcast indicates an expected call of AddItemToPlayerBroadcast.
func (mr *MockControllerMockRecorder) AddItemToPlayerBroadcast(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItemToPlayerBroadcast", reflect.TypeOf((*MockController)(nil).AddItemToPlayerBroadcast), arg0, arg1, arg2, arg3)
}

// AddItemToPlayerEmit mocks base method.
func (m *MockController) AddItemToPlayerEmit(arg0 message.AddItemToPlayerParams, arg1 *state.Engine, arg2, arg3 string) message.AddItemToPlayerResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItemToPlayerEmit", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(message.AddItemToPlayerResponse)
	return ret0
}

// AddItemToPlayerEmit indicates an expected call of AddItemToPlayerEmit.
func (mr *MockControllerMockRecorder) AddItemToPlayerEmit(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItemToPlayerEmit", reflect.TypeOf((*MockController)(nil).AddItemToPlayerEmit), arg0, arg1, arg2, arg3)
}

// MovePlayerBroadcast mocks base method.
func (m *MockController) MovePlayerBroadcast(arg0 message.MovePlayerParams, arg1 *state.Engine, arg2, arg3 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MovePlayerBroadcast", arg0, arg1, arg2, arg3)
}

// MovePlayerBroadcast indicates an expected call of MovePlayerBroadcast.
func (mr *MockControllerMockRecorder) MovePlayerBroadcast(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovePlayerBroadcast", reflect.TypeOf((*MockController)(nil).MovePlayerBroadcast), arg0, arg1, arg2, arg3)
}

// MovePlayerEmit mocks base method.
func (m *MockController) MovePlayerEmit(arg0 message.MovePlayerParams, arg1 *state.Engine, arg2, arg3 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MovePlayerEmit", arg0, arg1, arg2, arg3)
}

// MovePlayerEmit indicates an expected call of MovePlayerEmit.
func (mr *MockControllerMockRecorder) MovePlayerEmit(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovePlayerEmit", reflect.TypeOf((*MockController)(nil).MovePlayerEmit), arg0, arg1, arg2, arg3)
}

// OnClientConnect mocks base method.
func (m *MockController) OnClientConnect(arg0 *server.Client, arg1 *server.Lobby) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnClientConnect", arg0, arg1)
}

// OnClientConnect indicates an expected call of OnClientConnect.
func (mr *MockControllerMockRecorder) OnClientConnect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnClientConnect", reflect.TypeOf((*MockController)(nil).OnClientConnect), arg0, arg1)
}

// OnClientDisconnect mocks base method.
func (m *MockController) OnClientDisconnect(arg0 *server.Room, arg1 string, arg2 *server.Lobby) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnClientDisconnect", arg0, arg1, arg2)
}

// OnClientDisconnect indicates an expected call of OnClientDisconnect.
func (mr *MockControllerMockRecorder) OnClientDisconnect(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnClientDisconnect", reflect.TypeOf((*MockController)(nil).OnClientDisconnect), arg0, arg1, arg2)
}

// OnCreation mocks base method.
func (m *MockController) OnCreation(arg0 *server.Lobby) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnCreation", arg0)
}

// OnCreation indicates an expected call of OnCreation.
func (mr *MockControllerMockRecorder) OnCreation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnCreation", reflect.TypeOf((*MockController)(nil).OnCreation), arg0)
}

// OnFrameTick mocks base method.
func (m *MockController) OnFrameTick(arg0 *state.Engine) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnFrameTick", arg0)
}

// OnFrameTick indicates an expected call of OnFrameTick.
func (mr *MockControllerMockRecorder) OnFrameTick(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnFrameTick", reflect.TypeOf((*MockController)(nil).OnFrameTick), arg0)
}

// OnSuperMessage mocks base method.
func (m *MockController) OnSuperMessage(arg0 server.Message, arg1 *server.Room, arg2 *server.Client, arg3 *server.Lobby) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnSuperMessage", arg0, arg1, arg2, arg3)
}

// OnSuperMessage indicates an expected call of OnSuperMessage.
func (mr *MockControllerMockRecorder) OnSuperMessage(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSuperMessage", reflect.TypeOf((*MockController)(nil).OnSuperMessage), arg0, arg1, arg2, arg3)
}

// SpawnZoneItemsBroadcast mocks base method.
func (m *MockController) SpawnZoneItemsBroadcast(arg0 message.SpawnZoneItemsParams, arg1 *state.Engine, arg2, arg3 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SpawnZoneItemsBroadcast", arg0, arg1, arg2, arg3)
}

// SpawnZoneItemsBroadcast indicates an expected call of SpawnZoneItemsBroadcast.
func (mr *MockControllerMockRecorder) SpawnZoneItemsBroadcast(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpawnZoneItemsBroadcast", reflect.TypeOf((*MockController)(nil).SpawnZoneItemsBroadcast), arg0, arg1, arg2, arg3)
}

// SpawnZoneItemsEmit mocks base method.
func (m *MockController) SpawnZoneItemsEmit(arg0 message.SpawnZoneItemsParams, arg1 *state.Engine, arg2, arg3 string) message.SpawnZoneItemsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpawnZoneItemsEmit", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(message.SpawnZoneItemsResponse)
	return ret0
}

// SpawnZoneItemsEmit indicates an expected call of SpawnZoneItemsEmit.
func (mr *MockControllerMockRecorder) SpawnZoneItemsEmit(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpawnZoneItemsEmit", reflect.TypeOf((*MockController)(nil).SpawnZoneItemsEmit), arg0, arg1, arg2, arg3)
}
