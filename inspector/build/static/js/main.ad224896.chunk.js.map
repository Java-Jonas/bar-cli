{"version":3,"sources":["defaultValues.js","TextInput.js","BoolInput.js","NumberInput.js","SliceInput.js","evalInput.js","Input.js","Actions.js","Empty.js","ResponseCard.js","MessageCard.js","CurrentStateCard.js","ConfigCard.js","UpdateCard.js","AppBar.js","App.js","reportWebVitals.js","index.js"],"names":["numericTypes","textTypes","defualtValuePerValue","value","startsWith","includes","endsWith","TextInput","props","setFormContent","currentFormContent","fieldName","className","onChange","e","target","placeholder","BoolInput","currentValue","style","minWidth","onClick","intent","Intent","PRIMARY","NONE","NumberInput","onValueChange","SliceInput","useState","isOpen","setOpen","newValue","setNewValue","currentValues","clearButton","icon","minimal","popoverContent","elevation","evalInput","wrappedNewvalue","DANGER","disabled","addButton","modifiers","arrow","enabled","content","remainingTags","rightElement","values","map","x","toString","inputProps","display","tagProps","key","omitLabel","label","slice","Input","action","Object","entries","Action","setSentData","actionName","ws","defaultAciton","defaultValueAction","formContent","iconSize","rightIcon","text","Classes","BUTTON","kind","JSON","stringify","send","Actions","config","actions","keyName","Empty","title","description","ResponseCard","data","collapsed","src","flexDirection","color","MessageCard","CurrentStateCard","ConfigCard","UpdateCard","AppBar","AppToaster","Toaster","create","position","Position","TOP","App","state","receivedData","socketStatus","sentData","configData","setSocketStatus","newStatus","setState","setReceivedData","newData","setConfigData","port","URLSearchParams","window","location","search","get","WebSocket","open","onclose","this","onmessage","message","parse","show","axios","then","res","currentState","update","latestResponse","bind","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad224896.chunk.js","sourcesContent":["export const numericTypes = [\n  \"int8\",\n  \"uint8\",\n  \"int16\",\n  \"uint16\",\n  \"int32\",\n  \"uint32\",\n  \"int64\",\n  \"uint64\",\n  \"int\",\n  \"uint\",\n  \"uintptr\",\n  \"float32\",\n  \"float64\",\n  \"complex64\",\n  \"complex128\",\n];\n\nexport const textTypes = [\"string\", \"byte\", \"rune\", \"[]byte\"];\n\nexport const defualtValuePerValue = (value) => {\n  if (value.startsWith(\"[]\")) {\n    return []\n  }\n  if (numericTypes.includes(value) || value.endsWith(\"ID\")) {\n    return 0;\n  }\n  if (textTypes.includes(value)) {\n    return \"\";\n  }\n  return false;\n};\n\nexport const defaultValueAction = (action) => {\n  const defaultAciton = {};\n  for (const [key, value] of Object.entries(action)) {\n    defaultAciton[key] = defualtValuePerValue(value);\n  }\n  return defaultAciton;\n};\n","import { InputGroup } from \"@blueprintjs/core\";\n\nfunction TextInput(props) {\n  const { setFormContent, currentFormContent, fieldName } = props;\n  return (\n    <>\n      <InputGroup\n        className=\"TextInput\"\n        onChange={(e) => {\n          setFormContent({\n            ...currentFormContent,\n            [fieldName]: e.target.value,\n          });\n        }}\n        placeholder={fieldName}\n      />\n    </>\n  );\n}\n\nexport default TextInput;\n","import { Button, ButtonGroup, Intent } from \"@blueprintjs/core\";\n\nfunction BoolInput(props) {\n  const { setFormContent, currentFormContent, fieldName } = props;\n  const currentValue = currentFormContent[fieldName];\n  return (\n    <div className=\"BoolInput\">\n      <ButtonGroup style={{ minWidth: 120 }}>\n        <Button\n          onClick={() =>\n            setFormContent({ ...currentFormContent, [fieldName]: true })\n          }\n          intent={currentValue === true ? Intent.PRIMARY : Intent.NONE}\n        >\n          true\n        </Button>\n        <Button\n          onClick={() =>\n            setFormContent({ ...currentFormContent, [fieldName]: false })\n          }\n          intent={currentValue === false ? Intent.PRIMARY : Intent.NONE}\n        >\n          false\n        </Button>\n      </ButtonGroup>\n    </div>\n  );\n}\n\nexport default BoolInput;\n","import { NumericInput } from \"@blueprintjs/core\";\n\nfunction NumberInput(props) {\n  const { setFormContent, currentFormContent, fieldName } = props;\n  return (\n    <>\n      <NumericInput\n        className=\"NumberInput\"\n        placeholder={currentFormContent[fieldName]}\n        onValueChange={(value) => {\n          setFormContent({ ...currentFormContent, [fieldName]: value });\n        }}\n      />\n    </>\n  );\n}\n\nexport default NumberInput;\n","import React, { useState } from \"react\";\nimport { Divider, Card, TagInput, Button, Intent } from \"@blueprintjs/core\";\nimport evalInput from \"./evalInput\";\nimport { Popover2 } from \"@blueprintjs/popover2\";\nimport {defualtValuePerValue} from \"./defaultValues\"\n\nfunction SliceInput(props) {\n  const [isOpen, setOpen] = useState(false);\n  const [newValue, setNewValue] = useState(\"\");\n  const { setFormContent, currentFormContent, fieldName, value } = props;\n\n  const currentValues = currentFormContent[fieldName] || [];\n\n  const clearButton = (\n    <Button\n      onClick={() =>\n        setFormContent({\n          ...currentFormContent,\n          [fieldName]: [],\n        })\n      }\n      key=\"clearButton\"\n      icon={\"cross\"}\n      minimal={true}\n    />\n  );\n\n  const popoverContent = (\n    <Card className=\"SlicePopover\" elevation={2}>\n      <span>Append New Value</span>\n      <Divider />\n      {evalInput(\n        fieldName,\n        value,\n        (wrappedNewvalue) => {\n          setNewValue(wrappedNewvalue[fieldName]);\n        },\n        { [fieldName]: newValue },\n        true\n      )}\n      <div className=\"PopOverButtons\">\n        <Button\n          intent={Intent.DANGER}\n          minimal\n          onClick={() => {\n            setOpen(false);\n            setNewValue(null);\n          }}\n        >\n          close\n        </Button>\n        <Button\n          intent={Intent.PRIMARY}\n          minimal\n          disabled={newValue === \"\"}\n          onClick={() => {\n            setOpen(false);\n            setNewValue(null);\n            setFormContent({\n              ...currentFormContent,\n              [fieldName]: [\n                ...currentValues,\n                newValue || defualtValuePerValue(value),\n              ],\n            });\n          }}\n        >\n          add\n        </Button>\n      </div>\n    </Card>\n  );\n\n  const addButton = (\n    <Popover2\n      key=\"addButton\"\n      modifiers={{ arrow: { enabled: true } }}\n      isOpen={isOpen}\n      content={popoverContent}\n    >\n      <Button\n        icon={\"add\"}\n        minimal\n        onClick={() => setOpen(true)}\n        intent={Intent.PRIMARY}\n      />\n    </Popover2>\n  );\n\n  return (\n    <div className=\"SliceInput\">\n      <TagInput\n        onChange={(remainingTags) =>\n          setFormContent({\n            ...currentFormContent,\n            [fieldName]: remainingTags,\n          })\n        }\n        placeholder={fieldName}\n        rightElement={[addButton, clearButton]}\n        values={currentValues.map((x) => x.toString())}\n        inputProps={{ style: { display: \"none\" } }}\n        tagProps={{ minimal: true }}\n      />\n    </div>\n  );\n}\n\nexport default SliceInput;\n","import { Label } from \"@blueprintjs/core\";\nimport TextInput from \"./TextInput\";\nimport BoolInput from \"./BoolInput\";\nimport NumberInput from \"./NumberInput\";\nimport SliceInput from \"./SliceInput\";\n\nconst numericTypes = [\n  \"int8\",\n  \"uint8\",\n  \"int16\",\n  \"uint16\",\n  \"int32\",\n  \"uint32\",\n  \"int64\",\n  \"uint64\",\n  \"int\",\n  \"uint\",\n  \"uintptr\",\n  \"float32\",\n  \"float64\",\n  \"complex64\",\n  \"complex128\",\n];\nconst textTypes = [\"string\", \"byte\", \"rune\", \"[]byte\"];\n\n\nconst evalInput = (key, value, setFormContent, currentFormContent, omitLabel) => {\n  let label = (\n    <Label className=\"InputLabel\">\n      {key}: <span className=\"bp3-text-muted\">{value}</span>\n    </Label>\n  );\n  if (omitLabel) {\n    label = null\n  }\n\n  if (value.startsWith(\"[]\")) {\n    return (\n      <div className=\"InputField\" key={key}>\n        {label}\n        <SliceInput\n          fieldName={key}\n          value={value.slice(2)}\n          currentFormContent={currentFormContent}\n          setFormContent={setFormContent}\n        />\n      </div>\n    );\n  }\n  if (textTypes.includes(value)) {\n    return (\n      <div className=\"InputField\" key={key}>\n        {label}\n        <TextInput\n          fieldName={key}\n          currentFormContent={currentFormContent}\n          setFormContent={setFormContent}\n        />\n      </div>\n    );\n  }\n  if (numericTypes.includes(value) || value.endsWith(\"ID\")) {\n    return (\n      <div className=\"InputField\" key={key}>\n        {label}\n        <NumberInput\n          fieldName={key}\n          currentFormContent={currentFormContent}\n          setFormContent={setFormContent}\n        />\n      </div>\n    );\n  }\n  if (value === \"bool\") {\n    return (\n      <div className=\"InputField\" key={key}>\n        {label}\n        <BoolInput\n          fieldName={key}\n          currentFormContent={currentFormContent}\n          setFormContent={setFormContent}\n        />\n      </div>\n    );\n  }\n};\n\nexport default evalInput\n","import \"./Actions.css\";\nimport evalInput from \"./evalInput\"\n\nfunction Input(props) {\n  const { setFormContent, currentFormContent, action } = props;\n  return (\n    <>\n      {Object.entries(action).map(([key, value]) => {\n        return evalInput(key, value, setFormContent, currentFormContent)\n      })}\n    </>\n  );\n}\n\nexport default Input;\n","import React, { useState } from \"react\";\n\nimport { defaultValueAction } from \"./defaultValues\";\nimport \"./Actions.css\";\nimport Input from \"./Input\";\nimport {\n  Icon,\n  Button,\n  Card,\n  H5,\n  Classes,\n  Intent,\n  Divider,\n} from \"@blueprintjs/core\";\n\nfunction Action(props) {\n  const { setSentData, actionName, action, ws } = props;\n  const [formContent, setFormContent] = useState(defaultValueAction(action));\n  return (\n    <Card elevation={0} className=\"card Action\">\n      <>\n        <div className=\"ActionUpperSection\">\n          <H5>\n            <Icon\n              className=\"HeadlineIcon\"\n              iconSize={17}\n              icon=\"send-to\"\n              intent={Intent.PRIMARY}\n            />\n            {actionName}\n          </H5>\n          <Divider />\n          <div className=\"InputsWrapper\">\n            <Input\n              currentFormContent={formContent}\n              setFormContent={setFormContent}\n              action={action}\n            />\n          </div>\n        </div>\n        <div className=\"ActionLower\">\n          <Divider />\n          <div className=\"ActionSendButtonWrapper\">\n            {/*<Button\n              className=\"CardButton\"\n              intent={Intent.PRIMARY}\n              rightIcon=\"inbox\"\n              disabled\n              minimal\n              text=\"View Response\"\n            />*/}\n            <Button\n              intent={Intent.PRIMARY}\n              rightIcon=\"send-message\"\n              text=\"Send\"\n              className={Classes.BUTTON}\n              onClick={() => {\n                setSentData({\n                  kind: actionName,\n                  content: JSON.stringify(formContent),\n                });\n                ws.send(\n                  JSON.stringify({\n                    kind: actionName,\n                    content: JSON.stringify(formContent),\n                  })\n                );\n              }}\n            />\n          </div>\n        </div>\n      </>\n    </Card>\n  );\n}\n\nfunction Actions({ ws, setSentData, config }) {\n  if (!config) {\n    return null;\n  }\n  return (\n    <>\n      {Object.entries(config.actions).map(([keyName, value]) => {\n        return (\n          <Action\n            ws={ws}\n            setSentData={setSentData}\n            key={keyName}\n            actionName={keyName}\n            action={value}\n          />\n        );\n      })}\n    </>\n  );\n}\n\nexport default Actions;\n","import {\n  NonIdealState,\n} from \"@blueprintjs/core\";\n\nfunction Empty(props) {\n  return (\n    <NonIdealState\n      icon=\"time\"\n      title=\"Nothing Here Yet!\"\n      description={props.description}\n    />\n  );\n}\n\nexport default Empty;\n","import { Divider, Icon, Intent, Card, H5 } from \"@blueprintjs/core\";\nimport ReactJson from \"react-json-view\";\nimport Empty from \"./Empty\";\n\nfunction ResponseCard({ data }) {\n  return (\n    <Card elevation={0} className=\"card Action nospacebetween\">\n      <div>\n        <H5>\n          <Icon\n            className=\"HeadlineIcon\"\n            iconSize={17}\n            icon=\"download\"\n            intent={Intent.PRIMARY}\n          />\n          Latest Response\n        </H5>\n        <Divider />\n      </div>\n      <div className=\"JsonWrapper\">\n        {data && <ReactJson collapsed src={data} />}\n        {!data && (\n          <div>\n            <Empty\n              description={\n                <div style={{display: \"flex\", flexDirection: \"column\"}}>\n                  <span>Send an Action to receive a Response</span>\n                  <span style={{ color: \"orange\" }}>\n                    Not all messages return a direct response though!\n                  </span>\n                </div>\n              }\n            />\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n}\n\nexport default ResponseCard;\n","import { Divider, Icon, Intent, Card, H5 } from \"@blueprintjs/core\";\nimport ReactJson from \"react-json-view\";\nimport Empty from \"./Empty\";\n\nfunction MessageCard({ data }) {\n  return (\n    <Card elevation={0} className=\"card Action nospacebetween\">\n      <div>\n        <H5>\n          <Icon\n            className=\"HeadlineIcon\"\n            iconSize={17}\n            icon=\"send-to\"\n            intent={Intent.PRIMARY}\n          />\n          Latest Sent Message\n        </H5>\n        <Divider />\n      </div>\n      <div className=\"JsonWrapper\">\n        {data && <ReactJson collapsed src={data} />}\n        {!data && (\n          <div>\n            <Empty description={\"Send an action and it's content will be displayed here!\"} />\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n}\n\nexport default MessageCard;\n","import { Divider, Icon, Intent, Card, H5 } from \"@blueprintjs/core\";\nimport ReactJson from \"react-json-view\";\nimport Empty from \"./Empty\";\n\nfunction CurrentStateCard({ data }) {\n  return (\n    <Card elevation={0} className=\"card card1\">\n      <H5>\n        <Icon\n          className=\"HeadlineIcon\"\n          iconSize={17}\n          icon=\"diagram-tree\"\n          intent={Intent.PRIMARY}\n        />\n        Current State\n      </H5>\n      <Divider />\n      <div className=\"JsonWrapper\">\n        {data && <ReactJson collapsed src={data} />}\n        {!data && (\n          <Empty\n            description={\n              \"As soon as you connect to the server the current server state will appear here!\"\n            }\n          />\n        )}\n      </div>\n    </Card>\n  );\n}\n\nexport default CurrentStateCard;\n","import { Divider, Icon, Intent, Card, H5 } from \"@blueprintjs/core\";\nimport ReactJson from \"react-json-view\";\nimport Empty from \"./Empty\";\n\nfunction ConfigCard({ data }) {\n  return (\n    <Card elevation={0} className=\"card card1\">\n      <H5>\n        <Icon\n          className=\"HeadlineIcon\"\n          iconSize={17}\n          icon=\"wrench\"\n          intent={Intent.PRIMARY}\n        />\n        Config\n      </H5>\n      <Divider />\n      <div className=\"JsonWrapper\">\n        {data && <ReactJson collapsed src={data} />}\n        {!data && (\n          <Empty\n            description={\n              <span style={{color: \"red\"}}>\n              Currently trying to retrieve the config. Is your server running?\n              </span>\n            }\n          />\n        )}\n      </div>\n    </Card>\n  );\n}\n\nexport default ConfigCard;\n","import { Divider, Icon, Intent, Card, H5 } from \"@blueprintjs/core\";\nimport ReactJson from \"react-json-view\";\nimport Empty from \"./Empty\"\n\nfunction UpdateCard({data}) {\n  return (\n    <Card elevation={0} className=\"card card1\">\n      <H5>\n        <Icon\n          className=\"HeadlineIcon\"\n          iconSize={17}\n          icon=\"diagram-tree\"\n          intent={Intent.PRIMARY}\n        />\n        Latest Update\n      </H5>\n      <Divider />\n      <div className=\"JsonWrapper\">\n      {data && <ReactJson collapsed src={data} />}\n      {!data && <Empty description={\"The next update the server emitts will appear here!\"}/>} \n      </div>\n    </Card>\n  );\n}\n\nexport default UpdateCard;\n","import * as React from \"react\";\n\nimport {\n    Navbar,\n    NavbarGroup,\n    NavbarHeading,\n} from \"@blueprintjs/core\";\n\nfunction AppBar () {\n    return (\n        <Navbar>\n            <NavbarGroup >\n                <NavbarHeading>Inspector</NavbarHeading>\n            </NavbarGroup>\n        </Navbar>\n    );\n}\n\nexport default AppBar\n","import React from \"react\";\nimport \"./App.css\";\nimport Actions from \"./Actions\";\nimport axios from \"axios\";\nimport ResponseCard from \"./ResponseCard\";\nimport MessageCard from \"./MessageCard\";\nimport { Intent, Toaster, Toast, Position } from \"@blueprintjs/core\";\nimport CurrentStateCard from \"./CurrentStateCard\";\nimport ConfigCard from \"./ConfigCard\";\nimport UpdateCard from \"./UpdateCard\";\nimport AppBar from \"./AppBar\";\nimport { useEffect, useState, useRef } from \"react\";\n\nconst AppToaster = Toaster.create({\n  className: \"recipe-toaster\",\n  position: Position.TOP,\n});\n\nclass App extends React.Component {\n  state = {\n    ws: null,\n    receivedData: {},\n    socketStatus: \"closed\",\n    sentData: null,\n    configData: null,\n  };\n\n  setSocketStatus = (newStatus) => {\n    this.setState({ socketStatus: newStatus });\n  };\n\n  setReceivedData = (key, data) => {\n    this.setState({\n      receivedData: { ...this.state.receivedData, [key]: data },\n    });\n  };\n\n  setSentData = (newData) => {\n    this.setState({\n      sentData: { ...newData },\n    });\n  };\n\n  setConfigData = (newData) => {\n    this.setState({\n      configData: { ...newData },\n    });\n  };\n\n  componentDidMount() {\n    var params = new URLSearchParams(window.location.search);\n    let port = params.get(\"port\");\n    if (!port) {\n      port = 3496;\n    }\n    const ws = new WebSocket(\"ws://localhost:\" + port + \"/ws\");\n    ws.open = () => this.setSocketStatus(\"open\");\n    ws.onclose = () => this.setSocketStatus(\"closed\");\n\n    this.setState({ ws: ws });\n\n    ws.onmessage = (e) => {\n      const message = JSON.parse(e.data);\n      if (message.kind === \"currentState\") {\n        this.setReceivedData(\"currentState\", JSON.parse(message.content));\n      } else if (message.kind === \"update\") {\n        AppToaster.show({\n          intent: Intent.PRIMARY,\n          message: \"new update received!\",\n        });\n        this.setReceivedData(\"update\", JSON.parse(message.content));\n        axios.get(\"http://localhost:\" + port + \"/state\").then((res) => {\n          this.setReceivedData(\"currentState\", res.data);\n        });\n      } else {\n        this.setReceivedData(\"latestResponse\", JSON.parse(message.content));\n      }\n    };\n\n    axios.get(\"http://localhost:\" + port + \"/inspect\").then((res) => {\n      this.setConfigData(res.data);\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"bp3-dark\">\n          <AppBar />\n        </div>\n        <div className=\"App bp3-dark\">\n          <ConfigCard data={this.state.configData} />\n          <CurrentStateCard data={this.state.receivedData.currentState} />\n          <UpdateCard data={this.state.receivedData.update} />\n          <ResponseCard data={this.state.receivedData.latestResponse} />\n          <MessageCard data={this.state.sentData} />\n          <Actions\n            config={this.state.configData}\n            setSentData={this.setSentData.bind(this)}\n            ws={this.state.ws}\n          />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}