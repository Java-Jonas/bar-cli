// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package state

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp(in *jlexer.Lexer, out *zoneItemCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ZoneItemID(in.Int())
		case "item":
			out.Item = ItemID(in.Int())
		case "position":
			out.Position = PositionID(in.Int())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "hasParent":
			out.HasParent = bool(in.Bool())
		case "jsonPath":
			out.JSONPath = string(in.String())
		case "path":
			if in.IsNull() {
				in.Skip()
				out.Path = nil
			} else {
				in.Delim('[')
				if out.Path == nil {
					if !in.IsDelim(']') {
						out.Path = make(path, 0, 1)
					} else {
						out.Path = path{}
					}
				} else {
					out.Path = (out.Path)[:0]
				}
				for !in.IsDelim(']') {
					var v1 segment
					(v1).UnmarshalEasyJSON(in)
					out.Path = append(out.Path, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp(out *jwriter.Writer, in zoneItemCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Item != 0 {
		const prefix string = ",\"item\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Item))
	}
	if in.Position != 0 {
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Position))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if in.HasParent {
		const prefix string = ",\"hasParent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasParent))
	}
	if in.JSONPath != "" {
		const prefix string = ",\"jsonPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JSONPath))
	}
	if len(in.Path) != 0 {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Path {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Meta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v zoneItemCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v zoneItemCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *zoneItemCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *zoneItemCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp1(in *jlexer.Lexer, out *zoneItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ZoneItemID(in.Int())
		case "item":
			if in.IsNull() {
				in.Skip()
				out.Item = nil
			} else {
				if out.Item == nil {
					out.Item = new(item)
				}
				(*out.Item).UnmarshalEasyJSON(in)
			}
		case "position":
			if in.IsNull() {
				in.Skip()
				out.Position = nil
			} else {
				if out.Position == nil {
					out.Position = new(position)
				}
				(*out.Position).UnmarshalEasyJSON(in)
			}
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp1(out *jwriter.Writer, in zoneItem) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Item != nil {
		const prefix string = ",\"item\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Item).MarshalEasyJSON(out)
	}
	if in.Position != nil {
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Position).MarshalEasyJSON(out)
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v zoneItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v zoneItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *zoneItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *zoneItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp1(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp2(in *jlexer.Lexer, out *zoneCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ZoneID(in.Int())
		case "interactables":
			if in.IsNull() {
				in.Skip()
				out.Interactables = nil
			} else {
				in.Delim('[')
				if out.Interactables == nil {
					if !in.IsDelim(']') {
						out.Interactables = make([]AnyOfItem_Player_ZoneItemID, 0, 2)
					} else {
						out.Interactables = []AnyOfItem_Player_ZoneItemID{}
					}
				} else {
					out.Interactables = (out.Interactables)[:0]
				}
				for !in.IsDelim(']') {
					var v4 AnyOfItem_Player_ZoneItemID
					if data := in.Raw(); in.Ok() {
						in.AddError((v4).UnmarshalJSON(data))
					}
					out.Interactables = append(out.Interactables, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]ZoneItemID, 0, 8)
					} else {
						out.Items = []ZoneItemID{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v5 ZoneItemID
					v5 = ZoneItemID(in.Int())
					out.Items = append(out.Items, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "players":
			if in.IsNull() {
				in.Skip()
				out.Players = nil
			} else {
				in.Delim('[')
				if out.Players == nil {
					if !in.IsDelim(']') {
						out.Players = make([]PlayerID, 0, 8)
					} else {
						out.Players = []PlayerID{}
					}
				} else {
					out.Players = (out.Players)[:0]
				}
				for !in.IsDelim(']') {
					var v6 PlayerID
					v6 = PlayerID(in.Int())
					out.Players = append(out.Players, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]StringValueID, 0, 8)
					} else {
						out.Tags = []StringValueID{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v7 StringValueID
					v7 = StringValueID(in.Int())
					out.Tags = append(out.Tags, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "hasParent":
			out.HasParent = bool(in.Bool())
		case "jsonPath":
			out.JSONPath = string(in.String())
		case "path":
			if in.IsNull() {
				in.Skip()
				out.Path = nil
			} else {
				in.Delim('[')
				if out.Path == nil {
					if !in.IsDelim(']') {
						out.Path = make(path, 0, 1)
					} else {
						out.Path = path{}
					}
				} else {
					out.Path = (out.Path)[:0]
				}
				for !in.IsDelim(']') {
					var v8 segment
					(v8).UnmarshalEasyJSON(in)
					out.Path = append(out.Path, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp2(out *jwriter.Writer, in zoneCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if len(in.Interactables) != 0 {
		const prefix string = ",\"interactables\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v9, v10 := range in.Interactables {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.Raw((v10).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.Items {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v12))
			}
			out.RawByte(']')
		}
	}
	if len(in.Players) != 0 {
		const prefix string = ",\"players\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v13, v14 := range in.Players {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v14))
			}
			out.RawByte(']')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.Tags {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v16))
			}
			out.RawByte(']')
		}
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if in.HasParent {
		const prefix string = ",\"hasParent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasParent))
	}
	if in.JSONPath != "" {
		const prefix string = ",\"jsonPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JSONPath))
	}
	if len(in.Path) != 0 {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.Path {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Meta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v zoneCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v zoneCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *zoneCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *zoneCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp2(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp3(in *jlexer.Lexer, out *zone) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ZoneID(in.Int())
		case "interactables":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Interactables = make(map[int]interface{})
				} else {
					out.Interactables = nil
				}
				for !in.IsDelim('}') {
					key := int(in.IntStr())
					in.WantColon()
					var v19 interface{}
					if m, ok := v19.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v19.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v19 = in.Interface()
					}
					(out.Interactables)[key] = v19
					in.WantComma()
				}
				in.Delim('}')
			}
		case "items":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Items = make(map[ZoneItemID]zoneItem)
				} else {
					out.Items = nil
				}
				for !in.IsDelim('}') {
					key := ZoneItemID(in.IntStr())
					in.WantColon()
					var v20 zoneItem
					(v20).UnmarshalEasyJSON(in)
					(out.Items)[key] = v20
					in.WantComma()
				}
				in.Delim('}')
			}
		case "players":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Players = make(map[PlayerID]player)
				} else {
					out.Players = nil
				}
				for !in.IsDelim('}') {
					key := PlayerID(in.IntStr())
					in.WantColon()
					var v21 player
					(v21).UnmarshalEasyJSON(in)
					(out.Players)[key] = v21
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v22 string
					v22 = string(in.String())
					out.Tags = append(out.Tags, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp3(out *jwriter.Writer, in zone) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if len(in.Interactables) != 0 {
		const prefix string = ",\"interactables\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v23First := true
			for v23Name, v23Value := range in.Interactables {
				if v23First {
					v23First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v23Name))
				out.RawByte(':')
				if m, ok := v23Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v23Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v23Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v24First := true
			for v24Name, v24Value := range in.Items {
				if v24First {
					v24First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v24Name))
				out.RawByte(':')
				(v24Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Players) != 0 {
		const prefix string = ",\"players\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v25First := true
			for v25Name, v25Value := range in.Players {
				if v25First {
					v25First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v25Name))
				out.RawByte(':')
				(v25Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.Tags {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.String(string(v27))
			}
			out.RawByte(']')
		}
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v zone) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v zone) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *zone) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *zone) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp3(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp4(in *jlexer.Lexer, out *stringValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = StringValueID(in.Int())
		case "value":
			out.Value = string(in.String())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "jsonPath":
			out.JSONPath = string(in.String())
		case "path":
			if in.IsNull() {
				in.Skip()
				out.Path = nil
			} else {
				in.Delim('[')
				if out.Path == nil {
					if !in.IsDelim(']') {
						out.Path = make(path, 0, 1)
					} else {
						out.Path = path{}
					}
				} else {
					out.Path = (out.Path)[:0]
				}
				for !in.IsDelim(']') {
					var v28 segment
					(v28).UnmarshalEasyJSON(in)
					out.Path = append(out.Path, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp4(out *jwriter.Writer, in stringValue) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Value != "" {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if in.JSONPath != "" {
		const prefix string = ",\"jsonPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JSONPath))
	}
	if len(in.Path) != 0 {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v29, v30 := range in.Path {
				if v29 > 0 {
					out.RawByte(',')
				}
				(v30).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Meta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v stringValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v stringValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *stringValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *stringValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp4(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp5(in *jlexer.Lexer, out *segment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "identifier":
			out.Identifier = treeFieldIdentifier(in.Int())
		case "kind":
			out.Kind = ElementKind(in.String())
		case "refID":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.RefID).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp5(out *jwriter.Writer, in segment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Identifier != 0 {
		const prefix string = ",\"identifier\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Identifier))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if true {
		const prefix string = ",\"refID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.RefID).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v segment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v segment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *segment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *segment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp5(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp6(in *jlexer.Lexer, out *positionCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = PositionID(in.Int())
		case "x":
			out.X = FloatValueID(in.Int())
		case "y":
			out.Y = FloatValueID(in.Int())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "hasParent":
			out.HasParent = bool(in.Bool())
		case "jsonPath":
			out.JSONPath = string(in.String())
		case "path":
			if in.IsNull() {
				in.Skip()
				out.Path = nil
			} else {
				in.Delim('[')
				if out.Path == nil {
					if !in.IsDelim(']') {
						out.Path = make(path, 0, 1)
					} else {
						out.Path = path{}
					}
				} else {
					out.Path = (out.Path)[:0]
				}
				for !in.IsDelim(']') {
					var v31 segment
					(v31).UnmarshalEasyJSON(in)
					out.Path = append(out.Path, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp6(out *jwriter.Writer, in positionCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.X != 0 {
		const prefix string = ",\"x\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Y))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if in.HasParent {
		const prefix string = ",\"hasParent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasParent))
	}
	if in.JSONPath != "" {
		const prefix string = ",\"jsonPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JSONPath))
	}
	if len(in.Path) != 0 {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.Path {
				if v32 > 0 {
					out.RawByte(',')
				}
				(v33).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Meta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v positionCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v positionCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *positionCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *positionCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp6(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp7(in *jlexer.Lexer, out *position) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = PositionID(in.Int())
		case "x":
			if in.IsNull() {
				in.Skip()
				out.X = nil
			} else {
				if out.X == nil {
					out.X = new(float64)
				}
				*out.X = float64(in.Float64())
			}
		case "y":
			if in.IsNull() {
				in.Skip()
				out.Y = nil
			} else {
				if out.Y == nil {
					out.Y = new(float64)
				}
				*out.Y = float64(in.Float64())
			}
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp7(out *jwriter.Writer, in position) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.X != nil {
		const prefix string = ",\"x\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(*in.X))
	}
	if in.Y != nil {
		const prefix string = ",\"y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(*in.Y))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v position) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v position) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *position) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *position) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp7(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp8(in *jlexer.Lexer, out *playerTargetedByRefCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "parentID":
			out.ParentID = PlayerID(in.Int())
		case "referencedElementID":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ReferencedElementID).UnmarshalJSON(data))
			}
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "path":
			if in.IsNull() {
				in.Skip()
				out.Path = nil
			} else {
				in.Delim('[')
				if out.Path == nil {
					if !in.IsDelim(']') {
						out.Path = make(path, 0, 1)
					} else {
						out.Path = path{}
					}
				} else {
					out.Path = (out.Path)[:0]
				}
				for !in.IsDelim(']') {
					var v34 segment
					(v34).UnmarshalEasyJSON(in)
					out.Path = append(out.Path, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp8(out *jwriter.Writer, in playerTargetedByRefCore) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.ID).MarshalJSON())
	}
	if in.ParentID != 0 {
		const prefix string = ",\"parentID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ParentID))
	}
	if true {
		const prefix string = ",\"referencedElementID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ReferencedElementID).MarshalJSON())
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if len(in.Path) != 0 {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v35, v36 := range in.Path {
				if v35 > 0 {
					out.RawByte(',')
				}
				(v36).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Meta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v playerTargetedByRefCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v playerTargetedByRefCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *playerTargetedByRefCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *playerTargetedByRefCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp8(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp9(in *jlexer.Lexer, out *playerTargetRefCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "parentID":
			out.ParentID = PlayerID(in.Int())
		case "referencedElementID":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ReferencedElementID).UnmarshalJSON(data))
			}
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "path":
			if in.IsNull() {
				in.Skip()
				out.Path = nil
			} else {
				in.Delim('[')
				if out.Path == nil {
					if !in.IsDelim(']') {
						out.Path = make(path, 0, 1)
					} else {
						out.Path = path{}
					}
				} else {
					out.Path = (out.Path)[:0]
				}
				for !in.IsDelim(']') {
					var v37 segment
					(v37).UnmarshalEasyJSON(in)
					out.Path = append(out.Path, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp9(out *jwriter.Writer, in playerTargetRefCore) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.ID).MarshalJSON())
	}
	if in.ParentID != 0 {
		const prefix string = ",\"parentID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ParentID))
	}
	if true {
		const prefix string = ",\"referencedElementID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ReferencedElementID).MarshalJSON())
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if len(in.Path) != 0 {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v38, v39 := range in.Path {
				if v38 > 0 {
					out.RawByte(',')
				}
				(v39).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Meta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v playerTargetRefCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v playerTargetRefCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *playerTargetRefCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *playerTargetRefCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp9(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp10(in *jlexer.Lexer, out *playerGuildMemberRefCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "parentID":
			out.ParentID = PlayerID(in.Int())
		case "referencedElementID":
			out.ReferencedElementID = PlayerID(in.Int())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "path":
			if in.IsNull() {
				in.Skip()
				out.Path = nil
			} else {
				in.Delim('[')
				if out.Path == nil {
					if !in.IsDelim(']') {
						out.Path = make(path, 0, 1)
					} else {
						out.Path = path{}
					}
				} else {
					out.Path = (out.Path)[:0]
				}
				for !in.IsDelim(']') {
					var v40 segment
					(v40).UnmarshalEasyJSON(in)
					out.Path = append(out.Path, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp10(out *jwriter.Writer, in playerGuildMemberRefCore) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.ID).MarshalJSON())
	}
	if in.ParentID != 0 {
		const prefix string = ",\"parentID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ParentID))
	}
	if in.ReferencedElementID != 0 {
		const prefix string = ",\"referencedElementID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReferencedElementID))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if len(in.Path) != 0 {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v41, v42 := range in.Path {
				if v41 > 0 {
					out.RawByte(',')
				}
				(v42).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Meta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v playerGuildMemberRefCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v playerGuildMemberRefCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *playerGuildMemberRefCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *playerGuildMemberRefCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp10(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp11(in *jlexer.Lexer, out *playerEquipmentSetRefCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "parentID":
			out.ParentID = PlayerID(in.Int())
		case "referencedElementID":
			out.ReferencedElementID = EquipmentSetID(in.Int())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "path":
			if in.IsNull() {
				in.Skip()
				out.Path = nil
			} else {
				in.Delim('[')
				if out.Path == nil {
					if !in.IsDelim(']') {
						out.Path = make(path, 0, 1)
					} else {
						out.Path = path{}
					}
				} else {
					out.Path = (out.Path)[:0]
				}
				for !in.IsDelim(']') {
					var v43 segment
					(v43).UnmarshalEasyJSON(in)
					out.Path = append(out.Path, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp11(out *jwriter.Writer, in playerEquipmentSetRefCore) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.ID).MarshalJSON())
	}
	if in.ParentID != 0 {
		const prefix string = ",\"parentID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ParentID))
	}
	if in.ReferencedElementID != 0 {
		const prefix string = ",\"referencedElementID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReferencedElementID))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if len(in.Path) != 0 {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v44, v45 := range in.Path {
				if v44 > 0 {
					out.RawByte(',')
				}
				(v45).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Meta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v playerEquipmentSetRefCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v playerEquipmentSetRefCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *playerEquipmentSetRefCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *playerEquipmentSetRefCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp11(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp12(in *jlexer.Lexer, out *playerCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = PlayerID(in.Int())
		case "action":
			if in.IsNull() {
				in.Skip()
				out.Action = nil
			} else {
				in.Delim('[')
				if out.Action == nil {
					if !in.IsDelim(']') {
						out.Action = make([]AttackEventID, 0, 8)
					} else {
						out.Action = []AttackEventID{}
					}
				} else {
					out.Action = (out.Action)[:0]
				}
				for !in.IsDelim(']') {
					var v46 AttackEventID
					v46 = AttackEventID(in.Int())
					out.Action = append(out.Action, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "equipmentSets":
			if in.IsNull() {
				in.Skip()
				out.EquipmentSets = nil
			} else {
				in.Delim('[')
				if out.EquipmentSets == nil {
					if !in.IsDelim(']') {
						out.EquipmentSets = make([]PlayerEquipmentSetRefID, 0, 2)
					} else {
						out.EquipmentSets = []PlayerEquipmentSetRefID{}
					}
				} else {
					out.EquipmentSets = (out.EquipmentSets)[:0]
				}
				for !in.IsDelim(']') {
					var v47 PlayerEquipmentSetRefID
					if data := in.Raw(); in.Ok() {
						in.AddError((v47).UnmarshalJSON(data))
					}
					out.EquipmentSets = append(out.EquipmentSets, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "gearScore":
			out.GearScore = GearScoreID(in.Int())
		case "guildMembers":
			if in.IsNull() {
				in.Skip()
				out.GuildMembers = nil
			} else {
				in.Delim('[')
				if out.GuildMembers == nil {
					if !in.IsDelim(']') {
						out.GuildMembers = make([]PlayerGuildMemberRefID, 0, 2)
					} else {
						out.GuildMembers = []PlayerGuildMemberRefID{}
					}
				} else {
					out.GuildMembers = (out.GuildMembers)[:0]
				}
				for !in.IsDelim(']') {
					var v48 PlayerGuildMemberRefID
					if data := in.Raw(); in.Ok() {
						in.AddError((v48).UnmarshalJSON(data))
					}
					out.GuildMembers = append(out.GuildMembers, v48)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]ItemID, 0, 8)
					} else {
						out.Items = []ItemID{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v49 ItemID
					v49 = ItemID(in.Int())
					out.Items = append(out.Items, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "position":
			out.Position = PositionID(in.Int())
		case "target":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Target).UnmarshalJSON(data))
			}
		case "targetedBy":
			if in.IsNull() {
				in.Skip()
				out.TargetedBy = nil
			} else {
				in.Delim('[')
				if out.TargetedBy == nil {
					if !in.IsDelim(']') {
						out.TargetedBy = make([]PlayerTargetedByRefID, 0, 2)
					} else {
						out.TargetedBy = []PlayerTargetedByRefID{}
					}
				} else {
					out.TargetedBy = (out.TargetedBy)[:0]
				}
				for !in.IsDelim(']') {
					var v50 PlayerTargetedByRefID
					if data := in.Raw(); in.Ok() {
						in.AddError((v50).UnmarshalJSON(data))
					}
					out.TargetedBy = append(out.TargetedBy, v50)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "hasParent":
			out.HasParent = bool(in.Bool())
		case "jsonPath":
			out.JSONPath = string(in.String())
		case "path":
			if in.IsNull() {
				in.Skip()
				out.Path = nil
			} else {
				in.Delim('[')
				if out.Path == nil {
					if !in.IsDelim(']') {
						out.Path = make(path, 0, 1)
					} else {
						out.Path = path{}
					}
				} else {
					out.Path = (out.Path)[:0]
				}
				for !in.IsDelim(']') {
					var v51 segment
					(v51).UnmarshalEasyJSON(in)
					out.Path = append(out.Path, v51)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp12(out *jwriter.Writer, in playerCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if len(in.Action) != 0 {
		const prefix string = ",\"action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v52, v53 := range in.Action {
				if v52 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v53))
			}
			out.RawByte(']')
		}
	}
	if len(in.EquipmentSets) != 0 {
		const prefix string = ",\"equipmentSets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v54, v55 := range in.EquipmentSets {
				if v54 > 0 {
					out.RawByte(',')
				}
				out.Raw((v55).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if in.GearScore != 0 {
		const prefix string = ",\"gearScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.GearScore))
	}
	if len(in.GuildMembers) != 0 {
		const prefix string = ",\"guildMembers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v56, v57 := range in.GuildMembers {
				if v56 > 0 {
					out.RawByte(',')
				}
				out.Raw((v57).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v58, v59 := range in.Items {
				if v58 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v59))
			}
			out.RawByte(']')
		}
	}
	if in.Position != 0 {
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Position))
	}
	if true {
		const prefix string = ",\"target\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Target).MarshalJSON())
	}
	if len(in.TargetedBy) != 0 {
		const prefix string = ",\"targetedBy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v60, v61 := range in.TargetedBy {
				if v60 > 0 {
					out.RawByte(',')
				}
				out.Raw((v61).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if in.HasParent {
		const prefix string = ",\"hasParent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasParent))
	}
	if in.JSONPath != "" {
		const prefix string = ",\"jsonPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JSONPath))
	}
	if len(in.Path) != 0 {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v62, v63 := range in.Path {
				if v62 > 0 {
					out.RawByte(',')
				}
				(v63).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Meta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v playerCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v playerCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *playerCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *playerCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp12(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp13(in *jlexer.Lexer, out *player) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = PlayerID(in.Int())
		case "action":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Action = make(map[AttackEventID]attackEvent)
				} else {
					out.Action = nil
				}
				for !in.IsDelim('}') {
					key := AttackEventID(in.IntStr())
					in.WantColon()
					var v64 attackEvent
					(v64).UnmarshalEasyJSON(in)
					(out.Action)[key] = v64
					in.WantComma()
				}
				in.Delim('}')
			}
		case "equipmentSets":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.EquipmentSets = make(map[EquipmentSetID]elementReference)
				} else {
					out.EquipmentSets = nil
				}
				for !in.IsDelim('}') {
					key := EquipmentSetID(in.IntStr())
					in.WantColon()
					var v65 elementReference
					(v65).UnmarshalEasyJSON(in)
					(out.EquipmentSets)[key] = v65
					in.WantComma()
				}
				in.Delim('}')
			}
		case "gearScore":
			if in.IsNull() {
				in.Skip()
				out.GearScore = nil
			} else {
				if out.GearScore == nil {
					out.GearScore = new(gearScore)
				}
				(*out.GearScore).UnmarshalEasyJSON(in)
			}
		case "guildMembers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.GuildMembers = make(map[PlayerID]elementReference)
				} else {
					out.GuildMembers = nil
				}
				for !in.IsDelim('}') {
					key := PlayerID(in.IntStr())
					in.WantColon()
					var v66 elementReference
					(v66).UnmarshalEasyJSON(in)
					(out.GuildMembers)[key] = v66
					in.WantComma()
				}
				in.Delim('}')
			}
		case "items":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Items = make(map[ItemID]item)
				} else {
					out.Items = nil
				}
				for !in.IsDelim('}') {
					key := ItemID(in.IntStr())
					in.WantColon()
					var v67 item
					(v67).UnmarshalEasyJSON(in)
					(out.Items)[key] = v67
					in.WantComma()
				}
				in.Delim('}')
			}
		case "position":
			if in.IsNull() {
				in.Skip()
				out.Position = nil
			} else {
				if out.Position == nil {
					out.Position = new(position)
				}
				(*out.Position).UnmarshalEasyJSON(in)
			}
		case "target":
			if in.IsNull() {
				in.Skip()
				out.Target = nil
			} else {
				if out.Target == nil {
					out.Target = new(elementReference)
				}
				(*out.Target).UnmarshalEasyJSON(in)
			}
		case "targetedBy":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.TargetedBy = make(map[int]elementReference)
				} else {
					out.TargetedBy = nil
				}
				for !in.IsDelim('}') {
					key := int(in.IntStr())
					in.WantColon()
					var v68 elementReference
					(v68).UnmarshalEasyJSON(in)
					(out.TargetedBy)[key] = v68
					in.WantComma()
				}
				in.Delim('}')
			}
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp13(out *jwriter.Writer, in player) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if len(in.Action) != 0 {
		const prefix string = ",\"action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v69First := true
			for v69Name, v69Value := range in.Action {
				if v69First {
					v69First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v69Name))
				out.RawByte(':')
				(v69Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.EquipmentSets) != 0 {
		const prefix string = ",\"equipmentSets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v70First := true
			for v70Name, v70Value := range in.EquipmentSets {
				if v70First {
					v70First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v70Name))
				out.RawByte(':')
				(v70Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if in.GearScore != nil {
		const prefix string = ",\"gearScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.GearScore).MarshalEasyJSON(out)
	}
	if len(in.GuildMembers) != 0 {
		const prefix string = ",\"guildMembers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v71First := true
			for v71Name, v71Value := range in.GuildMembers {
				if v71First {
					v71First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v71Name))
				out.RawByte(':')
				(v71Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v72First := true
			for v72Name, v72Value := range in.Items {
				if v72First {
					v72First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v72Name))
				out.RawByte(':')
				(v72Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if in.Position != nil {
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Position).MarshalEasyJSON(out)
	}
	if in.Target != nil {
		const prefix string = ",\"target\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Target).MarshalEasyJSON(out)
	}
	if len(in.TargetedBy) != 0 {
		const prefix string = ",\"targetedBy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v73First := true
			for v73Name, v73Value := range in.TargetedBy {
				if v73First {
					v73First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v73Name))
				out.RawByte(':')
				(v73Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v player) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v player) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *player) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *player) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp13(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp14(in *jlexer.Lexer, out *metaData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "broadcastedBy":
			out.BroadcastedBy = string(in.String())
		case "touchedByMany":
			out.TouchedByMany = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp14(out *jwriter.Writer, in metaData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BroadcastedBy != "" {
		const prefix string = ",\"broadcastedBy\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.BroadcastedBy))
	}
	if in.TouchedByMany {
		const prefix string = ",\"touchedByMany\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.TouchedByMany))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v metaData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v metaData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *metaData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *metaData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp14(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp15(in *jlexer.Lexer, out *itemCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ItemID(in.Int())
		case "boundTo":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BoundTo).UnmarshalJSON(data))
			}
		case "gearScore":
			out.GearScore = GearScoreID(in.Int())
		case "name":
			out.Name = StringValueID(in.Int())
		case "origin":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Origin).UnmarshalJSON(data))
			}
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "hasParent":
			out.HasParent = bool(in.Bool())
		case "jsonPath":
			out.JSONPath = string(in.String())
		case "path":
			if in.IsNull() {
				in.Skip()
				out.Path = nil
			} else {
				in.Delim('[')
				if out.Path == nil {
					if !in.IsDelim(']') {
						out.Path = make(path, 0, 1)
					} else {
						out.Path = path{}
					}
				} else {
					out.Path = (out.Path)[:0]
				}
				for !in.IsDelim(']') {
					var v74 segment
					(v74).UnmarshalEasyJSON(in)
					out.Path = append(out.Path, v74)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp15(out *jwriter.Writer, in itemCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if true {
		const prefix string = ",\"boundTo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.BoundTo).MarshalJSON())
	}
	if in.GearScore != 0 {
		const prefix string = ",\"gearScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.GearScore))
	}
	if in.Name != 0 {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Name))
	}
	if true {
		const prefix string = ",\"origin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Origin).MarshalJSON())
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if in.HasParent {
		const prefix string = ",\"hasParent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasParent))
	}
	if in.JSONPath != "" {
		const prefix string = ",\"jsonPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JSONPath))
	}
	if len(in.Path) != 0 {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v75, v76 := range in.Path {
				if v75 > 0 {
					out.RawByte(',')
				}
				(v76).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Meta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v itemCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v itemCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *itemCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *itemCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp15(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp16(in *jlexer.Lexer, out *itemBoundToRefCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "parentID":
			out.ParentID = ItemID(in.Int())
		case "referencedElementID":
			out.ReferencedElementID = PlayerID(in.Int())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "path":
			if in.IsNull() {
				in.Skip()
				out.Path = nil
			} else {
				in.Delim('[')
				if out.Path == nil {
					if !in.IsDelim(']') {
						out.Path = make(path, 0, 1)
					} else {
						out.Path = path{}
					}
				} else {
					out.Path = (out.Path)[:0]
				}
				for !in.IsDelim(']') {
					var v77 segment
					(v77).UnmarshalEasyJSON(in)
					out.Path = append(out.Path, v77)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp16(out *jwriter.Writer, in itemBoundToRefCore) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.ID).MarshalJSON())
	}
	if in.ParentID != 0 {
		const prefix string = ",\"parentID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ParentID))
	}
	if in.ReferencedElementID != 0 {
		const prefix string = ",\"referencedElementID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReferencedElementID))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if len(in.Path) != 0 {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v78, v79 := range in.Path {
				if v78 > 0 {
					out.RawByte(',')
				}
				(v79).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Meta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v itemBoundToRefCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v itemBoundToRefCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *itemBoundToRefCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *itemBoundToRefCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp16(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp17(in *jlexer.Lexer, out *item) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ItemID(in.Int())
		case "boundTo":
			if in.IsNull() {
				in.Skip()
				out.BoundTo = nil
			} else {
				if out.BoundTo == nil {
					out.BoundTo = new(elementReference)
				}
				(*out.BoundTo).UnmarshalEasyJSON(in)
			}
		case "gearScore":
			if in.IsNull() {
				in.Skip()
				out.GearScore = nil
			} else {
				if out.GearScore == nil {
					out.GearScore = new(gearScore)
				}
				(*out.GearScore).UnmarshalEasyJSON(in)
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "origin":
			if m, ok := out.Origin.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Origin.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Origin = in.Interface()
			}
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp17(out *jwriter.Writer, in item) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.BoundTo != nil {
		const prefix string = ",\"boundTo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BoundTo).MarshalEasyJSON(out)
	}
	if in.GearScore != nil {
		const prefix string = ",\"gearScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.GearScore).MarshalEasyJSON(out)
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Origin != nil {
		const prefix string = ",\"origin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Origin.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Origin.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Origin))
		}
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v item) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v item) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *item) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *item) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp17(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp18(in *jlexer.Lexer, out *intValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = IntValueID(in.Int())
		case "value":
			out.Value = int64(in.Int64())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "jsonPath":
			out.JSONPath = string(in.String())
		case "path":
			if in.IsNull() {
				in.Skip()
				out.Path = nil
			} else {
				in.Delim('[')
				if out.Path == nil {
					if !in.IsDelim(']') {
						out.Path = make(path, 0, 1)
					} else {
						out.Path = path{}
					}
				} else {
					out.Path = (out.Path)[:0]
				}
				for !in.IsDelim(']') {
					var v80 segment
					(v80).UnmarshalEasyJSON(in)
					out.Path = append(out.Path, v80)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp18(out *jwriter.Writer, in intValue) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Value != 0 {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Value))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if in.JSONPath != "" {
		const prefix string = ",\"jsonPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JSONPath))
	}
	if len(in.Path) != 0 {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v81, v82 := range in.Path {
				if v81 > 0 {
					out.RawByte(',')
				}
				(v82).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Meta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v intValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v intValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *intValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *intValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp18(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp19(in *jlexer.Lexer, out *gearScoreCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = GearScoreID(in.Int())
		case "level":
			out.Level = IntValueID(in.Int())
		case "score":
			out.Score = IntValueID(in.Int())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "hasParent":
			out.HasParent = bool(in.Bool())
		case "jsonPath":
			out.JSONPath = string(in.String())
		case "path":
			if in.IsNull() {
				in.Skip()
				out.Path = nil
			} else {
				in.Delim('[')
				if out.Path == nil {
					if !in.IsDelim(']') {
						out.Path = make(path, 0, 1)
					} else {
						out.Path = path{}
					}
				} else {
					out.Path = (out.Path)[:0]
				}
				for !in.IsDelim(']') {
					var v83 segment
					(v83).UnmarshalEasyJSON(in)
					out.Path = append(out.Path, v83)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp19(out *jwriter.Writer, in gearScoreCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Level != 0 {
		const prefix string = ",\"level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Level))
	}
	if in.Score != 0 {
		const prefix string = ",\"score\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Score))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if in.HasParent {
		const prefix string = ",\"hasParent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasParent))
	}
	if in.JSONPath != "" {
		const prefix string = ",\"jsonPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JSONPath))
	}
	if len(in.Path) != 0 {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v84, v85 := range in.Path {
				if v84 > 0 {
					out.RawByte(',')
				}
				(v85).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Meta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v gearScoreCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v gearScoreCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *gearScoreCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *gearScoreCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp19(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp20(in *jlexer.Lexer, out *gearScore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = GearScoreID(in.Int())
		case "level":
			if in.IsNull() {
				in.Skip()
				out.Level = nil
			} else {
				if out.Level == nil {
					out.Level = new(int64)
				}
				*out.Level = int64(in.Int64())
			}
		case "score":
			if in.IsNull() {
				in.Skip()
				out.Score = nil
			} else {
				if out.Score == nil {
					out.Score = new(int64)
				}
				*out.Score = int64(in.Int64())
			}
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp20(out *jwriter.Writer, in gearScore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Level != nil {
		const prefix string = ",\"level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Level))
	}
	if in.Score != nil {
		const prefix string = ",\"score\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Score))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v gearScore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v gearScore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *gearScore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *gearScore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp20(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp21(in *jlexer.Lexer, out *floatValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = FloatValueID(in.Int())
		case "value":
			out.Value = float64(in.Float64())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "jsonPath":
			out.JSONPath = string(in.String())
		case "path":
			if in.IsNull() {
				in.Skip()
				out.Path = nil
			} else {
				in.Delim('[')
				if out.Path == nil {
					if !in.IsDelim(']') {
						out.Path = make(path, 0, 1)
					} else {
						out.Path = path{}
					}
				} else {
					out.Path = (out.Path)[:0]
				}
				for !in.IsDelim(']') {
					var v86 segment
					(v86).UnmarshalEasyJSON(in)
					out.Path = append(out.Path, v86)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp21(out *jwriter.Writer, in floatValue) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Value != 0 {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Value))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if in.JSONPath != "" {
		const prefix string = ",\"jsonPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JSONPath))
	}
	if len(in.Path) != 0 {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v87, v88 := range in.Path {
				if v87 > 0 {
					out.RawByte(',')
				}
				(v88).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Meta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v floatValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v floatValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *floatValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *floatValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp21(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp22(in *jlexer.Lexer, out *equipmentSetEquipmentRefCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "parentID":
			out.ParentID = EquipmentSetID(in.Int())
		case "referencedElementID":
			out.ReferencedElementID = ItemID(in.Int())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "path":
			if in.IsNull() {
				in.Skip()
				out.Path = nil
			} else {
				in.Delim('[')
				if out.Path == nil {
					if !in.IsDelim(']') {
						out.Path = make(path, 0, 1)
					} else {
						out.Path = path{}
					}
				} else {
					out.Path = (out.Path)[:0]
				}
				for !in.IsDelim(']') {
					var v89 segment
					(v89).UnmarshalEasyJSON(in)
					out.Path = append(out.Path, v89)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp22(out *jwriter.Writer, in equipmentSetEquipmentRefCore) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.ID).MarshalJSON())
	}
	if in.ParentID != 0 {
		const prefix string = ",\"parentID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ParentID))
	}
	if in.ReferencedElementID != 0 {
		const prefix string = ",\"referencedElementID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReferencedElementID))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if len(in.Path) != 0 {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v90, v91 := range in.Path {
				if v90 > 0 {
					out.RawByte(',')
				}
				(v91).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Meta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v equipmentSetEquipmentRefCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v equipmentSetEquipmentRefCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *equipmentSetEquipmentRefCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *equipmentSetEquipmentRefCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp22(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp23(in *jlexer.Lexer, out *equipmentSetCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = EquipmentSetID(in.Int())
		case "equipment":
			if in.IsNull() {
				in.Skip()
				out.Equipment = nil
			} else {
				in.Delim('[')
				if out.Equipment == nil {
					if !in.IsDelim(']') {
						out.Equipment = make([]EquipmentSetEquipmentRefID, 0, 2)
					} else {
						out.Equipment = []EquipmentSetEquipmentRefID{}
					}
				} else {
					out.Equipment = (out.Equipment)[:0]
				}
				for !in.IsDelim(']') {
					var v92 EquipmentSetEquipmentRefID
					if data := in.Raw(); in.Ok() {
						in.AddError((v92).UnmarshalJSON(data))
					}
					out.Equipment = append(out.Equipment, v92)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name = StringValueID(in.Int())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "hasParent":
			out.HasParent = bool(in.Bool())
		case "jsonPath":
			out.JSONPath = string(in.String())
		case "path":
			if in.IsNull() {
				in.Skip()
				out.Path = nil
			} else {
				in.Delim('[')
				if out.Path == nil {
					if !in.IsDelim(']') {
						out.Path = make(path, 0, 1)
					} else {
						out.Path = path{}
					}
				} else {
					out.Path = (out.Path)[:0]
				}
				for !in.IsDelim(']') {
					var v93 segment
					(v93).UnmarshalEasyJSON(in)
					out.Path = append(out.Path, v93)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp23(out *jwriter.Writer, in equipmentSetCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if len(in.Equipment) != 0 {
		const prefix string = ",\"equipment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v94, v95 := range in.Equipment {
				if v94 > 0 {
					out.RawByte(',')
				}
				out.Raw((v95).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if in.Name != 0 {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Name))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if in.HasParent {
		const prefix string = ",\"hasParent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasParent))
	}
	if in.JSONPath != "" {
		const prefix string = ",\"jsonPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JSONPath))
	}
	if len(in.Path) != 0 {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v96, v97 := range in.Path {
				if v96 > 0 {
					out.RawByte(',')
				}
				(v97).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Meta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v equipmentSetCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v equipmentSetCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *equipmentSetCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *equipmentSetCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp23(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp24(in *jlexer.Lexer, out *equipmentSet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = EquipmentSetID(in.Int())
		case "equipment":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Equipment = make(map[ItemID]elementReference)
				} else {
					out.Equipment = nil
				}
				for !in.IsDelim('}') {
					key := ItemID(in.IntStr())
					in.WantColon()
					var v98 elementReference
					(v98).UnmarshalEasyJSON(in)
					(out.Equipment)[key] = v98
					in.WantComma()
				}
				in.Delim('}')
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp24(out *jwriter.Writer, in equipmentSet) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if len(in.Equipment) != 0 {
		const prefix string = ",\"equipment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v99First := true
			for v99Name, v99Value := range in.Equipment {
				if v99First {
					v99First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v99Name))
				out.RawByte(':')
				(v99Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v equipmentSet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v equipmentSet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *equipmentSet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *equipmentSet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp24(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp25(in *jlexer.Lexer, out *elementReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "id":
			out.ElementID = int(in.Int())
		case "elementKind":
			out.ElementKind = ElementKind(in.String())
		case "referencedDataStatus":
			out.ReferencedDataStatus = ReferencedDataStatus(in.String())
		case "elementPath":
			out.ElementPath = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp25(out *jwriter.Writer, in elementReference) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.OperationKind))
	}
	if in.ElementID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ElementID))
	}
	if in.ElementKind != "" {
		const prefix string = ",\"elementKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElementKind))
	}
	if in.ReferencedDataStatus != "" {
		const prefix string = ",\"referencedDataStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReferencedDataStatus))
	}
	if in.ElementPath != "" {
		const prefix string = ",\"elementPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElementPath))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v elementReference) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v elementReference) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *elementReference) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *elementReference) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp25(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp26(in *jlexer.Lexer, out *boolValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = BoolValueID(in.Int())
		case "value":
			out.Value = bool(in.Bool())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "jsonPath":
			out.JSONPath = string(in.String())
		case "path":
			if in.IsNull() {
				in.Skip()
				out.Path = nil
			} else {
				in.Delim('[')
				if out.Path == nil {
					if !in.IsDelim(']') {
						out.Path = make(path, 0, 1)
					} else {
						out.Path = path{}
					}
				} else {
					out.Path = (out.Path)[:0]
				}
				for !in.IsDelim(']') {
					var v100 segment
					(v100).UnmarshalEasyJSON(in)
					out.Path = append(out.Path, v100)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp26(out *jwriter.Writer, in boolValue) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Value {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Value))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if in.JSONPath != "" {
		const prefix string = ",\"jsonPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JSONPath))
	}
	if len(in.Path) != 0 {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v101, v102 := range in.Path {
				if v101 > 0 {
					out.RawByte(',')
				}
				(v102).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Meta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v boolValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v boolValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *boolValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *boolValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp26(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp27(in *jlexer.Lexer, out *attackEventTargetRefCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "parentID":
			out.ParentID = AttackEventID(in.Int())
		case "referencedElementID":
			out.ReferencedElementID = PlayerID(in.Int())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "path":
			if in.IsNull() {
				in.Skip()
				out.Path = nil
			} else {
				in.Delim('[')
				if out.Path == nil {
					if !in.IsDelim(']') {
						out.Path = make(path, 0, 1)
					} else {
						out.Path = path{}
					}
				} else {
					out.Path = (out.Path)[:0]
				}
				for !in.IsDelim(']') {
					var v103 segment
					(v103).UnmarshalEasyJSON(in)
					out.Path = append(out.Path, v103)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp27(out *jwriter.Writer, in attackEventTargetRefCore) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.ID).MarshalJSON())
	}
	if in.ParentID != 0 {
		const prefix string = ",\"parentID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ParentID))
	}
	if in.ReferencedElementID != 0 {
		const prefix string = ",\"referencedElementID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReferencedElementID))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if len(in.Path) != 0 {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v104, v105 := range in.Path {
				if v104 > 0 {
					out.RawByte(',')
				}
				(v105).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Meta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v attackEventTargetRefCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v attackEventTargetRefCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *attackEventTargetRefCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *attackEventTargetRefCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp27(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp28(in *jlexer.Lexer, out *attackEventCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = AttackEventID(in.Int())
		case "target":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Target).UnmarshalJSON(data))
			}
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "hasParent":
			out.HasParent = bool(in.Bool())
		case "jsonPath":
			out.JSONPath = string(in.String())
		case "path":
			if in.IsNull() {
				in.Skip()
				out.Path = nil
			} else {
				in.Delim('[')
				if out.Path == nil {
					if !in.IsDelim(']') {
						out.Path = make(path, 0, 1)
					} else {
						out.Path = path{}
					}
				} else {
					out.Path = (out.Path)[:0]
				}
				for !in.IsDelim(']') {
					var v106 segment
					(v106).UnmarshalEasyJSON(in)
					out.Path = append(out.Path, v106)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp28(out *jwriter.Writer, in attackEventCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if true {
		const prefix string = ",\"target\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Target).MarshalJSON())
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if in.HasParent {
		const prefix string = ",\"hasParent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasParent))
	}
	if in.JSONPath != "" {
		const prefix string = ",\"jsonPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JSONPath))
	}
	if len(in.Path) != 0 {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v107, v108 := range in.Path {
				if v107 > 0 {
					out.RawByte(',')
				}
				(v108).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Meta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v attackEventCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v attackEventCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *attackEventCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *attackEventCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp28(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp29(in *jlexer.Lexer, out *attackEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = AttackEventID(in.Int())
		case "target":
			if in.IsNull() {
				in.Skip()
				out.Target = nil
			} else {
				if out.Target == nil {
					out.Target = new(elementReference)
				}
				(*out.Target).UnmarshalEasyJSON(in)
			}
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp29(out *jwriter.Writer, in attackEvent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Target != nil {
		const prefix string = ",\"target\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Target).MarshalEasyJSON(out)
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v attackEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v attackEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *attackEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *attackEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp29(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp30(in *jlexer.Lexer, out *assemblePlanner) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp30(out *jwriter.Writer, in assemblePlanner) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v assemblePlanner) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v assemblePlanner) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *assemblePlanner) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *assemblePlanner) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp30(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer(in *jlexer.Lexer, out *anyOfPlayer_ZoneItemRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer(out *jwriter.Writer, in anyOfPlayer_ZoneItemRef) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v anyOfPlayer_ZoneItemRef) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v anyOfPlayer_ZoneItemRef) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *anyOfPlayer_ZoneItemRef) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *anyOfPlayer_ZoneItemRef) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer1(in *jlexer.Lexer, out *anyOfPlayer_ZoneItemCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "elementKind":
			out.ElementKind = ElementKind(in.String())
		case "childID":
			out.ChildID = int(in.Int())
		case "parentElementPath":
			if in.IsNull() {
				in.Skip()
				out.ParentElementPath = nil
			} else {
				in.Delim('[')
				if out.ParentElementPath == nil {
					if !in.IsDelim(']') {
						out.ParentElementPath = make(path, 0, 1)
					} else {
						out.ParentElementPath = path{}
					}
				} else {
					out.ParentElementPath = (out.ParentElementPath)[:0]
				}
				for !in.IsDelim(']') {
					var v109 segment
					(v109).UnmarshalEasyJSON(in)
					out.ParentElementPath = append(out.ParentElementPath, v109)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "fieldIdentifier":
			out.FieldIdentifier = treeFieldIdentifier(in.Int())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer1(out *jwriter.Writer, in anyOfPlayer_ZoneItemCore) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.ID).MarshalJSON())
	}
	if in.ElementKind != "" {
		const prefix string = ",\"elementKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElementKind))
	}
	if in.ChildID != 0 {
		const prefix string = ",\"childID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ChildID))
	}
	if len(in.ParentElementPath) != 0 {
		const prefix string = ",\"parentElementPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v110, v111 := range in.ParentElementPath {
				if v110 > 0 {
					out.RawByte(',')
				}
				(v111).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.FieldIdentifier != 0 {
		const prefix string = ",\"fieldIdentifier\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FieldIdentifier))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if true {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Meta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v anyOfPlayer_ZoneItemCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v anyOfPlayer_ZoneItemCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *anyOfPlayer_ZoneItemCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *anyOfPlayer_ZoneItemCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer1(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer2(in *jlexer.Lexer, out *anyOfPlayer_PositionRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer2(out *jwriter.Writer, in anyOfPlayer_PositionRef) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v anyOfPlayer_PositionRef) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v anyOfPlayer_PositionRef) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *anyOfPlayer_PositionRef) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *anyOfPlayer_PositionRef) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer2(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer3(in *jlexer.Lexer, out *anyOfPlayer_PositionCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "elementKind":
			out.ElementKind = ElementKind(in.String())
		case "childID":
			out.ChildID = int(in.Int())
		case "parentElementPath":
			if in.IsNull() {
				in.Skip()
				out.ParentElementPath = nil
			} else {
				in.Delim('[')
				if out.ParentElementPath == nil {
					if !in.IsDelim(']') {
						out.ParentElementPath = make(path, 0, 1)
					} else {
						out.ParentElementPath = path{}
					}
				} else {
					out.ParentElementPath = (out.ParentElementPath)[:0]
				}
				for !in.IsDelim(']') {
					var v112 segment
					(v112).UnmarshalEasyJSON(in)
					out.ParentElementPath = append(out.ParentElementPath, v112)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "fieldIdentifier":
			out.FieldIdentifier = treeFieldIdentifier(in.Int())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer3(out *jwriter.Writer, in anyOfPlayer_PositionCore) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.ID).MarshalJSON())
	}
	if in.ElementKind != "" {
		const prefix string = ",\"elementKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElementKind))
	}
	if in.ChildID != 0 {
		const prefix string = ",\"childID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ChildID))
	}
	if len(in.ParentElementPath) != 0 {
		const prefix string = ",\"parentElementPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v113, v114 := range in.ParentElementPath {
				if v113 > 0 {
					out.RawByte(',')
				}
				(v114).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.FieldIdentifier != 0 {
		const prefix string = ",\"fieldIdentifier\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FieldIdentifier))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if true {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Meta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v anyOfPlayer_PositionCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v anyOfPlayer_PositionCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *anyOfPlayer_PositionCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *anyOfPlayer_PositionCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer3(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfItemPlayer(in *jlexer.Lexer, out *anyOfItem_Player_ZoneItemRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfItemPlayer(out *jwriter.Writer, in anyOfItem_Player_ZoneItemRef) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v anyOfItem_Player_ZoneItemRef) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfItemPlayer(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v anyOfItem_Player_ZoneItemRef) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfItemPlayer(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *anyOfItem_Player_ZoneItemRef) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfItemPlayer(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *anyOfItem_Player_ZoneItemRef) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfItemPlayer(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfItemPlayer1(in *jlexer.Lexer, out *anyOfItem_Player_ZoneItemCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "elementKind":
			out.ElementKind = ElementKind(in.String())
		case "childID":
			out.ChildID = int(in.Int())
		case "parentElementPath":
			if in.IsNull() {
				in.Skip()
				out.ParentElementPath = nil
			} else {
				in.Delim('[')
				if out.ParentElementPath == nil {
					if !in.IsDelim(']') {
						out.ParentElementPath = make(path, 0, 1)
					} else {
						out.ParentElementPath = path{}
					}
				} else {
					out.ParentElementPath = (out.ParentElementPath)[:0]
				}
				for !in.IsDelim(']') {
					var v115 segment
					(v115).UnmarshalEasyJSON(in)
					out.ParentElementPath = append(out.ParentElementPath, v115)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "fieldIdentifier":
			out.FieldIdentifier = treeFieldIdentifier(in.Int())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfItemPlayer1(out *jwriter.Writer, in anyOfItem_Player_ZoneItemCore) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.ID).MarshalJSON())
	}
	if in.ElementKind != "" {
		const prefix string = ",\"elementKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElementKind))
	}
	if in.ChildID != 0 {
		const prefix string = ",\"childID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ChildID))
	}
	if len(in.ParentElementPath) != 0 {
		const prefix string = ",\"parentElementPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v116, v117 := range in.ParentElementPath {
				if v116 > 0 {
					out.RawByte(',')
				}
				(v117).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.FieldIdentifier != 0 {
		const prefix string = ",\"fieldIdentifier\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FieldIdentifier))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if true {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Meta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v anyOfItem_Player_ZoneItemCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfItemPlayer1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v anyOfItem_Player_ZoneItemCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfItemPlayer1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *anyOfItem_Player_ZoneItemCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfItemPlayer1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *anyOfItem_Player_ZoneItemCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfItemPlayer1(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp31(in *jlexer.Lexer, out *ZoneItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp31(out *jwriter.Writer, in ZoneItem) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ZoneItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ZoneItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ZoneItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ZoneItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp31(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp32(in *jlexer.Lexer, out *Zone) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp32(out *jwriter.Writer, in Zone) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Zone) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Zone) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Zone) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Zone) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp32(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp33(in *jlexer.Lexer, out *Tree) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "attackEvent":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.AttackEvent = make(map[AttackEventID]attackEvent)
				} else {
					out.AttackEvent = nil
				}
				for !in.IsDelim('}') {
					key := AttackEventID(in.IntStr())
					in.WantColon()
					var v118 attackEvent
					(v118).UnmarshalEasyJSON(in)
					(out.AttackEvent)[key] = v118
					in.WantComma()
				}
				in.Delim('}')
			}
		case "equipmentSet":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.EquipmentSet = make(map[EquipmentSetID]equipmentSet)
				} else {
					out.EquipmentSet = nil
				}
				for !in.IsDelim('}') {
					key := EquipmentSetID(in.IntStr())
					in.WantColon()
					var v119 equipmentSet
					(v119).UnmarshalEasyJSON(in)
					(out.EquipmentSet)[key] = v119
					in.WantComma()
				}
				in.Delim('}')
			}
		case "gearScore":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.GearScore = make(map[GearScoreID]gearScore)
				} else {
					out.GearScore = nil
				}
				for !in.IsDelim('}') {
					key := GearScoreID(in.IntStr())
					in.WantColon()
					var v120 gearScore
					(v120).UnmarshalEasyJSON(in)
					(out.GearScore)[key] = v120
					in.WantComma()
				}
				in.Delim('}')
			}
		case "item":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Item = make(map[ItemID]item)
				} else {
					out.Item = nil
				}
				for !in.IsDelim('}') {
					key := ItemID(in.IntStr())
					in.WantColon()
					var v121 item
					(v121).UnmarshalEasyJSON(in)
					(out.Item)[key] = v121
					in.WantComma()
				}
				in.Delim('}')
			}
		case "player":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Player = make(map[PlayerID]player)
				} else {
					out.Player = nil
				}
				for !in.IsDelim('}') {
					key := PlayerID(in.IntStr())
					in.WantColon()
					var v122 player
					(v122).UnmarshalEasyJSON(in)
					(out.Player)[key] = v122
					in.WantComma()
				}
				in.Delim('}')
			}
		case "position":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Position = make(map[PositionID]position)
				} else {
					out.Position = nil
				}
				for !in.IsDelim('}') {
					key := PositionID(in.IntStr())
					in.WantColon()
					var v123 position
					(v123).UnmarshalEasyJSON(in)
					(out.Position)[key] = v123
					in.WantComma()
				}
				in.Delim('}')
			}
		case "zone":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Zone = make(map[ZoneID]zone)
				} else {
					out.Zone = nil
				}
				for !in.IsDelim('}') {
					key := ZoneID(in.IntStr())
					in.WantColon()
					var v124 zone
					(v124).UnmarshalEasyJSON(in)
					(out.Zone)[key] = v124
					in.WantComma()
				}
				in.Delim('}')
			}
		case "zoneItem":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ZoneItem = make(map[ZoneItemID]zoneItem)
				} else {
					out.ZoneItem = nil
				}
				for !in.IsDelim('}') {
					key := ZoneItemID(in.IntStr())
					in.WantColon()
					var v125 zoneItem
					(v125).UnmarshalEasyJSON(in)
					(out.ZoneItem)[key] = v125
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp33(out *jwriter.Writer, in Tree) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.AttackEvent) != 0 {
		const prefix string = ",\"attackEvent\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v126First := true
			for v126Name, v126Value := range in.AttackEvent {
				if v126First {
					v126First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v126Name))
				out.RawByte(':')
				(v126Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.EquipmentSet) != 0 {
		const prefix string = ",\"equipmentSet\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v127First := true
			for v127Name, v127Value := range in.EquipmentSet {
				if v127First {
					v127First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v127Name))
				out.RawByte(':')
				(v127Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.GearScore) != 0 {
		const prefix string = ",\"gearScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v128First := true
			for v128Name, v128Value := range in.GearScore {
				if v128First {
					v128First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v128Name))
				out.RawByte(':')
				(v128Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Item) != 0 {
		const prefix string = ",\"item\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v129First := true
			for v129Name, v129Value := range in.Item {
				if v129First {
					v129First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v129Name))
				out.RawByte(':')
				(v129Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Player) != 0 {
		const prefix string = ",\"player\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v130First := true
			for v130Name, v130Value := range in.Player {
				if v130First {
					v130First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v130Name))
				out.RawByte(':')
				(v130Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Position) != 0 {
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v131First := true
			for v131Name, v131Value := range in.Position {
				if v131First {
					v131First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v131Name))
				out.RawByte(':')
				(v131Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Zone) != 0 {
		const prefix string = ",\"zone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v132First := true
			for v132Name, v132Value := range in.Zone {
				if v132First {
					v132First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v132Name))
				out.RawByte(':')
				(v132Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.ZoneItem) != 0 {
		const prefix string = ",\"zoneItem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v133First := true
			for v133Name, v133Value := range in.ZoneItem {
				if v133First {
					v133First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v133Name))
				out.RawByte(':')
				(v133Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tree) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tree) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tree) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tree) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp33(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp34(in *jlexer.Lexer, out *State) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "boolValue":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.BoolValue = make(map[BoolValueID]boolValue)
				} else {
					out.BoolValue = nil
				}
				for !in.IsDelim('}') {
					key := BoolValueID(in.IntStr())
					in.WantColon()
					var v134 boolValue
					(v134).UnmarshalEasyJSON(in)
					(out.BoolValue)[key] = v134
					in.WantComma()
				}
				in.Delim('}')
			}
		case "floatValue":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.FloatValue = make(map[FloatValueID]floatValue)
				} else {
					out.FloatValue = nil
				}
				for !in.IsDelim('}') {
					key := FloatValueID(in.IntStr())
					in.WantColon()
					var v135 floatValue
					(v135).UnmarshalEasyJSON(in)
					(out.FloatValue)[key] = v135
					in.WantComma()
				}
				in.Delim('}')
			}
		case "intValue":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.IntValue = make(map[IntValueID]intValue)
				} else {
					out.IntValue = nil
				}
				for !in.IsDelim('}') {
					key := IntValueID(in.IntStr())
					in.WantColon()
					var v136 intValue
					(v136).UnmarshalEasyJSON(in)
					(out.IntValue)[key] = v136
					in.WantComma()
				}
				in.Delim('}')
			}
		case "stringValue":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.StringValue = make(map[StringValueID]stringValue)
				} else {
					out.StringValue = nil
				}
				for !in.IsDelim('}') {
					key := StringValueID(in.IntStr())
					in.WantColon()
					var v137 stringValue
					(v137).UnmarshalEasyJSON(in)
					(out.StringValue)[key] = v137
					in.WantComma()
				}
				in.Delim('}')
			}
		case "attackEvent":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.AttackEvent = make(map[AttackEventID]attackEventCore)
				} else {
					out.AttackEvent = nil
				}
				for !in.IsDelim('}') {
					key := AttackEventID(in.IntStr())
					in.WantColon()
					var v138 attackEventCore
					(v138).UnmarshalEasyJSON(in)
					(out.AttackEvent)[key] = v138
					in.WantComma()
				}
				in.Delim('}')
			}
		case "equipmentSet":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.EquipmentSet = make(map[EquipmentSetID]equipmentSetCore)
				} else {
					out.EquipmentSet = nil
				}
				for !in.IsDelim('}') {
					key := EquipmentSetID(in.IntStr())
					in.WantColon()
					var v139 equipmentSetCore
					(v139).UnmarshalEasyJSON(in)
					(out.EquipmentSet)[key] = v139
					in.WantComma()
				}
				in.Delim('}')
			}
		case "gearScore":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.GearScore = make(map[GearScoreID]gearScoreCore)
				} else {
					out.GearScore = nil
				}
				for !in.IsDelim('}') {
					key := GearScoreID(in.IntStr())
					in.WantColon()
					var v140 gearScoreCore
					(v140).UnmarshalEasyJSON(in)
					(out.GearScore)[key] = v140
					in.WantComma()
				}
				in.Delim('}')
			}
		case "item":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Item = make(map[ItemID]itemCore)
				} else {
					out.Item = nil
				}
				for !in.IsDelim('}') {
					key := ItemID(in.IntStr())
					in.WantColon()
					var v141 itemCore
					(v141).UnmarshalEasyJSON(in)
					(out.Item)[key] = v141
					in.WantComma()
				}
				in.Delim('}')
			}
		case "player":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Player = make(map[PlayerID]playerCore)
				} else {
					out.Player = nil
				}
				for !in.IsDelim('}') {
					key := PlayerID(in.IntStr())
					in.WantColon()
					var v142 playerCore
					(v142).UnmarshalEasyJSON(in)
					(out.Player)[key] = v142
					in.WantComma()
				}
				in.Delim('}')
			}
		case "position":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Position = make(map[PositionID]positionCore)
				} else {
					out.Position = nil
				}
				for !in.IsDelim('}') {
					key := PositionID(in.IntStr())
					in.WantColon()
					var v143 positionCore
					(v143).UnmarshalEasyJSON(in)
					(out.Position)[key] = v143
					in.WantComma()
				}
				in.Delim('}')
			}
		case "zone":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Zone = make(map[ZoneID]zoneCore)
				} else {
					out.Zone = nil
				}
				for !in.IsDelim('}') {
					key := ZoneID(in.IntStr())
					in.WantColon()
					var v144 zoneCore
					(v144).UnmarshalEasyJSON(in)
					(out.Zone)[key] = v144
					in.WantComma()
				}
				in.Delim('}')
			}
		case "zoneItem":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ZoneItem = make(map[ZoneItemID]zoneItemCore)
				} else {
					out.ZoneItem = nil
				}
				for !in.IsDelim('}') {
					key := ZoneItemID(in.IntStr())
					in.WantColon()
					var v145 zoneItemCore
					(v145).UnmarshalEasyJSON(in)
					(out.ZoneItem)[key] = v145
					in.WantComma()
				}
				in.Delim('}')
			}
		case "attackEventTargetRef":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.AttackEventTargetRef = make(map[AttackEventTargetRefID]attackEventTargetRefCore)
				} else {
					out.AttackEventTargetRef = nil
				}
				for !in.IsDelim('}') {
					var key AttackEventTargetRefID
					if data := in.Raw(); in.Ok() {
						in.AddError((key).UnmarshalJSON(data))
					}
					in.WantColon()
					var v146 attackEventTargetRefCore
					(v146).UnmarshalEasyJSON(in)
					(out.AttackEventTargetRef)[key] = v146
					in.WantComma()
				}
				in.Delim('}')
			}
		case "equipmentSetEquipmentRef":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.EquipmentSetEquipmentRef = make(map[EquipmentSetEquipmentRefID]equipmentSetEquipmentRefCore)
				} else {
					out.EquipmentSetEquipmentRef = nil
				}
				for !in.IsDelim('}') {
					var key EquipmentSetEquipmentRefID
					if data := in.Raw(); in.Ok() {
						in.AddError((key).UnmarshalJSON(data))
					}
					in.WantColon()
					var v147 equipmentSetEquipmentRefCore
					(v147).UnmarshalEasyJSON(in)
					(out.EquipmentSetEquipmentRef)[key] = v147
					in.WantComma()
				}
				in.Delim('}')
			}
		case "itemBoundToRef":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ItemBoundToRef = make(map[ItemBoundToRefID]itemBoundToRefCore)
				} else {
					out.ItemBoundToRef = nil
				}
				for !in.IsDelim('}') {
					var key ItemBoundToRefID
					if data := in.Raw(); in.Ok() {
						in.AddError((key).UnmarshalJSON(data))
					}
					in.WantColon()
					var v148 itemBoundToRefCore
					(v148).UnmarshalEasyJSON(in)
					(out.ItemBoundToRef)[key] = v148
					in.WantComma()
				}
				in.Delim('}')
			}
		case "playerEquipmentSetRef":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.PlayerEquipmentSetRef = make(map[PlayerEquipmentSetRefID]playerEquipmentSetRefCore)
				} else {
					out.PlayerEquipmentSetRef = nil
				}
				for !in.IsDelim('}') {
					var key PlayerEquipmentSetRefID
					if data := in.Raw(); in.Ok() {
						in.AddError((key).UnmarshalJSON(data))
					}
					in.WantColon()
					var v149 playerEquipmentSetRefCore
					(v149).UnmarshalEasyJSON(in)
					(out.PlayerEquipmentSetRef)[key] = v149
					in.WantComma()
				}
				in.Delim('}')
			}
		case "playerGuildMemberRef":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.PlayerGuildMemberRef = make(map[PlayerGuildMemberRefID]playerGuildMemberRefCore)
				} else {
					out.PlayerGuildMemberRef = nil
				}
				for !in.IsDelim('}') {
					var key PlayerGuildMemberRefID
					if data := in.Raw(); in.Ok() {
						in.AddError((key).UnmarshalJSON(data))
					}
					in.WantColon()
					var v150 playerGuildMemberRefCore
					(v150).UnmarshalEasyJSON(in)
					(out.PlayerGuildMemberRef)[key] = v150
					in.WantComma()
				}
				in.Delim('}')
			}
		case "playerTargetRef":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.PlayerTargetRef = make(map[PlayerTargetRefID]playerTargetRefCore)
				} else {
					out.PlayerTargetRef = nil
				}
				for !in.IsDelim('}') {
					var key PlayerTargetRefID
					if data := in.Raw(); in.Ok() {
						in.AddError((key).UnmarshalJSON(data))
					}
					in.WantColon()
					var v151 playerTargetRefCore
					(v151).UnmarshalEasyJSON(in)
					(out.PlayerTargetRef)[key] = v151
					in.WantComma()
				}
				in.Delim('}')
			}
		case "playerTargetedByRef":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.PlayerTargetedByRef = make(map[PlayerTargetedByRefID]playerTargetedByRefCore)
				} else {
					out.PlayerTargetedByRef = nil
				}
				for !in.IsDelim('}') {
					var key PlayerTargetedByRefID
					if data := in.Raw(); in.Ok() {
						in.AddError((key).UnmarshalJSON(data))
					}
					in.WantColon()
					var v152 playerTargetedByRefCore
					(v152).UnmarshalEasyJSON(in)
					(out.PlayerTargetedByRef)[key] = v152
					in.WantComma()
				}
				in.Delim('}')
			}
		case "anyOfPlayer_Position":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.AnyOfPlayer_Position = make(map[AnyOfPlayer_PositionID]anyOfPlayer_PositionCore)
				} else {
					out.AnyOfPlayer_Position = nil
				}
				for !in.IsDelim('}') {
					var key AnyOfPlayer_PositionID
					if data := in.Raw(); in.Ok() {
						in.AddError((key).UnmarshalJSON(data))
					}
					in.WantColon()
					var v153 anyOfPlayer_PositionCore
					(v153).UnmarshalEasyJSON(in)
					(out.AnyOfPlayer_Position)[key] = v153
					in.WantComma()
				}
				in.Delim('}')
			}
		case "anyOfPlayer_ZoneItem":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.AnyOfPlayer_ZoneItem = make(map[AnyOfPlayer_ZoneItemID]anyOfPlayer_ZoneItemCore)
				} else {
					out.AnyOfPlayer_ZoneItem = nil
				}
				for !in.IsDelim('}') {
					var key AnyOfPlayer_ZoneItemID
					if data := in.Raw(); in.Ok() {
						in.AddError((key).UnmarshalJSON(data))
					}
					in.WantColon()
					var v154 anyOfPlayer_ZoneItemCore
					(v154).UnmarshalEasyJSON(in)
					(out.AnyOfPlayer_ZoneItem)[key] = v154
					in.WantComma()
				}
				in.Delim('}')
			}
		case "anyOfItem_Player_ZoneItem":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.AnyOfItem_Player_ZoneItem = make(map[AnyOfItem_Player_ZoneItemID]anyOfItem_Player_ZoneItemCore)
				} else {
					out.AnyOfItem_Player_ZoneItem = nil
				}
				for !in.IsDelim('}') {
					var key AnyOfItem_Player_ZoneItemID
					if data := in.Raw(); in.Ok() {
						in.AddError((key).UnmarshalJSON(data))
					}
					in.WantColon()
					var v155 anyOfItem_Player_ZoneItemCore
					(v155).UnmarshalEasyJSON(in)
					(out.AnyOfItem_Player_ZoneItem)[key] = v155
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp34(out *jwriter.Writer, in State) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.BoolValue) != 0 {
		const prefix string = ",\"boolValue\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v156First := true
			for v156Name, v156Value := range in.BoolValue {
				if v156First {
					v156First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v156Name))
				out.RawByte(':')
				(v156Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.FloatValue) != 0 {
		const prefix string = ",\"floatValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v157First := true
			for v157Name, v157Value := range in.FloatValue {
				if v157First {
					v157First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v157Name))
				out.RawByte(':')
				(v157Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.IntValue) != 0 {
		const prefix string = ",\"intValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v158First := true
			for v158Name, v158Value := range in.IntValue {
				if v158First {
					v158First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v158Name))
				out.RawByte(':')
				(v158Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.StringValue) != 0 {
		const prefix string = ",\"stringValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v159First := true
			for v159Name, v159Value := range in.StringValue {
				if v159First {
					v159First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v159Name))
				out.RawByte(':')
				(v159Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.AttackEvent) != 0 {
		const prefix string = ",\"attackEvent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v160First := true
			for v160Name, v160Value := range in.AttackEvent {
				if v160First {
					v160First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v160Name))
				out.RawByte(':')
				(v160Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.EquipmentSet) != 0 {
		const prefix string = ",\"equipmentSet\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v161First := true
			for v161Name, v161Value := range in.EquipmentSet {
				if v161First {
					v161First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v161Name))
				out.RawByte(':')
				(v161Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.GearScore) != 0 {
		const prefix string = ",\"gearScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v162First := true
			for v162Name, v162Value := range in.GearScore {
				if v162First {
					v162First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v162Name))
				out.RawByte(':')
				(v162Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Item) != 0 {
		const prefix string = ",\"item\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v163First := true
			for v163Name, v163Value := range in.Item {
				if v163First {
					v163First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v163Name))
				out.RawByte(':')
				(v163Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Player) != 0 {
		const prefix string = ",\"player\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v164First := true
			for v164Name, v164Value := range in.Player {
				if v164First {
					v164First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v164Name))
				out.RawByte(':')
				(v164Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Position) != 0 {
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v165First := true
			for v165Name, v165Value := range in.Position {
				if v165First {
					v165First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v165Name))
				out.RawByte(':')
				(v165Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Zone) != 0 {
		const prefix string = ",\"zone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v166First := true
			for v166Name, v166Value := range in.Zone {
				if v166First {
					v166First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v166Name))
				out.RawByte(':')
				(v166Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.ZoneItem) != 0 {
		const prefix string = ",\"zoneItem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v167First := true
			for v167Name, v167Value := range in.ZoneItem {
				if v167First {
					v167First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v167Name))
				out.RawByte(':')
				(v167Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.AttackEventTargetRef) != 0 {
		const prefix string = ",\"attackEventTargetRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v168First := true
			for v168Name, v168Value := range in.AttackEventTargetRef {
				if v168First {
					v168First = false
				} else {
					out.RawByte(',')
				}
				out.Raw((v168Name).MarshalJSON())
				out.RawByte(':')
				(v168Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.EquipmentSetEquipmentRef) != 0 {
		const prefix string = ",\"equipmentSetEquipmentRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v169First := true
			for v169Name, v169Value := range in.EquipmentSetEquipmentRef {
				if v169First {
					v169First = false
				} else {
					out.RawByte(',')
				}
				out.Raw((v169Name).MarshalJSON())
				out.RawByte(':')
				(v169Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.ItemBoundToRef) != 0 {
		const prefix string = ",\"itemBoundToRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v170First := true
			for v170Name, v170Value := range in.ItemBoundToRef {
				if v170First {
					v170First = false
				} else {
					out.RawByte(',')
				}
				out.Raw((v170Name).MarshalJSON())
				out.RawByte(':')
				(v170Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.PlayerEquipmentSetRef) != 0 {
		const prefix string = ",\"playerEquipmentSetRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v171First := true
			for v171Name, v171Value := range in.PlayerEquipmentSetRef {
				if v171First {
					v171First = false
				} else {
					out.RawByte(',')
				}
				out.Raw((v171Name).MarshalJSON())
				out.RawByte(':')
				(v171Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.PlayerGuildMemberRef) != 0 {
		const prefix string = ",\"playerGuildMemberRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v172First := true
			for v172Name, v172Value := range in.PlayerGuildMemberRef {
				if v172First {
					v172First = false
				} else {
					out.RawByte(',')
				}
				out.Raw((v172Name).MarshalJSON())
				out.RawByte(':')
				(v172Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.PlayerTargetRef) != 0 {
		const prefix string = ",\"playerTargetRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v173First := true
			for v173Name, v173Value := range in.PlayerTargetRef {
				if v173First {
					v173First = false
				} else {
					out.RawByte(',')
				}
				out.Raw((v173Name).MarshalJSON())
				out.RawByte(':')
				(v173Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.PlayerTargetedByRef) != 0 {
		const prefix string = ",\"playerTargetedByRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v174First := true
			for v174Name, v174Value := range in.PlayerTargetedByRef {
				if v174First {
					v174First = false
				} else {
					out.RawByte(',')
				}
				out.Raw((v174Name).MarshalJSON())
				out.RawByte(':')
				(v174Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.AnyOfPlayer_Position) != 0 {
		const prefix string = ",\"anyOfPlayer_Position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v175First := true
			for v175Name, v175Value := range in.AnyOfPlayer_Position {
				if v175First {
					v175First = false
				} else {
					out.RawByte(',')
				}
				out.Raw((v175Name).MarshalJSON())
				out.RawByte(':')
				(v175Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.AnyOfPlayer_ZoneItem) != 0 {
		const prefix string = ",\"anyOfPlayer_ZoneItem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v176First := true
			for v176Name, v176Value := range in.AnyOfPlayer_ZoneItem {
				if v176First {
					v176First = false
				} else {
					out.RawByte(',')
				}
				out.Raw((v176Name).MarshalJSON())
				out.RawByte(':')
				(v176Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.AnyOfItem_Player_ZoneItem) != 0 {
		const prefix string = ",\"anyOfItem_Player_ZoneItem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v177First := true
			for v177Name, v177Value := range in.AnyOfItem_Player_ZoneItem {
				if v177First {
					v177First = false
				} else {
					out.RawByte(',')
				}
				out.Raw((v177Name).MarshalJSON())
				out.RawByte(':')
				(v177Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v State) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v State) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *State) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *State) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp34(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp35(in *jlexer.Lexer, out *Position) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp35(out *jwriter.Writer, in Position) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Position) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Position) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Position) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Position) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp35(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp36(in *jlexer.Lexer, out *PlayerTargetedByRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp36(out *jwriter.Writer, in PlayerTargetedByRef) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlayerTargetedByRef) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlayerTargetedByRef) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlayerTargetedByRef) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlayerTargetedByRef) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp36(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp37(in *jlexer.Lexer, out *PlayerTargetRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp37(out *jwriter.Writer, in PlayerTargetRef) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlayerTargetRef) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlayerTargetRef) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlayerTargetRef) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlayerTargetRef) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp37(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp38(in *jlexer.Lexer, out *PlayerGuildMemberRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp38(out *jwriter.Writer, in PlayerGuildMemberRef) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlayerGuildMemberRef) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlayerGuildMemberRef) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlayerGuildMemberRef) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlayerGuildMemberRef) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp38(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp39(in *jlexer.Lexer, out *PlayerEquipmentSetRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp39(out *jwriter.Writer, in PlayerEquipmentSetRef) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlayerEquipmentSetRef) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlayerEquipmentSetRef) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlayerEquipmentSetRef) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlayerEquipmentSetRef) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp39(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp40(in *jlexer.Lexer, out *Player) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp40(out *jwriter.Writer, in Player) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Player) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Player) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Player) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Player) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp40(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp41(in *jlexer.Lexer, out *ItemBoundToRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp41(out *jwriter.Writer, in ItemBoundToRef) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ItemBoundToRef) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ItemBoundToRef) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ItemBoundToRef) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ItemBoundToRef) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp41(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp42(in *jlexer.Lexer, out *Item) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp42(out *jwriter.Writer, in Item) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Item) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Item) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Item) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Item) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp42(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp43(in *jlexer.Lexer, out *GearScore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp43(out *jwriter.Writer, in GearScore) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GearScore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GearScore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GearScore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GearScore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp43(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp44(in *jlexer.Lexer, out *EquipmentSetEquipmentRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp44(out *jwriter.Writer, in EquipmentSetEquipmentRef) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EquipmentSetEquipmentRef) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EquipmentSetEquipmentRef) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EquipmentSetEquipmentRef) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EquipmentSetEquipmentRef) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp44(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp45(in *jlexer.Lexer, out *EquipmentSet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp45(out *jwriter.Writer, in EquipmentSet) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EquipmentSet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EquipmentSet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EquipmentSet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EquipmentSet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp45(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp46(in *jlexer.Lexer, out *Engine) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "State":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(State)
				}
				(*out.State).UnmarshalEasyJSON(in)
			}
		case "Patch":
			if in.IsNull() {
				in.Skip()
				out.Patch = nil
			} else {
				if out.Patch == nil {
					out.Patch = new(State)
				}
				(*out.Patch).UnmarshalEasyJSON(in)
			}
		case "Tree":
			if in.IsNull() {
				in.Skip()
				out.Tree = nil
			} else {
				if out.Tree == nil {
					out.Tree = new(Tree)
				}
				(*out.Tree).UnmarshalEasyJSON(in)
			}
		case "IDgen":
			out.IDgen = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp46(out *jwriter.Writer, in Engine) {
	out.RawByte('{')
	first := true
	_ = first
	if in.State != nil {
		const prefix string = ",\"State\":"
		first = false
		out.RawString(prefix[1:])
		(*in.State).MarshalEasyJSON(out)
	}
	if in.Patch != nil {
		const prefix string = ",\"Patch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Patch).MarshalEasyJSON(out)
	}
	if in.Tree != nil {
		const prefix string = ",\"Tree\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Tree).MarshalEasyJSON(out)
	}
	if in.IDgen != 0 {
		const prefix string = ",\"IDgen\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.IDgen))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Engine) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Engine) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Engine) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Engine) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp46(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp47(in *jlexer.Lexer, out *AttackEventTargetRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp47(out *jwriter.Writer, in AttackEventTargetRef) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AttackEventTargetRef) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AttackEventTargetRef) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AttackEventTargetRef) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AttackEventTargetRef) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp47(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp48(in *jlexer.Lexer, out *AttackEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp48(out *jwriter.Writer, in AttackEvent) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AttackEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AttackEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmp48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AttackEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AttackEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmp48(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer4(in *jlexer.Lexer, out *AnyOfPlayer_ZoneItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer4(out *jwriter.Writer, in AnyOfPlayer_ZoneItem) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AnyOfPlayer_ZoneItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AnyOfPlayer_ZoneItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AnyOfPlayer_ZoneItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AnyOfPlayer_ZoneItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer4(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer5(in *jlexer.Lexer, out *AnyOfPlayer_Position) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer5(out *jwriter.Writer, in AnyOfPlayer_Position) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AnyOfPlayer_Position) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AnyOfPlayer_Position) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AnyOfPlayer_Position) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AnyOfPlayer_Position) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfPlayer5(l, v)
}
func easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfItemPlayer2(in *jlexer.Lexer, out *AnyOfItem_Player_ZoneItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfItemPlayer2(out *jwriter.Writer, in AnyOfItem_Player_ZoneItem) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AnyOfItem_Player_ZoneItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfItemPlayer2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AnyOfItem_Player_ZoneItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson782a7342EncodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfItemPlayer2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AnyOfItem_Player_ZoneItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfItemPlayer2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AnyOfItem_Player_ZoneItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson782a7342DecodeGithubComJobergnerBackentCliPkgFactoryEngineTmpAnyOfItemPlayer2(l, v)
}
