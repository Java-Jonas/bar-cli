// this file was generated by https://github.com/Java-Jonas/decltostring

package statefactory

const AddPlayer_Zone_func string = `func (_e Zone) AddPlayer(sm *StateMachine) Player {
	e := sm.GetZone(_e.zone.ID)
	if e.zone.OperationKind == OperationKindDelete {
		return Player{}
	}
	player := sm.CreatePlayer(ParentInfo{EntityKindZone, int(e.zone.ID)})
	e.zone.Players = append(e.zone.Players, player.player.ID)
	e.zone.OperationKind = OperationKindUpdate
	sm.Patch.Zone[e.zone.ID] = e.zone
	return player
}`

const AddZoneItem_Zone_func string = `func (_e Zone) AddZoneItem(sm *StateMachine) ZoneItem {
	e := sm.GetZone(_e.zone.ID)
	if e.zone.OperationKind == OperationKindDelete {
		return ZoneItem{}
	}
	zoneItem := sm.CreateZoneItem(ParentInfo{EntityKindZone, int(e.zone.ID)})
	e.zone.Items = append(e.zone.Items, zoneItem.zoneItem.ID)
	e.zone.OperationKind = OperationKindUpdate
	sm.Patch.Zone[e.zone.ID] = e.zone
	return zoneItem
}`

const AddItem_Player_func string = `func (_e Player) AddItem(sm *StateMachine) Item {
	e := sm.GetPlayer(_e.player.ID)
	if e.player.OperationKind == OperationKindDelete {
		return Item{}
	}
	item := sm.CreateItem(append(e.player.Parentage, ParentInfo{EntityKindPlayer, int(e.player.ID)})...)
	e.player.Items = append(e.player.Items, item.item.ID)
	e.player.OperationKind = OperationKindUpdate
	sm.Patch.Player[e.player.ID] = e.player
	return item
}`

const assembleGearScore_StateMachine_func string = `func (sm *StateMachine) assembleGearScore(gearScoreID GearScoreID) (_gearScore, bool) {
	gearScore, hasUpdated := sm.Patch.GearScore[gearScoreID]
	if !hasUpdated {
		return _gearScore{}, false
	}
	var treeGearScore _gearScore
	treeGearScore.ID = gearScore.ID
	treeGearScore.OperationKind = gearScore.OperationKind
	treeGearScore.Level = gearScore.Level
	treeGearScore.Score = gearScore.Score
	return treeGearScore, true
}`

const assemblePosition_StateMachine_func string = `func (sm *StateMachine) assemblePosition(positionID PositionID) (_position, bool) {
	position, hasUpdated := sm.Patch.Position[positionID]
	if !hasUpdated {
		return _position{}, false
	}
	var treePosition _position
	treePosition.ID = position.ID
	treePosition.OperationKind = position.OperationKind
	treePosition.X = position.X
	treePosition.Y = position.Y
	return treePosition, true
}`

const assembleItem_StateMachine_func string = `func (sm *StateMachine) assembleItem(itemID ItemID) (_item, bool) {
	item, hasUpdated := sm.Patch.Item[itemID]
	if !hasUpdated {
		item = sm.State.Item[itemID]
	}
	var treeItem _item
	if treeGearScore, gearScoreHasUpdated := sm.assembleGearScore(item.GearScore); gearScoreHasUpdated {
		hasUpdated = true
		treeItem.GearScore = &treeGearScore
	}
	treeItem.ID = item.ID
	treeItem.OperationKind = item.OperationKind
	return treeItem, hasUpdated
}`

const assembleZoneItem_StateMachine_func string = `func (sm *StateMachine) assembleZoneItem(zoneItemID ZoneItemID) (_zoneItem, bool) {
	zoneItem, hasUpdated := sm.Patch.ZoneItem[zoneItemID]
	if !hasUpdated {
		zoneItem = sm.State.ZoneItem[zoneItemID]
	}
	var treeZoneItem _zoneItem
	if treeItem, itemHasUpdated := sm.assembleItem(zoneItem.Item); itemHasUpdated {
		hasUpdated = true
		treeZoneItem.Item = &treeItem
	}
	if treePosition, positionHasUpdated := sm.assemblePosition(zoneItem.Position); positionHasUpdated {
		hasUpdated = true
		treeZoneItem.Position = &treePosition
	}
	treeZoneItem.ID = zoneItem.ID
	treeZoneItem.OperationKind = zoneItem.OperationKind
	return treeZoneItem, hasUpdated
}`

const assemblePlayer_StateMachine_func string = `func (sm *StateMachine) assemblePlayer(playerID PlayerID) (_player, bool) {
	player, hasUpdated := sm.Patch.Player[playerID]
	if !hasUpdated {
		player = sm.State.Player[playerID]
	}
	var treePlayer _player
	if treeGearScore, gearScoreHasUpdated := sm.assembleGearScore(player.GearScore); gearScoreHasUpdated {
		hasUpdated = true
		treePlayer.GearScore = &treeGearScore
	}
	for _, itemID := range deduplicateItemIDs(sm.State.Player[player.ID].Items, sm.Patch.Player[player.ID].Items) {
		if treeItem, itemHasUpdated := sm.assembleItem(itemID); itemHasUpdated {
			hasUpdated = true
			treePlayer.Items = append(treePlayer.Items, treeItem)
		}
	}
	if treePosition, positionHasUpdated := sm.assemblePosition(player.Position); positionHasUpdated {
		hasUpdated = true
		treePlayer.Position = &treePosition
	}
	treePlayer.ID = player.ID
	treePlayer.OperationKind = player.OperationKind
	return treePlayer, hasUpdated
}`

const assembleZone_StateMachine_func string = `func (sm *StateMachine) assembleZone(zoneID ZoneID) (_zone, bool) {
	zone, hasUpdated := sm.Patch.Zone[zoneID]
	if !hasUpdated {
		zone = sm.State.Zone[zoneID]
	}
	var treeZone _zone
	for _, zoneItemID := range zone.Items {
		if treeZoneItem, zoneItemHasUpdated := sm.assembleZoneItem(zoneItemID); zoneItemHasUpdated {
			hasUpdated = true
			treeZone.Items = append(treeZone.Items, treeZoneItem)
		}
	}
	for _, playerID := range zone.Players {
		if treePlayer, playerHasUpdated := sm.assemblePlayer(playerID); playerHasUpdated {
			hasUpdated = true
			treeZone.Players = append(treeZone.Players, treePlayer)
		}
	}
	treeZone.ID = zone.ID
	treeZone.OperationKind = zone.OperationKind
	return treeZone, hasUpdated
}`

const assembleTree_StateMachine_func string = `func (sm *StateMachine) assembleTree() Tree {
	tree := newTree()
	for _, gearScore := range sm.Patch.GearScore {
		if len(gearScore.Parentage) == 0 {
			treeGearScore, hasUpdated := sm.assembleGearScore(gearScore.ID)
			if hasUpdated {
				tree.GearScore[gearScore.ID] = treeGearScore
			}
		}
	}
	for _, item := range sm.Patch.Item {
		if len(item.Parentage) == 0 {
			treeItem, hasUpdated := sm.assembleItem(item.ID)
			if hasUpdated {
				tree.Item[item.ID] = treeItem
			}
		}
	}
	for _, player := range sm.Patch.Player {
		if len(player.Parentage) == 0 {
			treePlayer, hasUpdated := sm.assemblePlayer(player.ID)
			if hasUpdated {
				tree.Player[player.ID] = treePlayer
			}
		}
	}
	for _, position := range sm.Patch.Position {
		if len(position.Parentage) == 0 {
			treePosition, hasUpdated := sm.assemblePosition(position.ID)
			if hasUpdated {
				tree.Position[position.ID] = treePosition
			}
		}
	}
	for _, zone := range sm.Patch.Zone {
		treeZone, hasUpdated := sm.assembleZone(zone.ID)
		if hasUpdated {
			tree.Zone[zone.ID] = treeZone
		}
	}
	for _, zoneItem := range sm.Patch.ZoneItem {
		if len(zoneItem.Parentage) == 0 {
			treeZoneItem, hasUpdated := sm.assembleZoneItem(zoneItem.ID)
			if hasUpdated {
				tree.ZoneItem[zoneItem.ID] = treeZoneItem
			}
		}
	}
	for _, gearScore := range sm.State.GearScore {
		if len(gearScore.Parentage) == 0 {
			if _, ok := tree.GearScore[gearScore.ID]; !ok {
				treeGearScore, hasUpdated := sm.assembleGearScore(gearScore.ID)
				if hasUpdated {
					tree.GearScore[gearScore.ID] = treeGearScore
				}
			}
		}
	}
	for _, item := range sm.State.Item {
		if len(item.Parentage) == 0 {
			if _, ok := tree.Item[item.ID]; !ok {
				treeItem, hasUpdated := sm.assembleItem(item.ID)
				if hasUpdated {
					tree.Item[item.ID] = treeItem
				}
			}
		}
	}
	for _, player := range sm.State.Player {
		if len(player.Parentage) == 0 {
			if _, ok := tree.Player[player.ID]; !ok {
				treePlayer, hasUpdated := sm.assemblePlayer(player.ID)
				if hasUpdated {
					tree.Player[player.ID] = treePlayer
				}
			}
		}
	}
	for _, position := range sm.State.Position {
		if len(position.Parentage) == 0 {
			if _, ok := tree.Position[position.ID]; !ok {
				treePosition, hasUpdated := sm.assemblePosition(position.ID)
				if hasUpdated {
					tree.Position[position.ID] = treePosition
				}
			}
		}
	}
	for _, zone := range sm.State.Zone {
		if _, ok := tree.Zone[zone.ID]; !ok {
			treeZone, hasUpdated := sm.assembleZone(zone.ID)
			if hasUpdated {
				tree.Zone[zone.ID] = treeZone
			}
		}
	}
	for _, zoneItem := range sm.State.ZoneItem {
		if len(zoneItem.Parentage) == 0 {
			if _, ok := tree.ZoneItem[zoneItem.ID]; !ok {
				treeZoneItem, hasUpdated := sm.assembleZoneItem(zoneItem.ID)
				if hasUpdated {
					tree.ZoneItem[zoneItem.ID] = treeZoneItem
				}
			}
		}
	}
	return tree
}`

const CreateGearScore_StateMachine_func string = `func (sm *StateMachine) CreateGearScore(parentage ...ParentInfo) GearScore {
	var gearScore gearScoreCore
	gearScore.ID = GearScoreID(sm.GenerateID())
	gearScore.Parentage = append(gearScore.Parentage, parentage...)
	gearScore.OperationKind = OperationKindUpdate
	sm.Patch.GearScore[gearScore.ID] = gearScore
	return GearScore{gearScore: gearScore}
}`

const CreatePosition_StateMachine_func string = `func (sm *StateMachine) CreatePosition(parentage ...ParentInfo) Position {
	var position positionCore
	position.ID = PositionID(sm.GenerateID())
	position.Parentage = append(position.Parentage, parentage...)
	position.OperationKind = OperationKindUpdate
	sm.Patch.Position[position.ID] = position
	return Position{position: position}
}`

const CreateItem_StateMachine_func string = `func (sm *StateMachine) CreateItem(parentage ...ParentInfo) Item {
	var item itemCore
	item.ID = ItemID(sm.GenerateID())
	item.Parentage = append(item.Parentage, parentage...)
	elementGearScore := sm.CreateGearScore(append(item.Parentage, ParentInfo{EntityKindItem, int(item.ID)})...)
	item.GearScore = elementGearScore.gearScore.ID
	item.OperationKind = OperationKindUpdate
	sm.Patch.Item[item.ID] = item
	return Item{item: item}
}`

const CreateZoneItem_StateMachine_func string = `func (sm *StateMachine) CreateZoneItem(parentage ...ParentInfo) ZoneItem {
	var zoneItem zoneItemCore
	zoneItem.ID = ZoneItemID(sm.GenerateID())
	zoneItem.Parentage = append(zoneItem.Parentage, parentage...)
	elementItem := sm.CreateItem(append(zoneItem.Parentage, ParentInfo{EntityKindZoneItem, int(zoneItem.ID)})...)
	zoneItem.Item = elementItem.item.ID
	elementPosition := sm.CreatePosition(append(zoneItem.Parentage, ParentInfo{EntityKindZoneItem, int(zoneItem.ID)})...)
	zoneItem.Position = elementPosition.position.ID
	zoneItem.OperationKind = OperationKindUpdate
	sm.Patch.ZoneItem[zoneItem.ID] = zoneItem
	return ZoneItem{zoneItem: zoneItem}
}`

const CreatePlayer_StateMachine_func string = `func (sm *StateMachine) CreatePlayer(parentage ...ParentInfo) Player {
	var player playerCore
	player.ID = PlayerID(sm.GenerateID())
	player.Parentage = append(player.Parentage, parentage...)
	elementGearScore := sm.CreateGearScore(append(player.Parentage, ParentInfo{EntityKindPlayer, int(player.ID)})...)
	player.GearScore = elementGearScore.gearScore.ID
	elementPosition := sm.CreatePosition(append(player.Parentage, ParentInfo{EntityKindPlayer, int(player.ID)})...)
	player.Position = elementPosition.position.ID
	player.OperationKind = OperationKindUpdate
	sm.Patch.Player[player.ID] = player
	return Player{player: player}
}`

const CreateZone_StateMachine_func string = `func (sm *StateMachine) CreateZone() Zone {
	var zone zoneCore
	zone.ID = ZoneID(sm.GenerateID())
	zone.OperationKind = OperationKindUpdate
	sm.Patch.Zone[zone.ID] = zone
	return Zone{zone: zone}
}`

const DeletePlayer_StateMachine_func string = `func (sm *StateMachine) DeletePlayer(playerID PlayerID) {
	player := sm.GetPlayer(playerID).player
	player.OperationKind = OperationKindDelete
	sm.Patch.Player[player.ID] = player
	for _, itemID := range player.Items {
		sm.DeleteItem(itemID)
	}
	sm.DeleteGearScore(player.GearScore)
	sm.DeletePosition(player.Position)
}`

const DeleteGearScore_StateMachine_func string = `func (sm *StateMachine) DeleteGearScore(gearScoreID GearScoreID) {
	gearScore := sm.GetGearScore(gearScoreID).gearScore
	gearScore.OperationKind = OperationKindDelete
	sm.Patch.GearScore[gearScore.ID] = gearScore
}`

const DeletePosition_StateMachine_func string = `func (sm *StateMachine) DeletePosition(positionID PositionID) {
	position := sm.GetPosition(positionID).position
	position.OperationKind = OperationKindDelete
	sm.Patch.Position[position.ID] = position
}`

const DeleteItem_StateMachine_func string = `func (sm *StateMachine) DeleteItem(itemID ItemID) {
	item := sm.GetItem(itemID).item
	item.OperationKind = OperationKindDelete
	sm.Patch.Item[item.ID] = item
}`

const DeleteZoneItem_StateMachine_func string = `func (sm *StateMachine) DeleteZoneItem(zoneItemID ZoneItemID) {
	zoneItem := sm.GetZoneItem(zoneItemID).zoneItem
	zoneItem.OperationKind = OperationKindDelete
	sm.Patch.ZoneItem[zoneItem.ID] = zoneItem
}`

const DeleteZone_StateMachine_func string = `func (sm *StateMachine) DeleteZone(zoneID ZoneID) {
	zone := sm.GetZone(zoneID).zone
	zone.OperationKind = OperationKindDelete
	sm.Patch.Zone[zone.ID] = zone
	for _, playerID := range zone.Players {
		sm.DeletePlayer(playerID)
	}
	for _, zoneItemID := range zone.Items {
		sm.DeleteZoneItem(zoneItemID)
	}
}`

const GetPlayer_StateMachine_func string = `func (sm *StateMachine) GetPlayer(playerID PlayerID) Player {
	patchingPlayer, ok := sm.Patch.Player[playerID]
	if ok {
		return Player{patchingPlayer}
	}
	currentPlayer := sm.State.Player[playerID]
	return Player{currentPlayer}
}`

const GetItems_Player_func string = `func (_e Player) GetItems(sm *StateMachine) []Item {
	e := sm.GetPlayer(_e.player.ID)
	var items []Item
	for _, itemID := range e.player.Items {
		items = append(items, sm.GetItem(itemID))
	}
	return items
}`

const GetGearScore_Player_func string = `func (_e Player) GetGearScore(sm *StateMachine) GearScore {
	e := sm.GetPlayer(_e.player.ID)
	patchingGearScore, ok := sm.Patch.GearScore[e.player.GearScore]
	if ok {
		return GearScore{patchingGearScore}
	}
	currentGearScore := sm.State.GearScore[e.player.GearScore]
	return GearScore{currentGearScore}
}`

const GetPosition_Player_func string = `func (_e Player) GetPosition(sm *StateMachine) Position {
	e := sm.GetPlayer(_e.player.ID)
	patchingPosition, ok := sm.Patch.Position[e.player.Position]
	if ok {
		return Position{patchingPosition}
	}
	currentPosition := sm.State.Position[e.player.Position]
	return Position{currentPosition}
}`

const GetGearScore_StateMachine_func string = `func (sm *StateMachine) GetGearScore(gearScoreID GearScoreID) GearScore {
	patchingGearScore, ok := sm.Patch.GearScore[gearScoreID]
	if ok {
		return GearScore{gearScore: patchingGearScore}
	}
	currentGearScore := sm.State.GearScore[gearScoreID]
	return GearScore{gearScore: currentGearScore}
}`

const GetLevel_GearScore_func string = `func (_e GearScore) GetLevel(sm *StateMachine) int {
	e := sm.GetGearScore(_e.gearScore.ID)
	return e.gearScore.Level
}`

const GetScore_GearScore_func string = `func (_e GearScore) GetScore(sm *StateMachine) int {
	e := sm.GetGearScore(_e.gearScore.ID)
	return e.gearScore.Score
}`

const GetItem_StateMachine_func string = `func (sm *StateMachine) GetItem(itemID ItemID) Item {
	patchingItem, ok := sm.Patch.Item[itemID]
	if ok {
		return Item{patchingItem}
	}
	currentItem := sm.State.Item[itemID]
	return Item{currentItem}
}`

const GetGearScore_Item_func string = `func (_e Item) GetGearScore(sm *StateMachine) GearScore {
	e := sm.GetItem(_e.item.ID)
	patchingGearScore, ok := sm.Patch.GearScore[e.item.GearScore]
	if ok {
		return GearScore{gearScore: patchingGearScore}
	}
	currentGearScore := sm.State.GearScore[e.item.GearScore]
	return GearScore{gearScore: currentGearScore}
}`

const GetPosition_StateMachine_func string = `func (sm *StateMachine) GetPosition(positionID PositionID) Position {
	patchingPosition, ok := sm.Patch.Position[positionID]
	if ok {
		return Position{patchingPosition}
	}
	currentPosition := sm.State.Position[positionID]
	return Position{currentPosition}
}`

const GetX_Position_func string = `func (_e Position) GetX(sm *StateMachine) float64 {
	e := sm.GetPosition(_e.position.ID)
	return e.position.X
}`

const GetY_Position_func string = `func (_e Position) GetY(sm *StateMachine) float64 {
	e := sm.GetPosition(_e.position.ID)
	return e.position.Y
}`

const GetZoneItem_StateMachine_func string = `func (sm *StateMachine) GetZoneItem(zoneItemID ZoneItemID) ZoneItem {
	patchingZoneItem, ok := sm.Patch.ZoneItem[zoneItemID]
	if ok {
		return ZoneItem{patchingZoneItem}
	}
	currentZoneItem := sm.State.ZoneItem[zoneItemID]
	return ZoneItem{currentZoneItem}
}`

const GetPosition_ZoneItem_func string = `func (_e ZoneItem) GetPosition(sm *StateMachine) Position {
	e := sm.GetZoneItem(_e.zoneItem.ID)
	patchingPosition, ok := sm.Patch.Position[e.zoneItem.Position]
	if ok {
		return Position{patchingPosition}
	}
	currentPosition := sm.State.Position[e.zoneItem.Position]
	return Position{currentPosition}
}`

const GetItem_ZoneItem_func string = `func (_e ZoneItem) GetItem(sm *StateMachine) Item {
	e := sm.GetZoneItem(_e.zoneItem.ID)
	patchingItem, ok := sm.Patch.Item[e.zoneItem.Item]
	if ok {
		return Item{patchingItem}
	}
	currentItem := sm.State.Item[e.zoneItem.Item]
	return Item{currentItem}
}`

const GetZone_StateMachine_func string = `func (sm *StateMachine) GetZone(zoneID ZoneID) Zone {
	patchingZone, ok := sm.Patch.Zone[zoneID]
	if ok {
		return Zone{zone: patchingZone}
	}
	currentZone := sm.State.Zone[zoneID]
	return Zone{zone: currentZone}
}`

const GetPlayers_Zone_func string = `func (_e Zone) GetPlayers(sm *StateMachine) []Player {
	e := sm.GetZone(_e.zone.ID)
	var players []Player
	for _, playerID := range e.zone.Players {
		players = append(players, sm.GetPlayer(playerID))
	}
	return players
}`

const GetZoneItems_Zone_func string = `func (_e Zone) GetZoneItems(sm *StateMachine) []ZoneItem {
	e := sm.GetZone(_e.zone.ID)
	var items []ZoneItem
	for _, zoneItemID := range e.zone.Items {
		items = append(items, sm.GetZoneItem(zoneItemID))
	}
	return items
}`

const deduplicateGearScoreIDs_func string = `func deduplicateGearScoreIDs(a []GearScoreID, b []GearScoreID) []GearScoreID {
	check := make(map[GearScoreID]bool)
	deduped := make([]GearScoreID, 0)
	for _, val := range a {
		check[val] = true
	}
	for _, val := range b {
		check[val] = true
	}
	for letter := range check {
		deduped = append(deduped, letter)
	}
	return deduped
}`

const deduplicateItemIDs_func string = `func deduplicateItemIDs(a []ItemID, b []ItemID) []ItemID {
	check := make(map[ItemID]bool)
	deduped := make([]ItemID, 0)
	for _, val := range a {
		check[val] = true
	}
	for _, val := range b {
		check[val] = true
	}
	for letter := range check {
		deduped = append(deduped, letter)
	}
	return deduped
}`

const deduplicatePlayerIDs_func string = `func deduplicatePlayerIDs(a []PlayerID, b []PlayerID) []PlayerID {
	check := make(map[PlayerID]bool)
	deduped := make([]PlayerID, 0)
	for _, val := range a {
		check[val] = true
	}
	for _, val := range b {
		check[val] = true
	}
	for letter := range check {
		deduped = append(deduped, letter)
	}
	return deduped
}`

const deduplicatePositionIDs_func string = `func deduplicatePositionIDs(a []PositionID, b []PositionID) []PositionID {
	check := make(map[PositionID]bool)
	deduped := make([]PositionID, 0)
	for _, val := range a {
		check[val] = true
	}
	for _, val := range b {
		check[val] = true
	}
	for letter := range check {
		deduped = append(deduped, letter)
	}
	return deduped
}`

const deduplicateZoneIDs_func string = `func deduplicateZoneIDs(a []ZoneID, b []ZoneID) []ZoneID {
	check := make(map[ZoneID]bool)
	deduped := make([]ZoneID, 0)
	for _, val := range a {
		check[val] = true
	}
	for _, val := range b {
		check[val] = true
	}
	for letter := range check {
		deduped = append(deduped, letter)
	}
	return deduped
}`

const deduplicateZoneItemIDs_func string = `func deduplicateZoneItemIDs(a []ZoneItemID, b []ZoneItemID) []ZoneItemID {
	check := make(map[ZoneItemID]bool)
	deduped := make([]ZoneItemID, 0)
	for _, val := range a {
		check[val] = true
	}
	for _, val := range b {
		check[val] = true
	}
	for letter := range check {
		deduped = append(deduped, letter)
	}
	return deduped
}`

const Parentage_type string = `type Parentage []ParentInfo`

const ParentInfo_type string = `type ParentInfo struct {
	Kind	EntityKind	` + "`" + `json:"kind"` + "`" + `
	ID	int		` + "`" + `json:"id"` + "`" + `
}`

const RemovePlayer_Zone_func string = `func (_z Zone) RemovePlayer(playerID PlayerID, sm *StateMachine) Zone {
	z := sm.GetZone(_z.zone.ID)
	if z.zone.OperationKind == OperationKindDelete {
		return z
	}
	var elementFound bool
	var indexToRemove int
	for i, _playerID := range z.zone.Players {
		if _playerID == playerID {
			indexToRemove = i
			elementFound = true
			break
		}
	}
	if !elementFound {
		return z
	}
	z.zone.Players = append(z.zone.Players[:indexToRemove], z.zone.Players[indexToRemove+1:]...)
	z.zone.OperationKind = OperationKindUpdate
	sm.Patch.Zone[z.zone.ID] = z.zone
	sm.DeletePlayer(playerID)
	return z
}`

const RemoveZoneItem_Zone_func string = `func (_z Zone) RemoveZoneItem(zoneItemID ZoneItemID, sm *StateMachine) Zone {
	z := sm.GetZone(_z.zone.ID)
	if z.zone.OperationKind == OperationKindDelete {
		return z
	}
	var elementFound bool
	var indexToRemove int
	for i, _zoneItemID := range z.zone.Items {
		if _zoneItemID == zoneItemID {
			indexToRemove = i
			elementFound = true
			break
		}
	}
	if !elementFound {
		return z
	}
	z.zone.Items = append(z.zone.Items[:indexToRemove], z.zone.Items[indexToRemove+1:]...)
	z.zone.OperationKind = OperationKindUpdate
	sm.Patch.Zone[z.zone.ID] = z.zone
	sm.DeleteZoneItem(zoneItemID)
	return z
}`

const RemoveItem_Player_func string = `func (_p Player) RemoveItem(itemID ItemID, sm *StateMachine) Player {
	p := sm.GetPlayer(_p.player.ID)
	if p.player.OperationKind == OperationKindDelete {
		return p
	}
	var elementFound bool
	var indexToRemove int
	for i, _itemID := range p.player.Items {
		if _itemID == itemID {
			indexToRemove = i
			elementFound = true
			break
		}
	}
	if !elementFound {
		return p
	}
	p.player.Items = append(p.player.Items[:indexToRemove], p.player.Items[indexToRemove+1:]...)
	p.player.OperationKind = OperationKindUpdate
	sm.Patch.Player[p.player.ID] = p.player
	sm.DeleteItem(itemID)
	return p
}`

const SetLevel_GearScore_func string = `func (_g GearScore) SetLevel(newLevel int, sm *StateMachine) GearScore {
	g := sm.GetGearScore(_g.gearScore.ID)
	if g.gearScore.OperationKind == OperationKindDelete {
		return g
	}
	g.gearScore.Level = newLevel
	g.gearScore.OperationKind = OperationKindUpdate
	sm.Patch.GearScore[g.gearScore.ID] = g.gearScore
	return g
}`

const SetScore_GearScore_func string = `func (_g GearScore) SetScore(newScore int, sm *StateMachine) GearScore {
	g := sm.GetGearScore(_g.gearScore.ID)
	if g.gearScore.OperationKind == OperationKindDelete {
		return g
	}
	g.gearScore.Score = newScore
	g.gearScore.OperationKind = OperationKindUpdate
	sm.Patch.GearScore[g.gearScore.ID] = g.gearScore
	return g
}`

const SetX_Position_func string = `func (_p Position) SetX(newX float64, sm *StateMachine) Position {
	p := sm.GetPosition(_p.position.ID)
	if p.position.OperationKind == OperationKindDelete {
		return p
	}
	p.position.X = newX
	p.position.OperationKind = OperationKindUpdate
	sm.Patch.Position[p.position.ID] = p.position
	return p
}`

const SetY_Position_func string = `func (_p Position) SetY(newY float64, sm *StateMachine) Position {
	p := sm.GetPosition(_p.position.ID)
	if p.position.OperationKind == OperationKindDelete {
		return p
	}
	p.position.X = newY
	p.position.OperationKind = OperationKindUpdate
	sm.Patch.Position[p.position.ID] = p.position
	return p
}`

const EntityKind_type string = `type EntityKind string`

const EntityKindGearScore_type string = `const (
	EntityKindGearScore	EntityKind	= "gearScore"
	EntityKindItem				= "item"
	EntityKindPlayer			= "player"
	EntityKindPosition			= "position"
	EntityKindZone				= "zone"
	EntityKindZoneItem			= "zoneItem"
)`

const GearScoreID_type string = `type GearScoreID int`

const ItemID_type string = `type ItemID int`

const PlayerID_type string = `type PlayerID int`

const PositionID_type string = `type PositionID int`

const ZoneID_type string = `type ZoneID int`

const ZoneItemID_type string = `type ZoneItemID int`

const State_type string = `type State struct {
	GearScore	map[GearScoreID]gearScoreCore	` + "`" + `json:"gearScore"` + "`" + `
	Item		map[ItemID]itemCore		` + "`" + `json:"item"` + "`" + `
	Player		map[PlayerID]playerCore		` + "`" + `json:"player"` + "`" + `
	Position	map[PositionID]positionCore	` + "`" + `json:"position"` + "`" + `
	Zone		map[ZoneID]zoneCore		` + "`" + `json:"zone"` + "`" + `
	ZoneItem	map[ZoneItemID]zoneItemCore	` + "`" + `json:"zoneItem"` + "`" + `
}`

const newState_func string = `func newState() State {
	return State{GearScore: make(map[GearScoreID]gearScoreCore), Item: make(map[ItemID]itemCore), Player: make(map[PlayerID]playerCore), Position: make(map[PositionID]positionCore), Zone: make(map[ZoneID]zoneCore), ZoneItem: make(map[ZoneItemID]zoneItemCore)}
}`

const zoneCore_type string = `type zoneCore struct {
	ID		ZoneID		` + "`" + `json:"id"` + "`" + `
	Items		[]ZoneItemID	` + "`" + `json:"items"` + "`" + `
	Players		[]PlayerID	` + "`" + `json:"players"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
}`

const Zone_type string = `type Zone struct{ zone zoneCore }`

const zoneItemCore_type string = `type zoneItemCore struct {
	ID		ZoneItemID	` + "`" + `json:"id"` + "`" + `
	Item		ItemID		` + "`" + `json:"item"` + "`" + `
	Position	PositionID	` + "`" + `json:"position"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
	Parentage	Parentage	` + "`" + `json:"parentage"` + "`" + `
}`

const ZoneItem_type string = `type ZoneItem struct{ zoneItem zoneItemCore }`

const itemCore_type string = `type itemCore struct {
	ID		ItemID		` + "`" + `json:"id"` + "`" + `
	GearScore	GearScoreID	` + "`" + `json:"gearScore"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
	Parentage	Parentage	` + "`" + `json:"parentage"` + "`" + `
}`

const Item_type string = `type Item struct{ item itemCore }`

const playerCore_type string = `type playerCore struct {
	ID		PlayerID	` + "`" + `json:"id"` + "`" + `
	GearScore	GearScoreID	` + "`" + `json:"gearScore"` + "`" + `
	Items		[]ItemID	` + "`" + `json:"items"` + "`" + `
	Position	PositionID	` + "`" + `json:"position"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
	Parentage	Parentage	` + "`" + `json:"parentage"` + "`" + `
}`

const Player_type string = `type Player struct{ player playerCore }`

const gearScoreCore_type string = `type gearScoreCore struct {
	ID		GearScoreID	` + "`" + `json:"id"` + "`" + `
	Level		int		` + "`" + `json:"level"` + "`" + `
	Score		int		` + "`" + `json:"score"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
	Parentage	Parentage	` + "`" + `json:"parentage"` + "`" + `
}`

const GearScore_type string = `type GearScore struct{ gearScore gearScoreCore }`

const positionCore_type string = `type positionCore struct {
	ID		PositionID	` + "`" + `json:"id"` + "`" + `
	X		float64		` + "`" + `json:"x"` + "`" + `
	Y		float64		` + "`" + `json:"y"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
	Parentage	Parentage	` + "`" + `json:"parentage"` + "`" + `
}`

const Position_type string = `type Position struct{ position positionCore }`

const OperationKind_type string = `type OperationKind string`

const OperationKindDelete_type string = `const (
	OperationKindDelete	= "DELETE"
	OperationKindUpdate	= "UPDATE"
)`

const StateMachine_type string = `type StateMachine struct {
	State	State
	Patch	State
	IDgen	int
}`

const newStateMachine_func string = `func newStateMachine() *StateMachine {
	return &StateMachine{State: newState(), Patch: newState(), IDgen: 1}
}`

const GenerateID_StateMachine_func string = `func (sm *StateMachine) GenerateID() int {
	newID := sm.IDgen
	sm.IDgen = sm.IDgen + 1
	return newID
}`

const UpdateState_StateMachine_func string = `func (sm *StateMachine) UpdateState() {
	for _, gearScore := range sm.Patch.GearScore {
		if gearScore.OperationKind == OperationKindDelete {
			delete(sm.State.GearScore, gearScore.ID)
		} else {
			sm.State.GearScore[gearScore.ID] = gearScore
		}
	}
	for _, item := range sm.Patch.Item {
		if item.OperationKind == OperationKindDelete {
			delete(sm.State.Item, item.ID)
		} else {
			sm.State.Item[item.ID] = item
		}
	}
	for _, player := range sm.Patch.Player {
		if player.OperationKind == OperationKindDelete {
			delete(sm.State.Player, player.ID)
		} else {
			sm.State.Player[player.ID] = player
		}
	}
	for _, position := range sm.Patch.Position {
		if position.OperationKind == OperationKindDelete {
			delete(sm.State.Position, position.ID)
		} else {
			sm.State.Position[position.ID] = position
		}
	}
	for _, zone := range sm.Patch.Zone {
		if zone.OperationKind == OperationKindDelete {
			delete(sm.State.Zone, zone.ID)
		} else {
			sm.State.Zone[zone.ID] = zone
		}
	}
	for _, zoneItem := range sm.Patch.ZoneItem {
		if zoneItem.OperationKind == OperationKindDelete {
			delete(sm.State.ZoneItem, zoneItem.ID)
		} else {
			sm.State.ZoneItem[zoneItem.ID] = zoneItem
		}
	}
	sm.Patch = newState()
}`

const Tree_type string = `type Tree struct {
	Player		map[PlayerID]_player		` + "`" + `json:"player"` + "`" + `
	Zone		map[ZoneID]_zone		` + "`" + `json:"zone"` + "`" + `
	ZoneItem	map[ZoneItemID]_zoneItem	` + "`" + `json:"zoneItem"` + "`" + `
	Item		map[ItemID]_item		` + "`" + `json:"item"` + "`" + `
	Position	map[PositionID]_position	` + "`" + `json:"position"` + "`" + `
	GearScore	map[GearScoreID]_gearScore	` + "`" + `json:"gearScore"` + "`" + `
}`

const newTree_func string = `func newTree() Tree {
	return Tree{Player: make(map[PlayerID]_player), Zone: make(map[ZoneID]_zone), ZoneItem: make(map[ZoneItemID]_zoneItem), Position: make(map[PositionID]_position), Item: make(map[ItemID]_item), GearScore: make(map[GearScoreID]_gearScore)}
}`

const _zoneItem_type string = `type _zoneItem struct {
	ID		ZoneItemID	` + "`" + `json:"id"` + "`" + `
	Position	*_position	` + "`" + `json:"position"` + "`" + `
	Item		*_item		` + "`" + `json:"item"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
}`

const _item_type string = `type _item struct {
	ID		ItemID		` + "`" + `json:"id"` + "`" + `
	GearScore	*_gearScore	` + "`" + `json:"gearScore"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
}`

const _position_type string = `type _position struct {
	ID		PositionID	` + "`" + `json:"id"` + "`" + `
	X		float64		` + "`" + `json:"x"` + "`" + `
	Y		float64		` + "`" + `json:"y"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
}`

const _gearScore_type string = `type _gearScore struct {
	ID		GearScoreID	` + "`" + `json:"id"` + "`" + `
	Level		int		` + "`" + `json:"level"` + "`" + `
	Score		int		` + "`" + `json:"score"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
}`

const _player_type string = `type _player struct {
	ID		PlayerID	` + "`" + `json:"id"` + "`" + `
	Items		[]_item		` + "`" + `json:"items"` + "`" + `
	GearScore	*_gearScore	` + "`" + `json:"gearScore"` + "`" + `
	Position	*_position	` + "`" + `json:"position"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
}`

const _zone_type string = `type _zone struct {
	ID		ZoneID		` + "`" + `json:"id"` + "`" + `
	Players		[]_player	` + "`" + `json:"players"` + "`" + `
	Items		[]_zoneItem	` + "`" + `json:"items"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
}`
