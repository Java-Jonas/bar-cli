// this file was generated by https://github.com/Java-Jonas/decltostring

package statefactory

const output_main_import string = `import (
	"github.com/jinzhu/copier"
	"time"
)`

const output_operationKind_type string = `type operationKind string`

const output_personID_type string = `type personID int`

const output_nameID_type string = `type nameID int`

const output_childID_type string = `type childID int`

const output_entityKind_type string = `type entityKind string`

const output_entityKindPerson_type string = `const (
	entityKindPerson	entityKind	= "person"
	entityKindName				= "name"
)`

const output_operationKindCreate_type string = `const (
	operationKindCreate	operationKind	= "CREATE"
	operationKindDelete			= "DELETE"
	operationKindUpdate			= "UPDATE"
)`

const output_state_type string = `type state struct {
	person	map[personID]person
	name	map[nameID]name
	child	map[childID]child
}`

const output_stateMachine_type string = `type stateMachine struct {
	state	state
	patch	state
	idgen	int
}`

const output_parentage_type string = `type parentage []parentInfo`

const output_parentInfo_type string = `type parentInfo struct {
	kind	entityKind
	id	int
}`

const output_generateID_stateMachine_func string = `func (sm *stateMachine) generateID() int {
	newID := sm.idgen
	sm.idgen = sm.idgen + 1
	return newID
}`

const output_updateState_stateMachine_func string = `func (sm *stateMachine) updateState() {
	for _, person := range sm.patch.person {
		if person.operationKind == operationKindDelete {
			delete(sm.state.person, person.id)
		} else {
			sm.state.person[person.id] = person
		}
	}
	for _, name := range sm.patch.name {
		if name.operationKind == operationKindDelete {
			delete(sm.state.name, name.id)
		} else {
			sm.state.name[name.id] = name
		}
	}
	sm.patch = newState()
}`

const output_person_type string = `type person struct {
	id		personID
	name		nameID
	children	[]childID
	age		int
	lastModified	int64
	operationKind	operationKind
	parentage	parentage
}`

const output_name_type string = `type name struct {
	id		nameID
	first		string
	last		string
	lastModified	int64
	operationKind	operationKind
	parentage	parentage
}`

const output_child_type string = `type child struct {
	id		childID
	name		nameID
	lastModified	int64
	operationKind	operationKind
	parentage	parentage
}`

const output_CreatePerson_stateMachine_func string = `func (sm *stateMachine) CreatePerson() person {
	var person person
	personName := sm.CreateName()
	person.name = personName.id
	person.id = personID(sm.generateID())
	person.lastModified = time.Now().UnixNano()
	person.operationKind = operationKindCreate
	sm.patch.person[person.id] = person
	return person
}`

const output_CreateName_stateMachine_func string = `func (sm *stateMachine) CreateName() name {
	var name name
	name.id = nameID(sm.generateID())
	name.lastModified = time.Now().UnixNano()
	name.operationKind = operationKindCreate
	sm.patch.name[name.id] = name
	return name
}`

const output_CreateChild_stateMachine_func string = `func (sm *stateMachine) CreateChild() child {
	var child child
	childName := sm.CreateName()
	child.name = childName.id
	child.id = childID(sm.generateID())
	child.lastModified = time.Now().UnixNano()
	child.operationKind = operationKindCreate
	sm.patch.child[child.id] = child
	return child
}`

const output_GetPerson_stateMachine_func string = `func (sm *stateMachine) GetPerson(personID personID) person {
	patchingPerson, ok := sm.patch.person[personID]
	if ok {
		return patchingPerson
	}
	currentPerson := sm.state.person[personID]
	personCopy := person{}
	copier.Copy(&personCopy, &currentPerson)
	return personCopy
}`

const output_GetChild_stateMachine_func string = `func (sm *stateMachine) GetChild(childID childID) child {
	patchingChild, ok := sm.patch.child[childID]
	if ok {
		return patchingChild
	}
	currentChild := sm.state.child[childID]
	childCopy := child{}
	copier.Copy(&childCopy, &currentChild)
	return childCopy
}`

const output_GetName_stateMachine_func string = `func (sm *stateMachine) GetName(nameID nameID) name {
	patchingName, ok := sm.patch.name[nameID]
	if ok {
		return patchingName
	}
	currentName := sm.state.name[nameID]
	nameCopy := name{}
	copier.Copy(&nameCopy, &currentName)
	return nameCopy
}`

const output_GetName_person_func string = `func (p person) GetName(sm *stateMachine) name {
	patchingName, ok := sm.patch.name[p.name]
	if ok {
		return patchingName
	}
	currentName := sm.state.name[p.name]
	nameCopy := name{}
	copier.Copy(&nameCopy, &currentName)
	return nameCopy
}`

const output_GetChildren_person_func string = `func (p person) GetChildren(sm *stateMachine) []child {
	var children []child
	for _, childID := range p.children {
		children = append(children, sm.GetChild(childID))
	}
	return children
}`

const output_GetName_child_func string = `func (c child) GetName(sm *stateMachine) name {
	patchingName, ok := sm.patch.name[c.name]
	if ok {
		return patchingName
	}
	currentName := sm.state.name[c.name]
	nameCopy := name{}
	copier.Copy(&nameCopy, &currentName)
	return nameCopy
}`

const output_GetAge_person_func string = `func (p person) GetAge() int {
	return p.age
}`

const output_GetFirst_name_func string = `func (n name) GetFirst() string {
	return n.first
}`

const output_GetLast_name_func string = `func (n name) GetLast() string {
	return n.last
}`

const output_RemovePerson_stateMachine_func string = `func (sm *stateMachine) RemovePerson(personID personID) {
	person := sm.GetPerson(personID)
	person.lastModified = time.Now().UnixNano()
	person.operationKind = operationKindDelete
	sm.patch.person[person.id] = person
}`

const output_RemoveChild_stateMachine_func string = `func (sm *stateMachine) RemoveChild(childID childID) {
	child := sm.GetChild(childID)
	child.lastModified = time.Now().UnixNano()
	child.operationKind = operationKindDelete
	sm.patch.child[child.id] = child
}`

const output_RemoveName_stateMachine_func string = `func (sm *stateMachine) RemoveName(nameID nameID) {
	name := sm.GetName(nameID)
	name.lastModified = time.Now().UnixNano()
	name.operationKind = operationKindDelete
	sm.patch.name[name.id] = name
}`

const output_RemoveChild_person_func string = `func (p person) RemoveChild(childID childID, sm *stateMachine) {
	var indexToRemove int
	for i, _childID := range p.children {
		if _childID == childID {
			indexToRemove = i
			break
		}
	}
	p.children = append(p.children[:indexToRemove], p.children[indexToRemove+1:]...)
	p.lastModified = time.Now().UnixNano()
	p.operationKind = operationKindUpdate
	sm.patch.person[p.id] = p
}`

const output_SetAge_person_func string = `func (p person) SetAge(val int, sm *stateMachine) person {
	p.age = val
	p.lastModified = time.Now().UnixNano()
	p.operationKind = operationKindUpdate
	sm.patch.person[p.id] = p
	return p
}`

const output_SetFirst_name_func string = `func (n name) SetFirst(val string, sm *stateMachine) name {
	n.first = val
	n.lastModified = time.Now().UnixNano()
	n.operationKind = operationKindUpdate
	sm.patch.name[n.id] = n
	return n
}`

const output_SetLast_name_func string = `func (n name) SetLast(val string, sm *stateMachine) name {
	n.last = val
	n.lastModified = time.Now().UnixNano()
	n.operationKind = operationKindUpdate
	sm.patch.name[n.id] = n
	return n
}`
