// this file was generated by https://github.com/Java-Jonas/decltostring

package enginefactory

const _AddPlayer_zone_func string = `func (_zone zone) AddPlayer() player {
	zone := _zone.zone.engine.Zone(_zone.zone.ID)
	if zone.zone.OperationKind == OperationKindDelete {
		return player{player: playerCore{OperationKind: OperationKindDelete, engine: zone.zone.engine}}
	}
	player := zone.zone.engine.createPlayer(zone.zone.path.players(), true)
	zone.zone.Players = append(zone.zone.Players, player.player.ID)
	zone.zone.OperationKind = OperationKindUpdate
	zone.zone.engine.Patch.Zone[zone.zone.ID] = zone.zone
	return player
}`

const _AddItem_zone_func string = `func (_zone zone) AddItem() zoneItem {
	zone := _zone.zone.engine.Zone(_zone.zone.ID)
	if zone.zone.OperationKind == OperationKindDelete {
		return zoneItem{zoneItem: zoneItemCore{OperationKind: OperationKindDelete, engine: zone.zone.engine}}
	}
	zoneItem := zone.zone.engine.createZoneItem(zone.zone.path.items(), true)
	zone.zone.Items = append(zone.zone.Items, zoneItem.zoneItem.ID)
	zone.zone.OperationKind = OperationKindUpdate
	zone.zone.engine.Patch.Zone[zone.zone.ID] = zone.zone
	return zoneItem
}`

const _AddInteractablePlayer_zone_func string = `func (_zone zone) AddInteractablePlayer() player {
	zone := _zone.zone.engine.Zone(_zone.zone.ID)
	if zone.zone.OperationKind == OperationKindDelete {
		return player{player: playerCore{OperationKind: OperationKindDelete, engine: zone.zone.engine}}
	}
	player := zone.zone.engine.createPlayer(zone.zone.path.interactables(), true)
	anyContainer := zone.zone.engine.createAnyOfItem_Player_ZoneItem(false, zone.zone.path.interactables()).anyOfItem_Player_ZoneItem
	anyContainer.setPlayer(player.player.ID, false)
	zone.zone.Interactables = append(zone.zone.Interactables, anyContainer.ID)
	zone.zone.OperationKind = OperationKindUpdate
	zone.zone.engine.Patch.Zone[zone.zone.ID] = zone.zone
	return player
}`

const _AddInteractableZoneItem_zone_func string = `func (_zone zone) AddInteractableZoneItem() zoneItem {
	zone := _zone.zone.engine.Zone(_zone.zone.ID)
	if zone.zone.OperationKind == OperationKindDelete {
		return zoneItem{zoneItem: zoneItemCore{OperationKind: OperationKindDelete, engine: zone.zone.engine}}
	}
	zoneItem := zone.zone.engine.createZoneItem(zone.zone.path.interactables(), true)
	anyContainer := zone.zone.engine.createAnyOfItem_Player_ZoneItem(false, zone.zone.path.interactables()).anyOfItem_Player_ZoneItem
	anyContainer.setZoneItem(zoneItem.zoneItem.ID, false)
	zone.zone.Interactables = append(zone.zone.Interactables, anyContainer.ID)
	zone.zone.OperationKind = OperationKindUpdate
	zone.zone.engine.Patch.Zone[zone.zone.ID] = zone.zone
	return zoneItem
}`

const _AddInteractableItem_zone_func string = `func (_zone zone) AddInteractableItem() item {
	zone := _zone.zone.engine.Zone(_zone.zone.ID)
	if zone.zone.OperationKind == OperationKindDelete {
		return item{item: itemCore{OperationKind: OperationKindDelete, engine: zone.zone.engine}}
	}
	item := zone.zone.engine.createItem(zone.zone.path.interactables(), true)
	anyContainer := zone.zone.engine.createAnyOfItem_Player_ZoneItem(false, zone.zone.path.interactables()).anyOfItem_Player_ZoneItem
	anyContainer.setItem(item.item.ID, false)
	zone.zone.Interactables = append(zone.zone.Interactables, anyContainer.ID)
	zone.zone.OperationKind = OperationKindUpdate
	zone.zone.engine.Patch.Zone[zone.zone.ID] = zone.zone
	return item
}`

const _AddTags_zone_func string = `func (_zone zone) AddTags(tags ...string) {
	zone := _zone.zone.engine.Zone(_zone.zone.ID)
	if zone.zone.OperationKind == OperationKindDelete {
		return
	}
	zone.zone.Tags = append(zone.zone.Tags, tags...)
	zone.zone.OperationKind = OperationKindUpdate
	zone.zone.engine.Patch.Zone[zone.zone.ID] = zone.zone
}`

const _AddItem_player_func string = `func (_player player) AddItem() item {
	player := _player.player.engine.Player(_player.player.ID)
	if player.player.OperationKind == OperationKindDelete {
		return item{item: itemCore{OperationKind: OperationKindDelete, engine: player.player.engine}}
	}
	item := player.player.engine.createItem(player.player.path.items(), true)
	player.player.Items = append(player.player.Items, item.item.ID)
	player.player.OperationKind = OperationKindUpdate
	player.player.engine.Patch.Player[player.player.ID] = player.player
	return item
}`

const _AddGuildMember_player_func string = `func (_player player) AddGuildMember(playerID PlayerID) {
	player := _player.player.engine.Player(_player.player.ID)
	if player.player.OperationKind == OperationKindDelete {
		return
	}
	if player.player.engine.Player(playerID).player.OperationKind == OperationKindDelete {
		return
	}
	for _, currentRefID := range player.player.GuildMembers {
		currentRef := player.player.engine.playerGuildMemberRef(currentRefID)
		if currentRef.playerGuildMemberRef.ReferencedElementID == playerID {
			return
		}
	}
	ref := player.player.engine.createPlayerGuildMemberRef(playerID, player.player.ID)
	player.player.GuildMembers = append(player.player.GuildMembers, ref.ID)
	player.player.OperationKind = OperationKindUpdate
	player.player.engine.Patch.Player[player.player.ID] = player.player
}`

const _AddTargetedByPlayer_player_func string = `func (_player player) AddTargetedByPlayer(playerID PlayerID) {
	player := _player.player.engine.Player(_player.player.ID)
	if player.player.OperationKind == OperationKindDelete {
		return
	}
	if player.player.engine.Player(playerID).player.OperationKind == OperationKindDelete {
		return
	}
	for _, currentRefID := range player.player.TargetedBy {
		currentRef := player.player.engine.playerTargetedByRef(currentRefID)
		anyContainer := player.player.engine.anyOfPlayer_ZoneItem(currentRef.playerTargetedByRef.ReferencedElementID)
		if anyContainer.anyOfPlayer_ZoneItem.Player == playerID {
			return
		}
	}
	anyContainer := player.player.engine.createAnyOfPlayer_ZoneItem(false, nil).anyOfPlayer_ZoneItem
	anyContainer.setPlayer(playerID, false)
	ref := player.player.engine.createPlayerTargetedByRef(anyContainer.ID, player.player.ID)
	player.player.TargetedBy = append(player.player.TargetedBy, ref.ID)
	player.player.OperationKind = OperationKindUpdate
	player.player.engine.Patch.Player[player.player.ID] = player.player
}`

const _AddTargetedByZoneItem_player_func string = `func (_player player) AddTargetedByZoneItem(zoneItemID ZoneItemID) {
	player := _player.player.engine.Player(_player.player.ID)
	if player.player.OperationKind == OperationKindDelete {
		return
	}
	if player.player.engine.ZoneItem(zoneItemID).zoneItem.OperationKind == OperationKindDelete {
		return
	}
	for _, currentRefID := range player.player.TargetedBy {
		currentRef := player.player.engine.playerTargetedByRef(currentRefID)
		anyContainer := player.player.engine.anyOfPlayer_ZoneItem(currentRef.playerTargetedByRef.ReferencedElementID)
		if anyContainer.anyOfPlayer_ZoneItem.ZoneItem == zoneItemID {
			return
		}
	}
	anyContainer := player.player.engine.createAnyOfPlayer_ZoneItem(false, nil).anyOfPlayer_ZoneItem
	anyContainer.setZoneItem(zoneItemID, false)
	ref := player.player.engine.createPlayerTargetedByRef(anyContainer.ID, player.player.ID)
	player.player.TargetedBy = append(player.player.TargetedBy, ref.ID)
	player.player.OperationKind = OperationKindUpdate
	player.player.engine.Patch.Player[player.player.ID] = player.player
}`

const _AddEquipmentSet_player_func string = `func (_player player) AddEquipmentSet(equipmentSetID EquipmentSetID) {
	player := _player.player.engine.Player(_player.player.ID)
	if player.player.OperationKind == OperationKindDelete {
		return
	}
	if player.player.engine.EquipmentSet(equipmentSetID).equipmentSet.OperationKind == OperationKindDelete {
		return
	}
	for _, currentRefID := range player.player.EquipmentSets {
		currentRef := player.player.engine.playerEquipmentSetRef(currentRefID)
		if currentRef.playerEquipmentSetRef.ReferencedElementID == equipmentSetID {
			return
		}
	}
	ref := player.player.engine.createPlayerEquipmentSetRef(equipmentSetID, player.player.ID)
	player.player.EquipmentSets = append(player.player.EquipmentSets, ref.ID)
	player.player.OperationKind = OperationKindUpdate
	player.player.engine.Patch.Player[player.player.ID] = player.player
}`

const _AddEquipment_equipmentSet_func string = `func (_equipmentSet equipmentSet) AddEquipment(itemID ItemID) {
	equipmentSet := _equipmentSet.equipmentSet.engine.EquipmentSet(_equipmentSet.equipmentSet.ID)
	if equipmentSet.equipmentSet.OperationKind == OperationKindDelete {
		return
	}
	if equipmentSet.equipmentSet.engine.Item(itemID).item.OperationKind == OperationKindDelete {
		return
	}
	for _, currentRefID := range equipmentSet.equipmentSet.Equipment {
		currentRef := equipmentSet.equipmentSet.engine.equipmentSetEquipmentRef(currentRefID)
		if currentRef.equipmentSetEquipmentRef.ReferencedElementID == itemID {
			return
		}
	}
	ref := equipmentSet.equipmentSet.engine.createEquipmentSetEquipmentRef(itemID, equipmentSet.equipmentSet.ID)
	equipmentSet.equipmentSet.Equipment = append(equipmentSet.equipmentSet.Equipment, ref.ID)
	equipmentSet.equipmentSet.OperationKind = OperationKindUpdate
	equipmentSet.equipmentSet.engine.Patch.EquipmentSet[equipmentSet.equipmentSet.ID] = equipmentSet.equipmentSet
}`

const anyOfPlayer_PositionRef_type string = `type anyOfPlayer_PositionRef struct {
	anyOfPlayer_PositionWrapper	anyOfPlayer_Position
	anyOfPlayer_Position		anyOfPlayer_PositionCore
}`

const _Kind_anyOfPlayer_PositionRef_func string = `func (_any anyOfPlayer_PositionRef) Kind() ElementKind {
	return _any.anyOfPlayer_PositionWrapper.Kind()
}`

const _Player_anyOfPlayer_PositionRef_func string = `func (_any anyOfPlayer_PositionRef) Player() player {
	return _any.anyOfPlayer_PositionWrapper.Player()
}`

const _Position_anyOfPlayer_PositionRef_func string = `func (_any anyOfPlayer_PositionRef) Position() position {
	return _any.anyOfPlayer_PositionWrapper.Position()
}`

const anyOfPlayer_ZoneItemRef_type string = `type anyOfPlayer_ZoneItemRef struct {
	anyOfPlayer_ZoneItemWrapper	anyOfPlayer_ZoneItem
	anyOfPlayer_ZoneItem		anyOfPlayer_ZoneItemCore
}`

const _Kind_anyOfPlayer_ZoneItemRef_func string = `func (_any anyOfPlayer_ZoneItemRef) Kind() ElementKind {
	return _any.anyOfPlayer_ZoneItemWrapper.Kind()
}`

const _Player_anyOfPlayer_ZoneItemRef_func string = `func (_any anyOfPlayer_ZoneItemRef) Player() player {
	return _any.anyOfPlayer_ZoneItemWrapper.Player()
}`

const _ZoneItem_anyOfPlayer_ZoneItemRef_func string = `func (_any anyOfPlayer_ZoneItemRef) ZoneItem() zoneItem {
	return _any.anyOfPlayer_ZoneItemWrapper.ZoneItem()
}`

const anyOfItem_Player_ZoneItemRef_type string = `type anyOfItem_Player_ZoneItemRef struct {
	anyOfItem_Player_ZoneItemWrapper	anyOfItem_Player_ZoneItem
	anyOfItem_Player_ZoneItem		anyOfItem_Player_ZoneItemCore
}`

const _Kind_anyOfItem_Player_ZoneItemRef_func string = `func (_any anyOfItem_Player_ZoneItemRef) Kind() ElementKind {
	return _any.anyOfItem_Player_ZoneItemWrapper.Kind()
}`

const _Item_anyOfItem_Player_ZoneItemRef_func string = `func (_any anyOfItem_Player_ZoneItemRef) Item() item {
	return _any.anyOfItem_Player_ZoneItemWrapper.Item()
}`

const _Player_anyOfItem_Player_ZoneItemRef_func string = `func (_any anyOfItem_Player_ZoneItemRef) Player() player {
	return _any.anyOfItem_Player_ZoneItemWrapper.Player()
}`

const _ZoneItem_anyOfItem_Player_ZoneItemRef_func string = `func (_any anyOfItem_Player_ZoneItemRef) ZoneItem() zoneItem {
	return _any.anyOfItem_Player_ZoneItemWrapper.ZoneItem()
}`

const _Kind_anyOfPlayer_ZoneItem_func string = `func (_any anyOfPlayer_ZoneItem) Kind() ElementKind {
	any := _any.anyOfPlayer_ZoneItem.engine.anyOfPlayer_ZoneItem(_any.anyOfPlayer_ZoneItem.ID)
	return any.anyOfPlayer_ZoneItem.ElementKind
}`

const _SetZoneItem_anyOfPlayer_ZoneItem_func string = `func (_any anyOfPlayer_ZoneItem) SetZoneItem() zoneItem {
	any := _any.anyOfPlayer_ZoneItem.engine.anyOfPlayer_ZoneItem(_any.anyOfPlayer_ZoneItem.ID)
	if any.anyOfPlayer_ZoneItem.ElementKind == ElementKindZoneItem || any.anyOfPlayer_ZoneItem.OperationKind == OperationKindDelete {
		return any.ZoneItem()
	}
	zoneItem := any.anyOfPlayer_ZoneItem.engine.createZoneItem(any.anyOfPlayer_ZoneItem.ChildElementPath, false)
	any.anyOfPlayer_ZoneItem.setZoneItem(zoneItem.ID(), true)
	return zoneItem
}`

const setZoneItem_anyOfPlayer_ZoneItemCore_func string = `func (_any anyOfPlayer_ZoneItemCore) setZoneItem(zoneItemID ZoneItemID, deleteCurrentChild bool) {
	any := _any.engine.anyOfPlayer_ZoneItem(_any.ID).anyOfPlayer_ZoneItem
	if deleteCurrentChild {
		if any.Player != 0 {
			any.engine.deletePlayer(any.Player)
			any.Player = 0
		}
	}
	any.ElementKind = ElementKindZoneItem
	any.ZoneItem = zoneItemID
	any.engine.Patch.AnyOfPlayer_ZoneItem[any.ID] = any
}`

const _SetPlayer_anyOfPlayer_ZoneItem_func string = `func (_any anyOfPlayer_ZoneItem) SetPlayer() player {
	any := _any.anyOfPlayer_ZoneItem.engine.anyOfPlayer_ZoneItem(_any.anyOfPlayer_ZoneItem.ID)
	if any.anyOfPlayer_ZoneItem.ElementKind == ElementKindPlayer || any.anyOfPlayer_ZoneItem.OperationKind == OperationKindDelete {
		return any.Player()
	}
	player := any.anyOfPlayer_ZoneItem.engine.createPlayer(any.anyOfPlayer_ZoneItem.ChildElementPath, false)
	any.anyOfPlayer_ZoneItem.setPlayer(player.ID(), true)
	return player
}`

const setPlayer_anyOfPlayer_ZoneItemCore_func string = `func (_any anyOfPlayer_ZoneItemCore) setPlayer(playerID PlayerID, deleteCurrentChild bool) {
	any := _any.engine.anyOfPlayer_ZoneItem(_any.ID).anyOfPlayer_ZoneItem
	if deleteCurrentChild {
		if any.ZoneItem != 0 {
			any.engine.deleteZoneItem(any.ZoneItem)
			any.ZoneItem = 0
		}
	}
	any.ElementKind = ElementKindPlayer
	any.Player = playerID
	any.engine.Patch.AnyOfPlayer_ZoneItem[any.ID] = any
}`

const deleteChild_anyOfPlayer_ZoneItemCore_func string = `func (_any anyOfPlayer_ZoneItemCore) deleteChild() {
	any := _any.engine.anyOfPlayer_ZoneItem(_any.ID).anyOfPlayer_ZoneItem
	switch any.ElementKind {
	case ElementKindPlayer:
		any.engine.deletePlayer(any.Player)
	case ElementKindZoneItem:
		any.engine.deleteZoneItem(any.ZoneItem)
	}
}`

const _Kind_anyOfPlayer_Position_func string = `func (_any anyOfPlayer_Position) Kind() ElementKind {
	any := _any.anyOfPlayer_Position.engine.anyOfPlayer_Position(_any.anyOfPlayer_Position.ID)
	return any.anyOfPlayer_Position.ElementKind
}`

const _SetPosition_anyOfPlayer_Position_func string = `func (_any anyOfPlayer_Position) SetPosition() position {
	any := _any.anyOfPlayer_Position.engine.anyOfPlayer_Position(_any.anyOfPlayer_Position.ID)
	if any.anyOfPlayer_Position.ElementKind == ElementKindPosition || any.anyOfPlayer_Position.OperationKind == OperationKindDelete {
		return any.Position()
	}
	position := any.anyOfPlayer_Position.engine.createPosition(any.anyOfPlayer_Position.ChildElementPath, false)
	any.anyOfPlayer_Position.setPosition(position.ID(), true)
	return position
}`

const setPosition_anyOfPlayer_PositionCore_func string = `func (_any anyOfPlayer_PositionCore) setPosition(positionID PositionID, deleteCurrentChild bool) {
	any := _any.engine.anyOfPlayer_Position(_any.ID).anyOfPlayer_Position
	if deleteCurrentChild {
		if any.Player != 0 {
			any.engine.deletePlayer(any.Player)
			any.Player = 0
		}
	}
	any.ElementKind = ElementKindPosition
	any.Position = positionID
	any.engine.Patch.AnyOfPlayer_Position[any.ID] = any
}`

const deleteChild_anyOfPlayer_PositionCore_func string = `func (_any anyOfPlayer_PositionCore) deleteChild() {
	any := _any.engine.anyOfPlayer_Position(_any.ID).anyOfPlayer_Position
	switch any.ElementKind {
	case ElementKindPlayer:
		any.engine.deletePlayer(any.Player)
	case ElementKindPosition:
		any.engine.deletePosition(any.Position)
	}
}`

const _SetPlayer_anyOfPlayer_Position_func string = `func (_any anyOfPlayer_Position) SetPlayer() player {
	any := _any.anyOfPlayer_Position.engine.anyOfPlayer_Position(_any.anyOfPlayer_Position.ID)
	if any.anyOfPlayer_Position.ElementKind == ElementKindPlayer || any.anyOfPlayer_Position.OperationKind == OperationKindDelete {
		return any.Player()
	}
	player := any.anyOfPlayer_Position.engine.createPlayer(any.anyOfPlayer_Position.ChildElementPath, false)
	any.anyOfPlayer_Position.setPlayer(player.ID(), true)
	return player
}`

const setPlayer_anyOfPlayer_PositionCore_func string = `func (_any anyOfPlayer_PositionCore) setPlayer(playerID PlayerID, deleteCurrentChild bool) {
	any := _any.engine.anyOfPlayer_Position(_any.ID).anyOfPlayer_Position
	if deleteCurrentChild {
		if any.Position != 0 {
			any.engine.deletePosition(any.Position)
			any.Position = 0
		}
	}
	any.ElementKind = ElementKindPlayer
	any.Player = playerID
	any.engine.Patch.AnyOfPlayer_Position[any.ID] = any
}`

const _Kind_anyOfItem_Player_ZoneItem_func string = `func (_any anyOfItem_Player_ZoneItem) Kind() ElementKind {
	any := _any.anyOfItem_Player_ZoneItem.engine.anyOfItem_Player_ZoneItem(_any.anyOfItem_Player_ZoneItem.ID)
	return any.anyOfItem_Player_ZoneItem.ElementKind
}`

const _SetZoneItem_anyOfItem_Player_ZoneItem_func string = `func (_any anyOfItem_Player_ZoneItem) SetZoneItem() zoneItem {
	any := _any.anyOfItem_Player_ZoneItem.engine.anyOfItem_Player_ZoneItem(_any.anyOfItem_Player_ZoneItem.ID)
	if any.anyOfItem_Player_ZoneItem.ElementKind == ElementKindZoneItem || any.anyOfItem_Player_ZoneItem.OperationKind == OperationKindDelete {
		return any.ZoneItem()
	}
	zoneItem := any.anyOfItem_Player_ZoneItem.engine.createZoneItem(any.anyOfItem_Player_ZoneItem.ChildElementPath, false)
	any.anyOfItem_Player_ZoneItem.setZoneItem(zoneItem.ID(), true)
	return zoneItem
}`

const setZoneItem_anyOfItem_Player_ZoneItemCore_func string = `func (_any anyOfItem_Player_ZoneItemCore) setZoneItem(zoneItemID ZoneItemID, deleteCurrentChild bool) {
	any := _any.engine.anyOfItem_Player_ZoneItem(_any.ID).anyOfItem_Player_ZoneItem
	if deleteCurrentChild {
		if any.Item != 0 {
			any.engine.deleteItem(any.Item)
			any.Item = 0
		}
		if any.Player != 0 {
			any.engine.deletePlayer(any.Player)
			any.Player = 0
		}
	}
	any.ElementKind = ElementKindZoneItem
	any.ZoneItem = zoneItemID
	any.engine.Patch.AnyOfItem_Player_ZoneItem[any.ID] = any
}`

const _SetPlayer_anyOfItem_Player_ZoneItem_func string = `func (_any anyOfItem_Player_ZoneItem) SetPlayer() player {
	any := _any.anyOfItem_Player_ZoneItem.engine.anyOfItem_Player_ZoneItem(_any.anyOfItem_Player_ZoneItem.ID)
	if any.anyOfItem_Player_ZoneItem.ElementKind == ElementKindPlayer || any.anyOfItem_Player_ZoneItem.OperationKind == OperationKindDelete {
		return any.Player()
	}
	player := any.anyOfItem_Player_ZoneItem.engine.createPlayer(any.anyOfItem_Player_ZoneItem.ChildElementPath, false)
	any.anyOfItem_Player_ZoneItem.setPlayer(player.ID(), true)
	return player
}`

const setPlayer_anyOfItem_Player_ZoneItemCore_func string = `func (_any anyOfItem_Player_ZoneItemCore) setPlayer(playerID PlayerID, deleteCurrentChild bool) {
	any := _any.engine.anyOfItem_Player_ZoneItem(_any.ID).anyOfItem_Player_ZoneItem
	if deleteCurrentChild {
		if any.Item != 0 {
			any.engine.deleteItem(any.Item)
			any.Item = 0
		}
		if any.ZoneItem != 0 {
			any.engine.deleteZoneItem(any.ZoneItem)
			any.ZoneItem = 0
		}
	}
	any.ElementKind = ElementKindPlayer
	any.Player = playerID
	any.engine.Patch.AnyOfItem_Player_ZoneItem[any.ID] = any
}`

const _SetItem_anyOfItem_Player_ZoneItem_func string = `func (_any anyOfItem_Player_ZoneItem) SetItem() item {
	any := _any.anyOfItem_Player_ZoneItem.engine.anyOfItem_Player_ZoneItem(_any.anyOfItem_Player_ZoneItem.ID)
	if any.anyOfItem_Player_ZoneItem.ElementKind == ElementKindItem || any.anyOfItem_Player_ZoneItem.OperationKind == OperationKindDelete {
		return any.Item()
	}
	item := any.anyOfItem_Player_ZoneItem.engine.createItem(any.anyOfItem_Player_ZoneItem.ChildElementPath, false)
	any.anyOfItem_Player_ZoneItem.setItem(item.ID(), true)
	return item
}`

const setItem_anyOfItem_Player_ZoneItemCore_func string = `func (_any anyOfItem_Player_ZoneItemCore) setItem(itemID ItemID, deleteCurrentChild bool) {
	any := _any.engine.anyOfItem_Player_ZoneItem(_any.ID).anyOfItem_Player_ZoneItem
	if deleteCurrentChild {
		if any.Player != 0 {
			any.engine.deletePlayer(any.Player)
			any.Player = 0
		}
		if any.ZoneItem != 0 {
			any.engine.deleteZoneItem(any.ZoneItem)
			any.ZoneItem = 0
		}
	}
	any.ElementKind = ElementKindItem
	any.Item = itemID
	any.engine.Patch.AnyOfItem_Player_ZoneItem[any.ID] = any
}`

const deleteChild_anyOfItem_Player_ZoneItemCore_func string = `func (_any anyOfItem_Player_ZoneItemCore) deleteChild() {
	any := _any.engine.anyOfItem_Player_ZoneItem(_any.ID).anyOfItem_Player_ZoneItem
	switch any.ElementKind {
	case ElementKindItem:
		any.engine.deleteItem(any.Item)
	case ElementKindPlayer:
		any.engine.deletePlayer(any.Player)
	case ElementKindZoneItem:
		any.engine.deleteZoneItem(any.ZoneItem)
	}
}`

const assembleConfig_type string = `type assembleConfig struct{ forceInclude bool }`

const assembleGearScore_Engine_func string = `func (engine *Engine) assembleGearScore(gearScoreID GearScoreID, check *recursionCheck, config assembleConfig) (GearScore, bool, bool) {
	if check != nil {
		if alreadyExists := check.gearScore[gearScoreID]; alreadyExists {
			return GearScore{}, false, false
		} else {
			check.gearScore[gearScoreID] = true
		}
	}
	gearScoreData, hasUpdated := engine.Patch.GearScore[gearScoreID]
	if !hasUpdated {
		gearScoreData = engine.State.GearScore[gearScoreID]
	}
	if cachedGearScore, ok := engine.forceIncludeAssembleCache.gearScore[gearScoreData.ID]; ok && config.forceInclude {
		return cachedGearScore.gearScore, true, cachedGearScore.hasUpdated
	}
	if cachedGearScore, ok := engine.assembleCache.gearScore[gearScoreData.ID]; ok && !config.forceInclude {
		return cachedGearScore.gearScore, cachedGearScore.hasUpdated || config.forceInclude, cachedGearScore.hasUpdated
	}
	var gearScore GearScore
	gearScore.ID = gearScoreData.ID
	gearScore.OperationKind = gearScoreData.OperationKind
	gearScore.Level = gearScoreData.Level
	gearScore.Score = gearScoreData.Score
	if config.forceInclude {
		engine.forceIncludeAssembleCache.gearScore[gearScore.ID] = gearScoreCacheElement{hasUpdated: hasUpdated, gearScore: gearScore}
	} else {
		engine.assembleCache.gearScore[gearScore.ID] = gearScoreCacheElement{hasUpdated: hasUpdated, gearScore: gearScore}
	}
	return gearScore, hasUpdated || config.forceInclude, hasUpdated
}`

const assemblePosition_Engine_func string = `func (engine *Engine) assemblePosition(positionID PositionID, check *recursionCheck, config assembleConfig) (Position, bool, bool) {
	if check != nil {
		if alreadyExists := check.position[positionID]; alreadyExists {
			return Position{}, false, false
		} else {
			check.position[positionID] = true
		}
	}
	positionData, hasUpdated := engine.Patch.Position[positionID]
	if !hasUpdated {
		positionData = engine.State.Position[positionID]
	}
	if cachedPosition, ok := engine.forceIncludeAssembleCache.position[positionData.ID]; ok && config.forceInclude {
		return cachedPosition.position, true, cachedPosition.hasUpdated
	}
	if cachedPosition, ok := engine.assembleCache.position[positionData.ID]; ok && !config.forceInclude {
		return cachedPosition.position, cachedPosition.hasUpdated || config.forceInclude, cachedPosition.hasUpdated
	}
	var position Position
	position.ID = positionData.ID
	position.OperationKind = positionData.OperationKind
	position.X = positionData.X
	position.Y = positionData.Y
	if config.forceInclude {
		engine.forceIncludeAssembleCache.position[position.ID] = positionCacheElement{hasUpdated: hasUpdated, position: position}
	} else {
		engine.assembleCache.position[position.ID] = positionCacheElement{hasUpdated: hasUpdated, position: position}
	}
	return position, hasUpdated || config.forceInclude, hasUpdated
}`

const assembleEquipmentSet_Engine_func string = `func (engine *Engine) assembleEquipmentSet(equipmentSetID EquipmentSetID, check *recursionCheck, config assembleConfig) (EquipmentSet, bool, bool) {
	if check != nil {
		if alreadyExists := check.equipmentSet[equipmentSetID]; alreadyExists {
			return EquipmentSet{}, false, false
		} else {
			check.equipmentSet[equipmentSetID] = true
		}
	}
	equipmentSetData, hasUpdated := engine.Patch.EquipmentSet[equipmentSetID]
	if !hasUpdated {
		equipmentSetData = engine.State.EquipmentSet[equipmentSetID]
	}
	if cachedEquipmentSet, ok := engine.forceIncludeAssembleCache.equipmentSet[equipmentSetData.ID]; ok && config.forceInclude {
		return cachedEquipmentSet.equipmentSet, true, cachedEquipmentSet.hasUpdated
	}
	if cachedEquipmentSet, ok := engine.assembleCache.equipmentSet[equipmentSetData.ID]; ok && !config.forceInclude {
		return cachedEquipmentSet.equipmentSet, cachedEquipmentSet.hasUpdated || config.forceInclude, cachedEquipmentSet.hasUpdated
	}
	var equipmentSet EquipmentSet
	for _, equipmentSetEquipmentRefID := range mergeEquipmentSetEquipmentRefIDs(engine.State.EquipmentSet[equipmentSetData.ID].Equipment, engine.Patch.EquipmentSet[equipmentSetData.ID].Equipment) {
		if treeEquipmentSetEquipmentRef, include, childHasUpdated := engine.assembleEquipmentSetEquipmentRef(equipmentSetEquipmentRefID, check, config); include {
			if childHasUpdated {
				hasUpdated = true
			}
			if equipmentSet.Equipment == nil {
				equipmentSet.Equipment = make(map[ItemID]ItemReference)
			}
			equipmentSet.Equipment[treeEquipmentSetEquipmentRef.ElementID] = treeEquipmentSetEquipmentRef
		}
	}
	equipmentSet.ID = equipmentSetData.ID
	equipmentSet.OperationKind = equipmentSetData.OperationKind
	equipmentSet.Name = equipmentSetData.Name
	if config.forceInclude {
		engine.forceIncludeAssembleCache.equipmentSet[equipmentSet.ID] = equipmentSetCacheElement{hasUpdated: hasUpdated, equipmentSet: equipmentSet}
	} else {
		engine.assembleCache.equipmentSet[equipmentSet.ID] = equipmentSetCacheElement{hasUpdated: hasUpdated, equipmentSet: equipmentSet}
	}
	return equipmentSet, hasUpdated || config.forceInclude, hasUpdated
}`

const assembleItem_Engine_func string = `func (engine *Engine) assembleItem(itemID ItemID, check *recursionCheck, config assembleConfig) (Item, bool, bool) {
	if check != nil {
		if alreadyExists := check.item[itemID]; alreadyExists {
			return Item{}, false, false
		} else {
			check.item[itemID] = true
		}
	}
	itemData, hasUpdated := engine.Patch.Item[itemID]
	if !hasUpdated {
		itemData = engine.State.Item[itemID]
	}
	if cachedItem, ok := engine.forceIncludeAssembleCache.item[itemData.ID]; ok && config.forceInclude {
		return cachedItem.item, true, cachedItem.hasUpdated
	}
	if cachedItem, ok := engine.assembleCache.item[itemData.ID]; ok && !config.forceInclude {
		return cachedItem.item, cachedItem.hasUpdated || config.forceInclude, cachedItem.hasUpdated
	}
	var item Item
	if treeItemBoundToRef, include, childHasUpdated := engine.assembleItemBoundToRef(itemID, check, config); include {
		if childHasUpdated {
			hasUpdated = true
		}
		item.BoundTo = treeItemBoundToRef
	}
	if treeGearScore, include, childHasUpdated := engine.assembleGearScore(itemData.GearScore, check, config); include {
		if childHasUpdated {
			hasUpdated = true
		}
		item.GearScore = &treeGearScore
	}
	anyOfPlayer_PositionContainer := engine.anyOfPlayer_Position(itemData.Origin).anyOfPlayer_Position
	if anyOfPlayer_PositionContainer.ElementKind == ElementKindPlayer {
		playerID := anyOfPlayer_PositionContainer.Player
		if treePlayer, include, childHasUpdated := engine.assemblePlayer(playerID, check, config); include {
			if childHasUpdated {
				hasUpdated = true
			}
			item.Origin = &treePlayer
		}
	} else if anyOfPlayer_PositionContainer.ElementKind == ElementKindPosition {
		positionID := anyOfPlayer_PositionContainer.Position
		if treePosition, include, childHasUpdated := engine.assemblePosition(positionID, check, config); include {
			if childHasUpdated {
				hasUpdated = true
			}
			item.Origin = &treePosition
		}
	}
	item.ID = itemData.ID
	item.OperationKind = itemData.OperationKind
	item.Name = itemData.Name
	if config.forceInclude {
		engine.forceIncludeAssembleCache.item[item.ID] = itemCacheElement{hasUpdated: hasUpdated, item: item}
	} else {
		engine.assembleCache.item[item.ID] = itemCacheElement{hasUpdated: hasUpdated, item: item}
	}
	return item, hasUpdated || config.forceInclude, hasUpdated
}`

const assembleZoneItem_Engine_func string = `func (engine *Engine) assembleZoneItem(zoneItemID ZoneItemID, check *recursionCheck, config assembleConfig) (ZoneItem, bool, bool) {
	if check != nil {
		if alreadyExists := check.zoneItem[zoneItemID]; alreadyExists {
			return ZoneItem{}, false, false
		} else {
			check.zoneItem[zoneItemID] = true
		}
	}
	zoneItemData, hasUpdated := engine.Patch.ZoneItem[zoneItemID]
	if !hasUpdated {
		zoneItemData = engine.State.ZoneItem[zoneItemID]
	}
	if cachedZoneItem, ok := engine.forceIncludeAssembleCache.zoneItem[zoneItemData.ID]; ok && config.forceInclude {
		return cachedZoneItem.zoneItem, true, cachedZoneItem.hasUpdated
	}
	if cachedZoneItem, ok := engine.assembleCache.zoneItem[zoneItemData.ID]; ok && !config.forceInclude {
		return cachedZoneItem.zoneItem, cachedZoneItem.hasUpdated || config.forceInclude, cachedZoneItem.hasUpdated
	}
	var zoneItem ZoneItem
	if treeItem, include, childHasUpdated := engine.assembleItem(zoneItemData.Item, check, config); include {
		if childHasUpdated {
			hasUpdated = true
		}
		zoneItem.Item = &treeItem
	}
	if treePosition, include, childHasUpdated := engine.assemblePosition(zoneItemData.Position, check, config); include {
		if childHasUpdated {
			hasUpdated = true
		}
		zoneItem.Position = &treePosition
	}
	zoneItem.ID = zoneItemData.ID
	zoneItem.OperationKind = zoneItemData.OperationKind
	if config.forceInclude {
		engine.forceIncludeAssembleCache.zoneItem[zoneItem.ID] = zoneItemCacheElement{hasUpdated: hasUpdated, zoneItem: zoneItem}
	} else {
		engine.assembleCache.zoneItem[zoneItem.ID] = zoneItemCacheElement{hasUpdated: hasUpdated, zoneItem: zoneItem}
	}
	return zoneItem, hasUpdated || config.forceInclude, hasUpdated
}`

const assemblePlayer_Engine_func string = `func (engine *Engine) assemblePlayer(playerID PlayerID, check *recursionCheck, config assembleConfig) (Player, bool, bool) {
	if check != nil {
		if alreadyExists := check.player[playerID]; alreadyExists {
			return Player{}, false, false
		} else {
			check.player[playerID] = true
		}
	}
	playerData, hasUpdated := engine.Patch.Player[playerID]
	if !hasUpdated {
		playerData = engine.State.Player[playerID]
	}
	if cachedPlayer, ok := engine.forceIncludeAssembleCache.player[playerData.ID]; ok && config.forceInclude {
		return cachedPlayer.player, true, cachedPlayer.hasUpdated
	}
	if cachedPlayer, ok := engine.assembleCache.player[playerData.ID]; ok && !config.forceInclude {
		return cachedPlayer.player, cachedPlayer.hasUpdated || config.forceInclude, cachedPlayer.hasUpdated
	}
	var player Player
	for _, playerEquipmentSetRefID := range mergePlayerEquipmentSetRefIDs(engine.State.Player[playerData.ID].EquipmentSets, engine.Patch.Player[playerData.ID].EquipmentSets) {
		if treePlayerEquipmentSetRef, include, childHasUpdated := engine.assemblePlayerEquipmentSetRef(playerEquipmentSetRefID, check, config); include {
			if childHasUpdated {
				hasUpdated = true
			}
			if player.EquipmentSets == nil {
				player.EquipmentSets = make(map[EquipmentSetID]EquipmentSetReference)
			}
			player.EquipmentSets[treePlayerEquipmentSetRef.ElementID] = treePlayerEquipmentSetRef
		}
	}
	if treeGearScore, include, childHasUpdated := engine.assembleGearScore(playerData.GearScore, check, config); include {
		if childHasUpdated {
			hasUpdated = true
		}
		player.GearScore = &treeGearScore
	}
	for _, playerGuildMemberRefID := range mergePlayerGuildMemberRefIDs(engine.State.Player[playerData.ID].GuildMembers, engine.Patch.Player[playerData.ID].GuildMembers) {
		if treePlayerGuildMemberRef, include, childHasUpdated := engine.assemblePlayerGuildMemberRef(playerGuildMemberRefID, check, config); include {
			if childHasUpdated {
				hasUpdated = true
			}
			if player.GuildMembers == nil {
				player.GuildMembers = make(map[PlayerID]PlayerReference)
			}
			player.GuildMembers[treePlayerGuildMemberRef.ElementID] = treePlayerGuildMemberRef
		}
	}
	for _, itemID := range mergeItemIDs(engine.State.Player[playerData.ID].Items, engine.Patch.Player[playerData.ID].Items) {
		if treeItem, include, childHasUpdated := engine.assembleItem(itemID, check, config); include {
			if childHasUpdated {
				hasUpdated = true
			}
			if player.Items == nil {
				player.Items = make(map[ItemID]Item)
			}
			player.Items[treeItem.ID] = treeItem
		}
	}
	if treePosition, include, childHasUpdated := engine.assemblePosition(playerData.Position, check, config); include {
		if childHasUpdated {
			hasUpdated = true
		}
		player.Position = &treePosition
	}
	if treePlayerTargetRef, include, childHasUpdated := engine.assemblePlayerTargetRef(playerID, check, config); include {
		if childHasUpdated {
			hasUpdated = true
		}
		player.Target = treePlayerTargetRef
	}
	for _, playerTargetedByRefID := range mergePlayerTargetedByRefIDs(engine.State.Player[playerData.ID].TargetedBy, engine.Patch.Player[playerData.ID].TargetedBy) {
		if treePlayerTargetedByRef, include, childHasUpdated := engine.assemblePlayerTargetedByRef(playerTargetedByRefID, check, config); include {
			if childHasUpdated {
				hasUpdated = true
			}
			if player.TargetedBy == nil {
				player.TargetedBy = make(map[int]AnyOfPlayer_ZoneItemReference)
			}
			player.TargetedBy[treePlayerTargetedByRef.ElementID] = treePlayerTargetedByRef
		}
	}
	player.ID = playerData.ID
	player.OperationKind = playerData.OperationKind
	if config.forceInclude {
		engine.forceIncludeAssembleCache.player[player.ID] = playerCacheElement{hasUpdated: hasUpdated, player: player}
	} else {
		engine.assembleCache.player[player.ID] = playerCacheElement{hasUpdated: hasUpdated, player: player}
	}
	return player, hasUpdated || config.forceInclude, hasUpdated
}`

const assembleZone_Engine_func string = `func (engine *Engine) assembleZone(zoneID ZoneID, check *recursionCheck, config assembleConfig) (Zone, bool, bool) {
	if check != nil {
		if alreadyExists := check.zone[zoneID]; alreadyExists {
			return Zone{}, false, false
		} else {
			check.zone[zoneID] = true
		}
	}
	zoneData, hasUpdated := engine.Patch.Zone[zoneID]
	if !hasUpdated {
		zoneData = engine.State.Zone[zoneID]
	}
	if cachedZone, ok := engine.forceIncludeAssembleCache.zone[zoneData.ID]; ok && config.forceInclude {
		return cachedZone.zone, true, cachedZone.hasUpdated
	}
	if cachedZone, ok := engine.assembleCache.zone[zoneData.ID]; ok && !config.forceInclude {
		return cachedZone.zone, cachedZone.hasUpdated || config.forceInclude, cachedZone.hasUpdated
	}
	var zone Zone
	for _, anyOfItem_Player_ZoneItemID := range mergeAnyOfItem_Player_ZoneItemIDs(engine.State.Zone[zoneData.ID].Interactables, engine.Patch.Zone[zoneData.ID].Interactables) {
		anyOfItem_Player_ZoneItemContainer := engine.anyOfItem_Player_ZoneItem(anyOfItem_Player_ZoneItemID).anyOfItem_Player_ZoneItem
		if anyOfItem_Player_ZoneItemContainer.ElementKind == ElementKindItem {
			itemID := anyOfItem_Player_ZoneItemContainer.Item
			if treeItem, include, childHasUpdated := engine.assembleItem(itemID, check, config); include {
				if childHasUpdated {
					hasUpdated = true
				}
				if zone.Interactables == nil {
					zone.Interactables = make(map[int]interface{})
				}
				zone.Interactables[int(treeItem.ID)] = treeItem
			}
		} else if anyOfItem_Player_ZoneItemContainer.ElementKind == ElementKindPlayer {
			playerID := anyOfItem_Player_ZoneItemContainer.Player
			if treePlayer, include, childHasUpdated := engine.assemblePlayer(playerID, check, config); include {
				if childHasUpdated {
					hasUpdated = true
				}
				if zone.Interactables == nil {
					zone.Interactables = make(map[int]interface{})
				}
				zone.Interactables[int(treePlayer.ID)] = treePlayer
			}
		} else if anyOfItem_Player_ZoneItemContainer.ElementKind == ElementKindZoneItem {
			zoneItemID := anyOfItem_Player_ZoneItemContainer.ZoneItem
			if treeZoneItem, include, childHasUpdated := engine.assembleZoneItem(zoneItemID, check, config); include {
				if childHasUpdated {
					hasUpdated = true
				}
				if zone.Interactables == nil {
					zone.Interactables = make(map[int]interface{})
				}
				zone.Interactables[int(treeZoneItem.ID)] = treeZoneItem
			}
		}
	}
	for _, zoneItemID := range mergeZoneItemIDs(engine.State.Zone[zoneData.ID].Items, engine.Patch.Zone[zoneData.ID].Items) {
		if treeZoneItem, include, childHasUpdated := engine.assembleZoneItem(zoneItemID, check, config); include {
			if childHasUpdated {
				hasUpdated = true
			}
			if zone.Items == nil {
				zone.Items = make(map[ZoneItemID]ZoneItem)
			}
			zone.Items[treeZoneItem.ID] = treeZoneItem
		}
	}
	for _, playerID := range mergePlayerIDs(engine.State.Zone[zoneData.ID].Players, engine.Patch.Zone[zoneData.ID].Players) {
		if treePlayer, include, childHasUpdated := engine.assemblePlayer(playerID, check, config); include {
			if childHasUpdated {
				hasUpdated = true
			}
			if zone.Players == nil {
				zone.Players = make(map[PlayerID]Player)
			}
			zone.Players[treePlayer.ID] = treePlayer
		}
	}
	zone.ID = zoneData.ID
	zone.OperationKind = zoneData.OperationKind
	zone.Tags = zoneData.Tags
	if config.forceInclude {
		engine.forceIncludeAssembleCache.zone[zone.ID] = zoneCacheElement{hasUpdated: hasUpdated, zone: zone}
	} else {
		engine.assembleCache.zone[zone.ID] = zoneCacheElement{hasUpdated: hasUpdated, zone: zone}
	}
	return zone, hasUpdated || config.forceInclude, hasUpdated
}`

const assemblePlayerTargetRef_Engine_func string = `func (engine *Engine) assemblePlayerTargetRef(playerID PlayerID, check *recursionCheck, config assembleConfig) (*AnyOfPlayer_ZoneItemReference, bool, bool) {
	statePlayer := engine.State.Player[playerID]
	patchPlayer, playerIsInPatch := engine.Patch.Player[playerID]
	if statePlayer.Target == 0 && (!playerIsInPatch || patchPlayer.Target == 0) {
		return nil, false, false
	}
	if config.forceInclude {
		ref := engine.playerTargetRef(patchPlayer.Target)
		anyContainer := engine.anyOfPlayer_ZoneItem(ref.playerTargetRef.ReferencedElementID)
		if anyContainer.anyOfPlayer_ZoneItem.ElementKind == ElementKindPlayer {
			if check == nil {
				check = newRecursionCheck()
			}
			referencedElement := engine.Player(anyContainer.anyOfPlayer_ZoneItem.Player).player
			referencedDataStatus := ReferencedDataUnchanged
			if _, _, hasUpdatedDownstream := engine.assemblePlayer(referencedElement.ID, check, config); hasUpdatedDownstream {
				referencedDataStatus = ReferencedDataModified
			}
			return &AnyOfPlayer_ZoneItemReference{ref.playerTargetRef.OperationKind, int(referencedElement.ID), ElementKindPlayer, referencedDataStatus, referencedElement.Path, nil}, true, ref.playerTargetRef.OperationKind == OperationKindUpdate || referencedDataStatus == ReferencedDataModified
		} else if anyContainer.anyOfPlayer_ZoneItem.ElementKind == ElementKindZoneItem {
			if check == nil {
				check = newRecursionCheck()
			}
			referencedElement := engine.ZoneItem(anyContainer.anyOfPlayer_ZoneItem.ZoneItem).zoneItem
			referencedDataStatus := ReferencedDataUnchanged
			if _, _, hasUpdatedDownstream := engine.assembleZoneItem(referencedElement.ID, check, config); hasUpdatedDownstream {
				referencedDataStatus = ReferencedDataModified
			}
			return &AnyOfPlayer_ZoneItemReference{ref.playerTargetRef.OperationKind, int(referencedElement.ID), ElementKindZoneItem, referencedDataStatus, referencedElement.Path, nil}, true, ref.playerTargetRef.OperationKind == OperationKindUpdate || referencedDataStatus == ReferencedDataModified
		}
	}
	if statePlayer.Target == 0 && (playerIsInPatch && patchPlayer.Target != 0) {
		config.forceInclude = true
		ref := engine.playerTargetRef(patchPlayer.Target)
		anyContainer := engine.anyOfPlayer_ZoneItem(ref.playerTargetRef.ReferencedElementID)
		if anyContainer.anyOfPlayer_ZoneItem.ElementKind == ElementKindPlayer {
			if check == nil {
				check = newRecursionCheck()
			}
			referencedElement := engine.Player(anyContainer.anyOfPlayer_ZoneItem.Player).player
			referencedDataStatus := ReferencedDataUnchanged
			element, _, hasUpdatedDownstream := engine.assemblePlayer(referencedElement.ID, check, config)
			if hasUpdatedDownstream {
				referencedDataStatus = ReferencedDataModified
			}
			return &AnyOfPlayer_ZoneItemReference{OperationKindUpdate, int(referencedElement.ID), ElementKindPlayer, referencedDataStatus, referencedElement.Path, &element}, true, referencedDataStatus == ReferencedDataModified
		} else if anyContainer.anyOfPlayer_ZoneItem.ElementKind == ElementKindZoneItem {
			if check == nil {
				check = newRecursionCheck()
			}
			referencedElement := engine.ZoneItem(anyContainer.anyOfPlayer_ZoneItem.ZoneItem).zoneItem
			referencedDataStatus := ReferencedDataUnchanged
			element, _, hasUpdatedDownstream := engine.assembleZoneItem(referencedElement.ID, check, config)
			if hasUpdatedDownstream {
				referencedDataStatus = ReferencedDataModified
			}
			return &AnyOfPlayer_ZoneItemReference{OperationKindUpdate, int(referencedElement.ID), ElementKindZoneItem, referencedDataStatus, referencedElement.Path, &element}, true, referencedDataStatus == ReferencedDataModified
		}
	}
	if statePlayer.Target != 0 && (playerIsInPatch && patchPlayer.Target == 0) {
		ref := engine.playerTargetRef(statePlayer.Target)
		anyContainer := engine.anyOfPlayer_ZoneItem(ref.playerTargetRef.ReferencedElementID)
		if anyContainer.anyOfPlayer_ZoneItem.ElementKind == ElementKindPlayer {
			if check == nil {
				check = newRecursionCheck()
			}
			referencedElement := engine.Player(anyContainer.anyOfPlayer_ZoneItem.Player).player
			referencedDataStatus := ReferencedDataUnchanged
			if _, _, hasUpdatedDownstream := engine.assemblePlayer(referencedElement.ID, check, config); hasUpdatedDownstream {
				referencedDataStatus = ReferencedDataModified
			}
			return &AnyOfPlayer_ZoneItemReference{OperationKindDelete, int(referencedElement.ID), ElementKindPlayer, referencedDataStatus, referencedElement.Path, nil}, true, referencedDataStatus == ReferencedDataModified
		} else if anyContainer.anyOfPlayer_ZoneItem.ElementKind == ElementKindZoneItem {
			if check == nil {
				check = newRecursionCheck()
			}
			referencedElement := engine.ZoneItem(anyContainer.anyOfPlayer_ZoneItem.ZoneItem).zoneItem
			referencedDataStatus := ReferencedDataUnchanged
			if _, _, hasUpdatedDownstream := engine.assembleZoneItem(referencedElement.ID, check, config); hasUpdatedDownstream {
				referencedDataStatus = ReferencedDataModified
			}
			return &AnyOfPlayer_ZoneItemReference{OperationKindDelete, int(referencedElement.ID), ElementKindZoneItem, referencedDataStatus, referencedElement.Path, nil}, true, referencedDataStatus == ReferencedDataModified
		}
	}
	if statePlayer.Target != 0 && (playerIsInPatch && patchPlayer.Target != 0) {
		if statePlayer.Target != patchPlayer.Target {
			config.forceInclude = true
			ref := engine.playerTargetRef(patchPlayer.Target)
			anyContainer := engine.anyOfPlayer_ZoneItem(ref.playerTargetRef.ReferencedElementID)
			if anyContainer.anyOfPlayer_ZoneItem.ElementKind == ElementKindPlayer {
				if check == nil {
					check = newRecursionCheck()
				}
				referencedElement := engine.Player(anyContainer.anyOfPlayer_ZoneItem.Player).player
				referencedDataStatus := ReferencedDataUnchanged
				element, _, hasUpdatedDownstream := engine.assemblePlayer(referencedElement.ID, check, config)
				if hasUpdatedDownstream {
					referencedDataStatus = ReferencedDataModified
				}
				return &AnyOfPlayer_ZoneItemReference{OperationKindUpdate, int(referencedElement.ID), ElementKindPlayer, referencedDataStatus, referencedElement.Path, &element}, true, referencedDataStatus == ReferencedDataModified
			} else if anyContainer.anyOfPlayer_ZoneItem.ElementKind == ElementKindZoneItem {
				if check == nil {
					check = newRecursionCheck()
				}
				referencedElement := engine.ZoneItem(anyContainer.anyOfPlayer_ZoneItem.ZoneItem).zoneItem
				referencedDataStatus := ReferencedDataUnchanged
				element, _, hasUpdatedDownstream := engine.assembleZoneItem(referencedElement.ID, check, config)
				if hasUpdatedDownstream {
					referencedDataStatus = ReferencedDataModified
				}
				return &AnyOfPlayer_ZoneItemReference{OperationKindUpdate, int(referencedElement.ID), ElementKindZoneItem, referencedDataStatus, referencedElement.Path, &element}, true, referencedDataStatus == ReferencedDataModified
			}
		}
	}
	if statePlayer.Target != 0 {
		ref := engine.playerTargetRef(statePlayer.Target)
		anyContainer := engine.anyOfPlayer_ZoneItem(ref.playerTargetRef.ReferencedElementID)
		if anyContainer.anyOfPlayer_ZoneItem.ElementKind == ElementKindPlayer {
			if check == nil {
				check = newRecursionCheck()
			}
			referencedElement := engine.Player(anyContainer.anyOfPlayer_ZoneItem.Player).player
			if _, _, hasUpdatedDownstream := engine.assemblePlayer(anyContainer.anyOfPlayer_ZoneItem.Player, check, config); hasUpdatedDownstream {
				return &AnyOfPlayer_ZoneItemReference{OperationKindUnchanged, int(anyContainer.anyOfPlayer_ZoneItem.Player), ElementKindPlayer, ReferencedDataModified, referencedElement.Path, nil}, true, true
			}
		} else if anyContainer.anyOfPlayer_ZoneItem.ElementKind == ElementKindZoneItem {
			if check == nil {
				check = newRecursionCheck()
			}
			referencedElement := engine.ZoneItem(anyContainer.anyOfPlayer_ZoneItem.ZoneItem).zoneItem
			if _, _, hasUpdatedDownstream := engine.assembleZoneItem(anyContainer.anyOfPlayer_ZoneItem.ZoneItem, check, config); hasUpdatedDownstream {
				return &AnyOfPlayer_ZoneItemReference{OperationKindUnchanged, int(anyContainer.anyOfPlayer_ZoneItem.ZoneItem), ElementKindZoneItem, ReferencedDataModified, referencedElement.Path, nil}, true, true
			}
		}
	}
	return nil, false, false
}`

const assembleItemBoundToRef_Engine_func string = `func (engine *Engine) assembleItemBoundToRef(itemID ItemID, check *recursionCheck, config assembleConfig) (*PlayerReference, bool, bool) {
	stateItem := engine.State.Item[itemID]
	patchItem, itemIsInPatch := engine.Patch.Item[itemID]
	if stateItem.BoundTo == 0 && (!itemIsInPatch || patchItem.BoundTo == 0) {
		return nil, false, false
	}
	if config.forceInclude {
		ref := engine.itemBoundToRef(patchItem.BoundTo)
		if check == nil {
			check = newRecursionCheck()
		}
		referencedElement := engine.Player(ref.itemBoundToRef.ReferencedElementID).player
		referencedDataStatus := ReferencedDataUnchanged
		if _, _, hasUpdatedDownstream := engine.assemblePlayer(referencedElement.ID, check, config); hasUpdatedDownstream {
			referencedDataStatus = ReferencedDataModified
		}
		return &PlayerReference{ref.itemBoundToRef.OperationKind, referencedElement.ID, ElementKindPlayer, referencedDataStatus, referencedElement.Path, nil}, true, ref.itemBoundToRef.OperationKind == OperationKindUpdate || referencedDataStatus == ReferencedDataModified
	}
	if stateItem.BoundTo == 0 && (itemIsInPatch && patchItem.BoundTo != 0) {
		config.forceInclude = true
		ref := engine.itemBoundToRef(patchItem.BoundTo)
		if check == nil {
			check = newRecursionCheck()
		}
		referencedElement := engine.Player(ref.itemBoundToRef.ReferencedElementID).player
		referencedDataStatus := ReferencedDataUnchanged
		element, _, hasUpdatedDownstream := engine.assemblePlayer(referencedElement.ID, check, config)
		if hasUpdatedDownstream {
			referencedDataStatus = ReferencedDataModified
		}
		return &PlayerReference{OperationKindUpdate, referencedElement.ID, ElementKindPlayer, referencedDataStatus, referencedElement.Path, &element}, true, referencedDataStatus == ReferencedDataModified
	}
	if stateItem.BoundTo != 0 && (itemIsInPatch && patchItem.BoundTo == 0) {
		ref := engine.itemBoundToRef(stateItem.BoundTo)
		if check == nil {
			check = newRecursionCheck()
		}
		referencedElement := engine.Player(ref.itemBoundToRef.ReferencedElementID).player
		referencedDataStatus := ReferencedDataUnchanged
		if _, _, hasUpdatedDownstream := engine.assemblePlayer(referencedElement.ID, check, config); hasUpdatedDownstream {
			referencedDataStatus = ReferencedDataModified
		}
		return &PlayerReference{OperationKindDelete, referencedElement.ID, ElementKindPlayer, referencedDataStatus, referencedElement.Path, nil}, true, referencedDataStatus == ReferencedDataModified
	}
	if stateItem.BoundTo != 0 && (itemIsInPatch && patchItem.BoundTo != 0) {
		if stateItem.BoundTo != patchItem.BoundTo {
			config.forceInclude = true
			ref := engine.itemBoundToRef(patchItem.BoundTo)
			if check == nil {
				check = newRecursionCheck()
			}
			referencedElement := engine.Player(ref.itemBoundToRef.ReferencedElementID).player
			referencedDataStatus := ReferencedDataUnchanged
			element, _, hasUpdatedDownstream := engine.assemblePlayer(referencedElement.ID, check, config)
			if hasUpdatedDownstream {
				referencedDataStatus = ReferencedDataModified
			}
			return &PlayerReference{OperationKindUpdate, referencedElement.ID, ElementKindPlayer, referencedDataStatus, referencedElement.Path, &element}, true, referencedDataStatus == ReferencedDataModified
		}
	}
	if stateItem.BoundTo != 0 {
		ref := engine.itemBoundToRef(stateItem.BoundTo)
		if check == nil {
			check = newRecursionCheck()
		}
		referencedElement := engine.Player(ref.itemBoundToRef.ReferencedElementID).player
		if _, _, hasUpdatedDownstream := engine.assemblePlayer(ref.ID(), check, config); hasUpdatedDownstream {
			return &PlayerReference{OperationKindUnchanged, ref.ID(), ElementKindPlayer, ReferencedDataModified, referencedElement.Path, nil}, true, true
		}
	}
	return nil, false, false
}`

const assemblePlayerTargetedByRef_Engine_func string = `func (engine *Engine) assemblePlayerTargetedByRef(refID PlayerTargetedByRefID, check *recursionCheck, config assembleConfig) (AnyOfPlayer_ZoneItemReference, bool, bool) {
	if config.forceInclude {
		ref := engine.playerTargetedByRef(refID).playerTargetedByRef
		anyContainer := engine.anyOfPlayer_ZoneItem(ref.ReferencedElementID)
		if anyContainer.anyOfPlayer_ZoneItem.ElementKind == ElementKindPlayer {
			if check == nil {
				check = newRecursionCheck()
			}
			referencedElement := engine.Player(anyContainer.anyOfPlayer_ZoneItem.Player).player
			referencedDataStatus := ReferencedDataUnchanged
			if _, _, hasUpdatedDownstream := engine.assemblePlayer(referencedElement.ID, check, config); hasUpdatedDownstream {
				referencedDataStatus = ReferencedDataModified
			}
			return AnyOfPlayer_ZoneItemReference{ref.OperationKind, int(referencedElement.ID), ElementKindPlayer, referencedDataStatus, referencedElement.Path, nil}, true, ref.OperationKind == OperationKindUpdate || referencedDataStatus == ReferencedDataModified
		} else if anyContainer.anyOfPlayer_ZoneItem.ElementKind == ElementKindZoneItem {
			if check == nil {
				check = newRecursionCheck()
			}
			referencedElement := engine.ZoneItem(anyContainer.anyOfPlayer_ZoneItem.ZoneItem).zoneItem
			referencedDataStatus := ReferencedDataUnchanged
			if _, _, hasUpdatedDownstream := engine.assembleZoneItem(referencedElement.ID, check, config); hasUpdatedDownstream {
				referencedDataStatus = ReferencedDataModified
			}
			return AnyOfPlayer_ZoneItemReference{ref.OperationKind, int(referencedElement.ID), ElementKindZoneItem, referencedDataStatus, referencedElement.Path, nil}, true, ref.OperationKind == OperationKindUpdate || referencedDataStatus == ReferencedDataModified
		}
	}
	if patchRef, hasUpdated := engine.Patch.PlayerTargetedByRef[refID]; hasUpdated {
		if patchRef.OperationKind == OperationKindUpdate {
			config.forceInclude = true
		}
		anyContainer := engine.anyOfPlayer_ZoneItem(patchRef.ReferencedElementID)
		if anyContainer.anyOfPlayer_ZoneItem.ElementKind == ElementKindPlayer {
			if check == nil {
				check = newRecursionCheck()
			}
			referencedElement := engine.Player(anyContainer.anyOfPlayer_ZoneItem.Player).player
			element, _, hasUpdatedDownstream := engine.assemblePlayer(referencedElement.ID, check, config)
			referencedDataStatus := ReferencedDataUnchanged
			if hasUpdatedDownstream {
				referencedDataStatus = ReferencedDataModified
			}
			var el *Player
			if patchRef.OperationKind == OperationKindUpdate {
				el = &element
			}
			return AnyOfPlayer_ZoneItemReference{patchRef.OperationKind, int(referencedElement.ID), ElementKindPlayer, referencedDataStatus, referencedElement.Path, el}, true, patchRef.OperationKind == OperationKindUpdate || referencedDataStatus == ReferencedDataModified
		} else if anyContainer.anyOfPlayer_ZoneItem.ElementKind == ElementKindZoneItem {
			if check == nil {
				check = newRecursionCheck()
			}
			referencedElement := engine.ZoneItem(anyContainer.anyOfPlayer_ZoneItem.ZoneItem).zoneItem
			element, _, hasUpdatedDownstream := engine.assembleZoneItem(referencedElement.ID, check, config)
			referencedDataStatus := ReferencedDataUnchanged
			if hasUpdatedDownstream {
				referencedDataStatus = ReferencedDataModified
			}
			var el *ZoneItem
			if patchRef.OperationKind == OperationKindUpdate {
				el = &element
			}
			return AnyOfPlayer_ZoneItemReference{patchRef.OperationKind, int(referencedElement.ID), ElementKindZoneItem, referencedDataStatus, referencedElement.Path, el}, true, patchRef.OperationKind == OperationKindUpdate || referencedDataStatus == ReferencedDataModified
		}
	}
	ref := engine.playerTargetedByRef(refID).playerTargetedByRef
	if check == nil {
		check = newRecursionCheck()
	}
	anyContainer := engine.anyOfPlayer_ZoneItem(ref.ReferencedElementID)
	if anyContainer.anyOfPlayer_ZoneItem.ElementKind == ElementKindPlayer {
		referencedElement := engine.Player(anyContainer.anyOfPlayer_ZoneItem.Player).player
		if _, _, hasUpdatedDownstream := engine.assemblePlayer(anyContainer.anyOfPlayer_ZoneItem.Player, check, config); hasUpdatedDownstream {
			return AnyOfPlayer_ZoneItemReference{OperationKindUnchanged, int(anyContainer.anyOfPlayer_ZoneItem.Player), ElementKindPlayer, ReferencedDataModified, referencedElement.Path, nil}, true, true
		}
	} else if anyContainer.anyOfPlayer_ZoneItem.ElementKind == ElementKindZoneItem {
		referencedElement := engine.ZoneItem(anyContainer.anyOfPlayer_ZoneItem.ZoneItem).zoneItem
		if _, _, hasUpdatedDownstream := engine.assembleZoneItem(anyContainer.anyOfPlayer_ZoneItem.ZoneItem, check, config); hasUpdatedDownstream {
			return AnyOfPlayer_ZoneItemReference{OperationKindUnchanged, int(anyContainer.anyOfPlayer_ZoneItem.ZoneItem), ElementKindZoneItem, ReferencedDataModified, referencedElement.Path, nil}, true, true
		}
	}
	return AnyOfPlayer_ZoneItemReference{}, false, false
}`

const assemblePlayerGuildMemberRef_Engine_func string = `func (engine *Engine) assemblePlayerGuildMemberRef(refID PlayerGuildMemberRefID, check *recursionCheck, config assembleConfig) (PlayerReference, bool, bool) {
	if config.forceInclude {
		ref := engine.playerGuildMemberRef(refID).playerGuildMemberRef
		if check == nil {
			check = newRecursionCheck()
		}
		referencedElement := engine.Player(ref.ReferencedElementID).player
		referencedDataStatus := ReferencedDataUnchanged
		if _, _, hasUpdatedDownstream := engine.assemblePlayer(referencedElement.ID, check, config); hasUpdatedDownstream {
			referencedDataStatus = ReferencedDataModified
		}
		return PlayerReference{ref.OperationKind, ref.ReferencedElementID, ElementKindPlayer, referencedDataStatus, referencedElement.Path, nil}, true, ref.OperationKind == OperationKindUpdate || referencedDataStatus == ReferencedDataModified
	}
	if patchRef, hasUpdated := engine.Patch.PlayerGuildMemberRef[refID]; hasUpdated {
		if patchRef.OperationKind == OperationKindUpdate {
			config.forceInclude = true
		}
		if check == nil {
			check = newRecursionCheck()
		}
		referencedElement := engine.Player(patchRef.ReferencedElementID).player
		element, _, hasUpdatedDownstream := engine.assemblePlayer(referencedElement.ID, check, config)
		referencedDataStatus := ReferencedDataUnchanged
		if hasUpdatedDownstream {
			referencedDataStatus = ReferencedDataModified
		}
		var el *Player
		if patchRef.OperationKind == OperationKindUpdate {
			el = &element
		}
		return PlayerReference{patchRef.OperationKind, patchRef.ReferencedElementID, ElementKindPlayer, referencedDataStatus, referencedElement.Path, el}, true, patchRef.OperationKind == OperationKindUpdate || referencedDataStatus == ReferencedDataModified
	}
	ref := engine.playerGuildMemberRef(refID).playerGuildMemberRef
	if check == nil {
		check = newRecursionCheck()
	}
	referencedElement := engine.Player(ref.ReferencedElementID).player
	if _, _, hasUpdatedDownstream := engine.assemblePlayer(ref.ReferencedElementID, check, config); hasUpdatedDownstream {
		return PlayerReference{OperationKindUnchanged, ref.ReferencedElementID, ElementKindPlayer, ReferencedDataModified, referencedElement.Path, nil}, true, true
	}
	return PlayerReference{}, false, false
}`

const assemblePlayerEquipmentSetRef_Engine_func string = `func (engine *Engine) assemblePlayerEquipmentSetRef(refID PlayerEquipmentSetRefID, check *recursionCheck, config assembleConfig) (EquipmentSetReference, bool, bool) {
	if config.forceInclude {
		ref := engine.playerEquipmentSetRef(refID).playerEquipmentSetRef
		if check == nil {
			check = newRecursionCheck()
		}
		referencedElement := engine.EquipmentSet(ref.ReferencedElementID).equipmentSet
		referencedDataStatus := ReferencedDataUnchanged
		if _, _, hasUpdatedDownstream := engine.assembleEquipmentSet(referencedElement.ID, check, config); hasUpdatedDownstream {
			referencedDataStatus = ReferencedDataModified
		}
		return EquipmentSetReference{ref.OperationKind, ref.ReferencedElementID, ElementKindEquipmentSet, referencedDataStatus, referencedElement.Path, nil}, true, ref.OperationKind == OperationKindUpdate || referencedDataStatus == ReferencedDataModified
	}
	if patchRef, hasUpdated := engine.Patch.PlayerEquipmentSetRef[refID]; hasUpdated {
		if patchRef.OperationKind == OperationKindUpdate {
			config.forceInclude = true
		}
		if check == nil {
			check = newRecursionCheck()
		}
		referencedElement := engine.EquipmentSet(patchRef.ReferencedElementID).equipmentSet
		element, _, hasUpdatedDownstream := engine.assembleEquipmentSet(referencedElement.ID, check, config)
		referencedDataStatus := ReferencedDataUnchanged
		if hasUpdatedDownstream {
			referencedDataStatus = ReferencedDataModified
		}
		var el *EquipmentSet
		if patchRef.OperationKind == OperationKindUpdate {
			el = &element
		}
		return EquipmentSetReference{patchRef.OperationKind, patchRef.ReferencedElementID, ElementKindEquipmentSet, referencedDataStatus, referencedElement.Path, el}, true, patchRef.OperationKind == OperationKindUpdate || referencedDataStatus == ReferencedDataModified
	}
	ref := engine.playerEquipmentSetRef(refID).playerEquipmentSetRef
	if check == nil {
		check = newRecursionCheck()
	}
	referencedElement := engine.EquipmentSet(ref.ReferencedElementID).equipmentSet
	if _, _, hasUpdatedDownstream := engine.assembleEquipmentSet(ref.ReferencedElementID, check, config); hasUpdatedDownstream {
		return EquipmentSetReference{OperationKindUnchanged, ref.ReferencedElementID, ElementKindEquipmentSet, ReferencedDataModified, referencedElement.Path, nil}, true, true
	}
	return EquipmentSetReference{}, false, false
}`

const assembleEquipmentSetEquipmentRef_Engine_func string = `func (engine *Engine) assembleEquipmentSetEquipmentRef(refID EquipmentSetEquipmentRefID, check *recursionCheck, config assembleConfig) (ItemReference, bool, bool) {
	if config.forceInclude {
		ref := engine.equipmentSetEquipmentRef(refID).equipmentSetEquipmentRef
		if check == nil {
			check = newRecursionCheck()
		}
		referencedElement := engine.Item(ref.ReferencedElementID).item
		referencedDataStatus := ReferencedDataUnchanged
		if _, _, hasUpdatedDownstream := engine.assembleItem(referencedElement.ID, check, config); hasUpdatedDownstream {
			referencedDataStatus = ReferencedDataModified
		}
		return ItemReference{ref.OperationKind, ref.ReferencedElementID, ElementKindItem, referencedDataStatus, referencedElement.Path, nil}, true, ref.OperationKind == OperationKindUpdate || referencedDataStatus == ReferencedDataModified
	}
	if patchRef, hasUpdated := engine.Patch.EquipmentSetEquipmentRef[refID]; hasUpdated {
		if patchRef.OperationKind == OperationKindUpdate {
			config.forceInclude = true
		}
		if check == nil {
			check = newRecursionCheck()
		}
		referencedElement := engine.Item(patchRef.ReferencedElementID).item
		element, _, hasUpdatedDownstream := engine.assembleItem(referencedElement.ID, check, config)
		referencedDataStatus := ReferencedDataUnchanged
		if hasUpdatedDownstream {
			referencedDataStatus = ReferencedDataModified
		}
		var el *Item
		if patchRef.OperationKind == OperationKindUpdate {
			el = &element
		}
		return ItemReference{patchRef.OperationKind, patchRef.ReferencedElementID, ElementKindItem, referencedDataStatus, referencedElement.Path, el}, true, patchRef.OperationKind == OperationKindUpdate || referencedDataStatus == ReferencedDataModified
	}
	ref := engine.equipmentSetEquipmentRef(refID).equipmentSetEquipmentRef
	if check == nil {
		check = newRecursionCheck()
	}
	referencedElement := engine.Item(ref.ReferencedElementID).item
	if _, _, hasUpdatedDownstream := engine.assembleItem(ref.ReferencedElementID, check, config); hasUpdatedDownstream {
		return ItemReference{OperationKindUnchanged, ref.ReferencedElementID, ElementKindItem, ReferencedDataModified, referencedElement.Path, nil}, true, true
	}
	return ItemReference{}, false, false
}`

const assembleTree_Engine_func string = `func (engine *Engine) assembleTree(assembleEntireTree bool) Tree {
	for key := range engine.assembleCache.equipmentSet {
		delete(engine.assembleCache.equipmentSet, key)
	}
	for key := range engine.assembleCache.gearScore {
		delete(engine.assembleCache.gearScore, key)
	}
	for key := range engine.assembleCache.item {
		delete(engine.assembleCache.item, key)
	}
	for key := range engine.assembleCache.player {
		delete(engine.assembleCache.player, key)
	}
	for key := range engine.assembleCache.position {
		delete(engine.assembleCache.position, key)
	}
	for key := range engine.assembleCache.zone {
		delete(engine.assembleCache.zone, key)
	}
	for key := range engine.assembleCache.zoneItem {
		delete(engine.assembleCache.zoneItem, key)
	}
	for key := range engine.forceIncludeAssembleCache.equipmentSet {
		delete(engine.forceIncludeAssembleCache.equipmentSet, key)
	}
	for key := range engine.forceIncludeAssembleCache.gearScore {
		delete(engine.forceIncludeAssembleCache.gearScore, key)
	}
	for key := range engine.forceIncludeAssembleCache.item {
		delete(engine.forceIncludeAssembleCache.item, key)
	}
	for key := range engine.forceIncludeAssembleCache.player {
		delete(engine.forceIncludeAssembleCache.player, key)
	}
	for key := range engine.forceIncludeAssembleCache.position {
		delete(engine.forceIncludeAssembleCache.position, key)
	}
	for key := range engine.forceIncludeAssembleCache.zone {
		delete(engine.forceIncludeAssembleCache.zone, key)
	}
	for key := range engine.forceIncludeAssembleCache.zoneItem {
		delete(engine.forceIncludeAssembleCache.zoneItem, key)
	}
	for key := range engine.Tree.EquipmentSet {
		delete(engine.Tree.EquipmentSet, key)
	}
	for key := range engine.Tree.GearScore {
		delete(engine.Tree.GearScore, key)
	}
	for key := range engine.Tree.Item {
		delete(engine.Tree.Item, key)
	}
	for key := range engine.Tree.Player {
		delete(engine.Tree.Player, key)
	}
	for key := range engine.Tree.Position {
		delete(engine.Tree.Position, key)
	}
	for key := range engine.Tree.Zone {
		delete(engine.Tree.Zone, key)
	}
	for key := range engine.Tree.ZoneItem {
		delete(engine.Tree.ZoneItem, key)
	}
	config := assembleConfig{forceInclude: assembleEntireTree}
	for _, equipmentSetData := range engine.Patch.EquipmentSet {
		if !equipmentSetData.HasParent {
			equipmentSet, include, _ := engine.assembleEquipmentSet(equipmentSetData.ID, nil, config)
			if include {
				engine.Tree.EquipmentSet[equipmentSetData.ID] = equipmentSet
			}
		}
	}
	for _, gearScoreData := range engine.Patch.GearScore {
		if !gearScoreData.HasParent {
			gearScore, include, _ := engine.assembleGearScore(gearScoreData.ID, nil, config)
			if include {
				engine.Tree.GearScore[gearScoreData.ID] = gearScore
			}
		}
	}
	for _, itemData := range engine.Patch.Item {
		if !itemData.HasParent {
			item, include, _ := engine.assembleItem(itemData.ID, nil, config)
			if include {
				engine.Tree.Item[itemData.ID] = item
			}
		}
	}
	for _, playerData := range engine.Patch.Player {
		if !playerData.HasParent {
			player, include, _ := engine.assemblePlayer(playerData.ID, nil, config)
			if include {
				engine.Tree.Player[playerData.ID] = player
			}
		}
	}
	for _, positionData := range engine.Patch.Position {
		if !positionData.HasParent {
			position, include, _ := engine.assemblePosition(positionData.ID, nil, config)
			if include {
				engine.Tree.Position[positionData.ID] = position
			}
		}
	}
	for _, zoneData := range engine.Patch.Zone {
		if !zoneData.HasParent {
			zone, include, _ := engine.assembleZone(zoneData.ID, nil, config)
			if include {
				engine.Tree.Zone[zoneData.ID] = zone
			}
		}
	}
	for _, zoneItemData := range engine.Patch.ZoneItem {
		if !zoneItemData.HasParent {
			zoneItem, include, _ := engine.assembleZoneItem(zoneItemData.ID, nil, config)
			if include {
				engine.Tree.ZoneItem[zoneItemData.ID] = zoneItem
			}
		}
	}
	for _, equipmentSetData := range engine.State.EquipmentSet {
		if !equipmentSetData.HasParent {
			if _, ok := engine.Tree.EquipmentSet[equipmentSetData.ID]; !ok {
				equipmentSet, include, _ := engine.assembleEquipmentSet(equipmentSetData.ID, nil, config)
				if include {
					engine.Tree.EquipmentSet[equipmentSetData.ID] = equipmentSet
				}
			}
		}
	}
	for _, gearScoreData := range engine.State.GearScore {
		if !gearScoreData.HasParent {
			if _, ok := engine.Tree.GearScore[gearScoreData.ID]; !ok {
				gearScore, include, _ := engine.assembleGearScore(gearScoreData.ID, nil, config)
				if include {
					engine.Tree.GearScore[gearScoreData.ID] = gearScore
				}
			}
		}
	}
	for _, itemData := range engine.State.Item {
		if !itemData.HasParent {
			if _, ok := engine.Tree.Item[itemData.ID]; !ok {
				item, include, _ := engine.assembleItem(itemData.ID, nil, config)
				if include {
					engine.Tree.Item[itemData.ID] = item
				}
			}
		}
	}
	for _, playerData := range engine.State.Player {
		if !playerData.HasParent {
			if _, ok := engine.Tree.Player[playerData.ID]; !ok {
				player, include, _ := engine.assemblePlayer(playerData.ID, nil, config)
				if include {
					engine.Tree.Player[playerData.ID] = player
				}
			}
		}
	}
	for _, positionData := range engine.State.Position {
		if !positionData.HasParent {
			if _, ok := engine.Tree.Position[positionData.ID]; !ok {
				position, include, _ := engine.assemblePosition(positionData.ID, nil, config)
				if include {
					engine.Tree.Position[positionData.ID] = position
				}
			}
		}
	}
	for _, zoneData := range engine.State.Zone {
		if !zoneData.HasParent {
			if _, ok := engine.Tree.Zone[zoneData.ID]; !ok {
				zone, include, _ := engine.assembleZone(zoneData.ID, nil, config)
				if include {
					engine.Tree.Zone[zoneData.ID] = zone
				}
			}
		}
	}
	for _, zoneItemData := range engine.State.ZoneItem {
		if !zoneItemData.HasParent {
			if _, ok := engine.Tree.ZoneItem[zoneItemData.ID]; !ok {
				zoneItem, include, _ := engine.assembleZoneItem(zoneItemData.ID, nil, config)
				if include {
					engine.Tree.ZoneItem[zoneItemData.ID] = zoneItem
				}
			}
		}
	}
	return engine.Tree
}`

const _CreateEquipmentSet_Engine_func string = `func (engine *Engine) CreateEquipmentSet() equipmentSet {
	return engine.createEquipmentSet(newPath(equipmentSetIdentifier), true)
}`

const createEquipmentSet_Engine_func string = `func (engine *Engine) createEquipmentSet(p path, extendWithID bool) equipmentSet {
	var element equipmentSetCore
	element.engine = engine
	element.ID = EquipmentSetID(engine.GenerateID())
	element.OperationKind = OperationKindUpdate
	element.HasParent = len(p) > 1
	element.path = p
	if extendWithID {
		element.path = element.path.id(int(element.ID))
	}
	element.Path = element.path.toJSONPath()
	engine.Patch.EquipmentSet[element.ID] = element
	return equipmentSet{equipmentSet: element}
}`

const _CreateGearScore_Engine_func string = `func (engine *Engine) CreateGearScore() gearScore {
	return engine.createGearScore(newPath(gearScoreIdentifier), true)
}`

const createGearScore_Engine_func string = `func (engine *Engine) createGearScore(p path, extendWithID bool) gearScore {
	var element gearScoreCore
	element.engine = engine
	element.ID = GearScoreID(engine.GenerateID())
	element.OperationKind = OperationKindUpdate
	element.HasParent = len(p) > 1
	element.path = p
	if extendWithID {
		element.path = element.path.id(int(element.ID))
	}
	element.Path = element.path.toJSONPath()
	engine.Patch.GearScore[element.ID] = element
	return gearScore{gearScore: element}
}`

const _CreatePosition_Engine_func string = `func (engine *Engine) CreatePosition() position {
	return engine.createPosition(newPath(positionIdentifier), true)
}`

const createPosition_Engine_func string = `func (engine *Engine) createPosition(p path, extendWithID bool) position {
	var element positionCore
	element.engine = engine
	element.ID = PositionID(engine.GenerateID())
	element.OperationKind = OperationKindUpdate
	element.HasParent = len(p) > 1
	element.path = p
	if extendWithID {
		element.path = element.path.id(int(element.ID))
	}
	element.Path = element.path.toJSONPath()
	engine.Patch.Position[element.ID] = element
	return position{position: element}
}`

const _CreateItem_Engine_func string = `func (engine *Engine) CreateItem() item {
	return engine.createItem(newPath(itemIdentifier), true)
}`

const createItem_Engine_func string = `func (engine *Engine) createItem(p path, extendWithID bool) item {
	var element itemCore
	element.engine = engine
	element.ID = ItemID(engine.GenerateID())
	elementGearScore := engine.createGearScore(p.gearScore(), false)
	element.GearScore = elementGearScore.gearScore.ID
	elementOrigin := engine.createAnyOfPlayer_Position(true, p.origin())
	element.Origin = elementOrigin.anyOfPlayer_Position.ID
	element.OperationKind = OperationKindUpdate
	element.HasParent = len(p) > 1
	element.path = p
	if extendWithID {
		element.path = element.path.id(int(element.ID))
	}
	element.Path = element.path.toJSONPath()
	engine.Patch.Item[element.ID] = element
	return item{item: element}
}`

const _CreateZoneItem_Engine_func string = `func (engine *Engine) CreateZoneItem() zoneItem {
	return engine.createZoneItem(newPath(zoneItemIdentifier), true)
}`

const createZoneItem_Engine_func string = `func (engine *Engine) createZoneItem(p path, extendWithID bool) zoneItem {
	var element zoneItemCore
	element.engine = engine
	element.ID = ZoneItemID(engine.GenerateID())
	elementItem := engine.createItem(p.item(), false)
	element.Item = elementItem.item.ID
	elementPosition := engine.createPosition(p.position(), false)
	element.Position = elementPosition.position.ID
	element.OperationKind = OperationKindUpdate
	element.HasParent = len(p) > 1
	element.path = p
	if extendWithID {
		element.path = element.path.id(int(element.ID))
	}
	element.Path = element.path.toJSONPath()
	engine.Patch.ZoneItem[element.ID] = element
	return zoneItem{zoneItem: element}
}`

const _CreatePlayer_Engine_func string = `func (engine *Engine) CreatePlayer() player {
	return engine.createPlayer(newPath(playerIdentifier), true)
}`

const createPlayer_Engine_func string = `func (engine *Engine) createPlayer(p path, extendWithID bool) player {
	var element playerCore
	element.engine = engine
	element.ID = PlayerID(engine.GenerateID())
	elementGearScore := engine.createGearScore(p.gearScore(), false)
	element.GearScore = elementGearScore.gearScore.ID
	elementPosition := engine.createPosition(p.position(), false)
	element.Position = elementPosition.position.ID
	element.OperationKind = OperationKindUpdate
	element.HasParent = len(p) > 1
	element.path = p
	if extendWithID {
		element.path = element.path.id(int(element.ID))
	}
	element.Path = element.path.toJSONPath()
	engine.Patch.Player[element.ID] = element
	return player{player: element}
}`

const _CreateZone_Engine_func string = `func (engine *Engine) CreateZone() zone {
	return engine.createZone(newPath(zoneIdentifier), true)
}`

const createZone_Engine_func string = `func (engine *Engine) createZone(p path, extendWithID bool) zone {
	var element zoneCore
	element.engine = engine
	element.ID = ZoneID(engine.GenerateID())
	element.OperationKind = OperationKindUpdate
	element.HasParent = len(p) > 1
	element.path = p
	if extendWithID {
		element.path = element.path.id(int(element.ID))
	}
	element.Path = element.path.toJSONPath()
	engine.Patch.Zone[element.ID] = element
	return zone{zone: element}
}`

const createItemBoundToRef_Engine_func string = `func (engine *Engine) createItemBoundToRef(referencedElementID PlayerID, parentID ItemID) itemBoundToRefCore {
	var element itemBoundToRefCore
	element.engine = engine
	element.ReferencedElementID = referencedElementID
	element.ParentID = parentID
	element.ID = ItemBoundToRefID(engine.GenerateID())
	element.OperationKind = OperationKindUpdate
	engine.Patch.ItemBoundToRef[element.ID] = element
	return element
}`

const createPlayerGuildMemberRef_Engine_func string = `func (engine *Engine) createPlayerGuildMemberRef(referencedElementID PlayerID, parentID PlayerID) playerGuildMemberRefCore {
	var element playerGuildMemberRefCore
	element.engine = engine
	element.ReferencedElementID = referencedElementID
	element.ParentID = parentID
	element.ID = PlayerGuildMemberRefID(engine.GenerateID())
	element.OperationKind = OperationKindUpdate
	engine.Patch.PlayerGuildMemberRef[element.ID] = element
	return element
}`

const createEquipmentSetEquipmentRef_Engine_func string = `func (engine *Engine) createEquipmentSetEquipmentRef(referencedElementID ItemID, parentID EquipmentSetID) equipmentSetEquipmentRefCore {
	var element equipmentSetEquipmentRefCore
	element.engine = engine
	element.ReferencedElementID = referencedElementID
	element.ParentID = parentID
	element.ID = EquipmentSetEquipmentRefID(engine.GenerateID())
	element.OperationKind = OperationKindUpdate
	engine.Patch.EquipmentSetEquipmentRef[element.ID] = element
	return element
}`

const createPlayerEquipmentSetRef_Engine_func string = `func (engine *Engine) createPlayerEquipmentSetRef(referencedElementID EquipmentSetID, parentID PlayerID) playerEquipmentSetRefCore {
	var element playerEquipmentSetRefCore
	element.engine = engine
	element.ReferencedElementID = referencedElementID
	element.ParentID = parentID
	element.ID = PlayerEquipmentSetRefID(engine.GenerateID())
	element.OperationKind = OperationKindUpdate
	engine.Patch.PlayerEquipmentSetRef[element.ID] = element
	return element
}`

const createPlayerTargetRef_Engine_func string = `func (engine *Engine) createPlayerTargetRef(referencedElementID AnyOfPlayer_ZoneItemID, parentID PlayerID) playerTargetRefCore {
	var element playerTargetRefCore
	element.engine = engine
	element.ReferencedElementID = referencedElementID
	element.ParentID = parentID
	element.ID = PlayerTargetRefID(engine.GenerateID())
	element.OperationKind = OperationKindUpdate
	engine.Patch.PlayerTargetRef[element.ID] = element
	return element
}`

const createPlayerTargetedByRef_Engine_func string = `func (engine *Engine) createPlayerTargetedByRef(referencedElementID AnyOfPlayer_ZoneItemID, parentID PlayerID) playerTargetedByRefCore {
	var element playerTargetedByRefCore
	element.engine = engine
	element.ReferencedElementID = referencedElementID
	element.ParentID = parentID
	element.ID = PlayerTargetedByRefID(engine.GenerateID())
	element.OperationKind = OperationKindUpdate
	engine.Patch.PlayerTargetedByRef[element.ID] = element
	return element
}`

const createAnyOfPlayer_ZoneItem_Engine_func string = `func (engine *Engine) createAnyOfPlayer_ZoneItem(setDefaultValue bool, childElementPath path) anyOfPlayer_ZoneItem {
	var element anyOfPlayer_ZoneItemCore
	element.engine = engine
	element.ID = AnyOfPlayer_ZoneItemID(engine.GenerateID())
	if setDefaultValue {
		elementPlayer := engine.createPlayer(childElementPath, false)
		element.Player = elementPlayer.player.ID
		element.ElementKind = ElementKindPlayer
	}
	element.OperationKind = OperationKindUpdate
	element.ChildElementPath = childElementPath
	engine.Patch.AnyOfPlayer_ZoneItem[element.ID] = element
	return anyOfPlayer_ZoneItem{anyOfPlayer_ZoneItem: element}
}`

const createAnyOfPlayer_Position_Engine_func string = `func (engine *Engine) createAnyOfPlayer_Position(setDefaultValue bool, childElementPath path) anyOfPlayer_Position {
	var element anyOfPlayer_PositionCore
	element.engine = engine
	element.ID = AnyOfPlayer_PositionID(engine.GenerateID())
	if setDefaultValue {
		elementPlayer := engine.createPlayer(childElementPath, false)
		element.Player = elementPlayer.player.ID
		element.ElementKind = ElementKindPlayer
	}
	element.OperationKind = OperationKindUpdate
	element.ChildElementPath = childElementPath
	engine.Patch.AnyOfPlayer_Position[element.ID] = element
	return anyOfPlayer_Position{anyOfPlayer_Position: element}
}`

const createAnyOfItem_Player_ZoneItem_Engine_func string = `func (engine *Engine) createAnyOfItem_Player_ZoneItem(setDefaultValue bool, childElementPath path) anyOfItem_Player_ZoneItem {
	var element anyOfItem_Player_ZoneItemCore
	element.engine = engine
	element.ID = AnyOfItem_Player_ZoneItemID(engine.GenerateID())
	if setDefaultValue {
		elementItem := engine.createItem(childElementPath, false)
		element.Item = elementItem.item.ID
		element.ElementKind = ElementKindItem
	}
	element.OperationKind = OperationKindUpdate
	element.ChildElementPath = childElementPath
	engine.Patch.AnyOfItem_Player_ZoneItem[element.ID] = element
	return anyOfItem_Player_ZoneItem{anyOfItem_Player_ZoneItem: element}
}`

const _DeletePlayer_Engine_func string = `func (engine *Engine) DeletePlayer(playerID PlayerID) {
	player := engine.Player(playerID).player
	if player.HasParent {
		return
	}
	engine.deletePlayer(playerID)
}`

const deletePlayer_Engine_func string = `func (engine *Engine) deletePlayer(playerID PlayerID) {
	player := engine.Player(playerID).player
	if player.OperationKind == OperationKindDelete {
		return
	}
	engine.dereferenceItemBoundToRefs(playerID)
	engine.dereferencePlayerGuildMemberRefs(playerID)
	engine.dereferencePlayerTargetRefsPlayer(playerID)
	engine.dereferencePlayerTargetedByRefsPlayer(playerID)
	for _, equipmentSetID := range player.EquipmentSets {
		engine.deletePlayerEquipmentSetRef(equipmentSetID)
	}
	engine.deleteGearScore(player.GearScore)
	for _, guildMemberID := range player.GuildMembers {
		engine.deletePlayerGuildMemberRef(guildMemberID)
	}
	for _, itemID := range player.Items {
		engine.deleteItem(itemID)
	}
	engine.deletePosition(player.Position)
	engine.deletePlayerTargetRef(player.Target)
	for _, targetedByID := range player.TargetedBy {
		engine.deletePlayerTargetedByRef(targetedByID)
	}
	if _, ok := engine.State.Player[playerID]; ok {
		player.OperationKind = OperationKindDelete
		engine.Patch.Player[player.ID] = player
	} else {
		delete(engine.Patch.Player, playerID)
	}
}`

const _DeleteGearScore_Engine_func string = `func (engine *Engine) DeleteGearScore(gearScoreID GearScoreID) {
	gearScore := engine.GearScore(gearScoreID).gearScore
	if gearScore.HasParent {
		return
	}
	engine.deleteGearScore(gearScoreID)
}`

const deleteGearScore_Engine_func string = `func (engine *Engine) deleteGearScore(gearScoreID GearScoreID) {
	gearScore := engine.GearScore(gearScoreID).gearScore
	if gearScore.OperationKind == OperationKindDelete {
		return
	}
	if _, ok := engine.State.GearScore[gearScoreID]; ok {
		gearScore.OperationKind = OperationKindDelete
		engine.Patch.GearScore[gearScore.ID] = gearScore
	} else {
		delete(engine.Patch.GearScore, gearScoreID)
	}
}`

const _DeletePosition_Engine_func string = `func (engine *Engine) DeletePosition(positionID PositionID) {
	position := engine.Position(positionID).position
	if position.HasParent {
		return
	}
	engine.deletePosition(positionID)
}`

const deletePosition_Engine_func string = `func (engine *Engine) deletePosition(positionID PositionID) {
	position := engine.Position(positionID).position
	if position.OperationKind == OperationKindDelete {
		return
	}
	if _, ok := engine.State.Position[positionID]; ok {
		position.OperationKind = OperationKindDelete
		engine.Patch.Position[position.ID] = position
	} else {
		delete(engine.Patch.Position, positionID)
	}
}`

const _DeleteItem_Engine_func string = `func (engine *Engine) DeleteItem(itemID ItemID) {
	item := engine.Item(itemID).item
	if item.HasParent {
		return
	}
	engine.deleteItem(itemID)
}`

const deleteItem_Engine_func string = `func (engine *Engine) deleteItem(itemID ItemID) {
	item := engine.Item(itemID).item
	if item.OperationKind == OperationKindDelete {
		return
	}
	engine.dereferenceEquipmentSetEquipmentRefs(itemID)
	engine.deleteItemBoundToRef(item.BoundTo)
	engine.deleteGearScore(item.GearScore)
	engine.deleteAnyOfPlayer_Position(item.Origin, true)
	if _, ok := engine.State.Item[itemID]; ok {
		item.OperationKind = OperationKindDelete
		engine.Patch.Item[item.ID] = item
	} else {
		delete(engine.Patch.Item, itemID)
	}
}`

const _DeleteZoneItem_Engine_func string = `func (engine *Engine) DeleteZoneItem(zoneItemID ZoneItemID) {
	zoneItem := engine.ZoneItem(zoneItemID).zoneItem
	if zoneItem.HasParent {
		return
	}
	engine.deleteZoneItem(zoneItemID)
}`

const deleteZoneItem_Engine_func string = `func (engine *Engine) deleteZoneItem(zoneItemID ZoneItemID) {
	zoneItem := engine.ZoneItem(zoneItemID).zoneItem
	if zoneItem.OperationKind == OperationKindDelete {
		return
	}
	engine.dereferencePlayerTargetRefsZoneItem(zoneItemID)
	engine.dereferencePlayerTargetedByRefsZoneItem(zoneItemID)
	engine.deleteItem(zoneItem.Item)
	engine.deletePosition(zoneItem.Position)
	if _, ok := engine.State.ZoneItem[zoneItemID]; ok {
		zoneItem.OperationKind = OperationKindDelete
		engine.Patch.ZoneItem[zoneItem.ID] = zoneItem
	} else {
		delete(engine.Patch.ZoneItem, zoneItemID)
	}
}`

const _DeleteZone_Engine_func string = `func (engine *Engine) DeleteZone(zoneID ZoneID) {
	engine.deleteZone(zoneID)
}`

const deleteZone_Engine_func string = `func (engine *Engine) deleteZone(zoneID ZoneID) {
	zone := engine.Zone(zoneID).zone
	if zone.OperationKind == OperationKindDelete {
		return
	}
	for _, interactableID := range zone.Interactables {
		engine.deleteAnyOfItem_Player_ZoneItem(interactableID, true)
	}
	for _, itemID := range zone.Items {
		engine.deleteZoneItem(itemID)
	}
	for _, playerID := range zone.Players {
		engine.deletePlayer(playerID)
	}
	if _, ok := engine.State.Zone[zoneID]; ok {
		zone.OperationKind = OperationKindDelete
		engine.Patch.Zone[zone.ID] = zone
	} else {
		delete(engine.Patch.Zone, zoneID)
	}
}`

const _DeleteEquipmentSet_Engine_func string = `func (engine *Engine) DeleteEquipmentSet(equipmentSetID EquipmentSetID) {
	engine.deleteEquipmentSet(equipmentSetID)
}`

const deleteEquipmentSet_Engine_func string = `func (engine *Engine) deleteEquipmentSet(equipmentSetID EquipmentSetID) {
	equipmentSet := engine.EquipmentSet(equipmentSetID).equipmentSet
	if equipmentSet.OperationKind == OperationKindDelete {
		return
	}
	engine.dereferencePlayerEquipmentSetRefs(equipmentSetID)
	for _, equipmentID := range equipmentSet.Equipment {
		engine.deleteEquipmentSetEquipmentRef(equipmentID)
	}
	if _, ok := engine.State.EquipmentSet[equipmentSetID]; ok {
		equipmentSet.OperationKind = OperationKindDelete
		engine.Patch.EquipmentSet[equipmentSet.ID] = equipmentSet
	} else {
		delete(engine.Patch.EquipmentSet, equipmentSetID)
	}
}`

const deletePlayerGuildMemberRef_Engine_func string = `func (engine *Engine) deletePlayerGuildMemberRef(playerGuildMemberRefID PlayerGuildMemberRefID) {
	playerGuildMemberRef := engine.playerGuildMemberRef(playerGuildMemberRefID).playerGuildMemberRef
	if playerGuildMemberRef.OperationKind == OperationKindDelete {
		return
	}
	if _, ok := engine.State.PlayerGuildMemberRef[playerGuildMemberRefID]; ok {
		playerGuildMemberRef.OperationKind = OperationKindDelete
		engine.Patch.PlayerGuildMemberRef[playerGuildMemberRef.ID] = playerGuildMemberRef
	} else {
		delete(engine.Patch.PlayerGuildMemberRef, playerGuildMemberRefID)
	}
}`

const deletePlayerEquipmentSetRef_Engine_func string = `func (engine *Engine) deletePlayerEquipmentSetRef(playerEquipmentSetRefID PlayerEquipmentSetRefID) {
	playerEquipmentSetRef := engine.playerEquipmentSetRef(playerEquipmentSetRefID).playerEquipmentSetRef
	if playerEquipmentSetRef.OperationKind == OperationKindDelete {
		return
	}
	if _, ok := engine.State.PlayerEquipmentSetRef[playerEquipmentSetRefID]; ok {
		playerEquipmentSetRef.OperationKind = OperationKindDelete
		engine.Patch.PlayerEquipmentSetRef[playerEquipmentSetRef.ID] = playerEquipmentSetRef
	} else {
		delete(engine.Patch.PlayerEquipmentSetRef, playerEquipmentSetRefID)
	}
}`

const deleteItemBoundToRef_Engine_func string = `func (engine *Engine) deleteItemBoundToRef(itemBoundToRefID ItemBoundToRefID) {
	itemBoundToRef := engine.itemBoundToRef(itemBoundToRefID).itemBoundToRef
	if itemBoundToRef.OperationKind == OperationKindDelete {
		return
	}
	if _, ok := engine.State.ItemBoundToRef[itemBoundToRefID]; ok {
		itemBoundToRef.OperationKind = OperationKindDelete
		engine.Patch.ItemBoundToRef[itemBoundToRef.ID] = itemBoundToRef
	} else {
		delete(engine.Patch.ItemBoundToRef, itemBoundToRefID)
	}
}`

const deleteEquipmentSetEquipmentRef_Engine_func string = `func (engine *Engine) deleteEquipmentSetEquipmentRef(equipmentSetEquipmentRefID EquipmentSetEquipmentRefID) {
	equipmentSetEquipmentRef := engine.equipmentSetEquipmentRef(equipmentSetEquipmentRefID).equipmentSetEquipmentRef
	if equipmentSetEquipmentRef.OperationKind == OperationKindDelete {
		return
	}
	if _, ok := engine.State.EquipmentSetEquipmentRef[equipmentSetEquipmentRefID]; ok {
		equipmentSetEquipmentRef.OperationKind = OperationKindDelete
		engine.Patch.EquipmentSetEquipmentRef[equipmentSetEquipmentRef.ID] = equipmentSetEquipmentRef
	} else {
		delete(engine.Patch.EquipmentSetEquipmentRef, equipmentSetEquipmentRefID)
	}
}`

const deletePlayerTargetRef_Engine_func string = `func (engine *Engine) deletePlayerTargetRef(playerTargetRefID PlayerTargetRefID) {
	playerTargetRef := engine.playerTargetRef(playerTargetRefID).playerTargetRef
	if playerTargetRef.OperationKind == OperationKindDelete {
		return
	}
	engine.deleteAnyOfPlayer_ZoneItem(playerTargetRef.ReferencedElementID, false)
	if _, ok := engine.State.PlayerTargetRef[playerTargetRefID]; ok {
		playerTargetRef.OperationKind = OperationKindDelete
		engine.Patch.PlayerTargetRef[playerTargetRef.ID] = playerTargetRef
	} else {
		delete(engine.Patch.PlayerTargetRef, playerTargetRefID)
	}
}`

const deletePlayerTargetedByRef_Engine_func string = `func (engine *Engine) deletePlayerTargetedByRef(playerTargetedByRefID PlayerTargetedByRefID) {
	playerTargetedByRef := engine.playerTargetedByRef(playerTargetedByRefID).playerTargetedByRef
	if playerTargetedByRef.OperationKind == OperationKindDelete {
		return
	}
	engine.deleteAnyOfPlayer_ZoneItem(playerTargetedByRef.ReferencedElementID, false)
	if _, ok := engine.State.PlayerTargetedByRef[playerTargetedByRefID]; ok {
		playerTargetedByRef.OperationKind = OperationKindDelete
		engine.Patch.PlayerTargetedByRef[playerTargetedByRef.ID] = playerTargetedByRef
	} else {
		delete(engine.Patch.PlayerTargetedByRef, playerTargetedByRefID)
	}
}`

const deleteAnyOfPlayer_ZoneItem_Engine_func string = `func (engine *Engine) deleteAnyOfPlayer_ZoneItem(anyOfPlayer_ZoneItemID AnyOfPlayer_ZoneItemID, deleteChild bool) {
	anyOfPlayer_ZoneItem := engine.anyOfPlayer_ZoneItem(anyOfPlayer_ZoneItemID).anyOfPlayer_ZoneItem
	if anyOfPlayer_ZoneItem.OperationKind == OperationKindDelete {
		return
	}
	if deleteChild {
		anyOfPlayer_ZoneItem.deleteChild()
	}
	if _, ok := engine.State.AnyOfPlayer_ZoneItem[anyOfPlayer_ZoneItemID]; ok {
		anyOfPlayer_ZoneItem.OperationKind = OperationKindDelete
		engine.Patch.AnyOfPlayer_ZoneItem[anyOfPlayer_ZoneItem.ID] = anyOfPlayer_ZoneItem
	} else {
		delete(engine.Patch.AnyOfPlayer_ZoneItem, anyOfPlayer_ZoneItemID)
	}
}`

const deleteAnyOfPlayer_Position_Engine_func string = `func (engine *Engine) deleteAnyOfPlayer_Position(anyOfPlayer_PositionID AnyOfPlayer_PositionID, deleteChild bool) {
	anyOfPlayer_Position := engine.anyOfPlayer_Position(anyOfPlayer_PositionID).anyOfPlayer_Position
	if anyOfPlayer_Position.OperationKind == OperationKindDelete {
		return
	}
	if deleteChild {
		anyOfPlayer_Position.deleteChild()
	}
	if _, ok := engine.State.AnyOfPlayer_Position[anyOfPlayer_PositionID]; ok {
		anyOfPlayer_Position.OperationKind = OperationKindDelete
		engine.Patch.AnyOfPlayer_Position[anyOfPlayer_Position.ID] = anyOfPlayer_Position
	} else {
		delete(engine.Patch.AnyOfPlayer_Position, anyOfPlayer_PositionID)
	}
}`

const deleteAnyOfItem_Player_ZoneItem_Engine_func string = `func (engine *Engine) deleteAnyOfItem_Player_ZoneItem(anyOfItem_Player_ZoneItemID AnyOfItem_Player_ZoneItemID, deleteChild bool) {
	anyOfItem_Player_ZoneItem := engine.anyOfItem_Player_ZoneItem(anyOfItem_Player_ZoneItemID).anyOfItem_Player_ZoneItem
	if anyOfItem_Player_ZoneItem.OperationKind == OperationKindDelete {
		return
	}
	if deleteChild {
		anyOfItem_Player_ZoneItem.deleteChild()
	}
	if _, ok := engine.State.AnyOfItem_Player_ZoneItem[anyOfItem_Player_ZoneItemID]; ok {
		anyOfItem_Player_ZoneItem.OperationKind = OperationKindDelete
		engine.Patch.AnyOfItem_Player_ZoneItem[anyOfItem_Player_ZoneItem.ID] = anyOfItem_Player_ZoneItem
	} else {
		delete(engine.Patch.AnyOfItem_Player_ZoneItem, anyOfItem_Player_ZoneItemID)
	}
}`

const _EveryPlayer_Engine_func string = `func (engine *Engine) EveryPlayer() []player {
	playerIDs := engine.allPlayerIDs()
	var players []player
	for _, playerID := range playerIDs {
		player := engine.Player(playerID)
		if player.player.HasParent {
			continue
		}
		players = append(players, player)
	}
	playerIDSlicePool.Put(playerIDs)
	return players
}`

const _Player_Engine_func string = `func (engine *Engine) Player(playerID PlayerID) player {
	patchingPlayer, ok := engine.Patch.Player[playerID]
	if ok {
		return player{player: patchingPlayer}
	}
	currentPlayer, ok := engine.State.Player[playerID]
	if ok {
		return player{player: currentPlayer}
	}
	return player{player: playerCore{OperationKind: OperationKindDelete, engine: engine}}
}`

const _ID_player_func string = `func (_player player) ID() PlayerID {
	return _player.player.ID
}`

const _Exists_player_func string = `func (_player player) Exists() (player, bool) {
	player := _player.player.engine.Player(_player.player.ID)
	return player, player.player.OperationKind != OperationKindDelete
}`

const _Path_player_func string = `func (_player player) Path() string {
	return _player.player.Path
}`

const _Target_player_func string = `func (_player player) Target() playerTargetRef {
	player := _player.player.engine.Player(_player.player.ID)
	return player.player.engine.playerTargetRef(player.player.Target)
}`

const _TargetedBy_player_func string = `func (_player player) TargetedBy() []playerTargetedByRef {
	player := _player.player.engine.Player(_player.player.ID)
	var targetedBy []playerTargetedByRef
	for _, refID := range player.player.TargetedBy {
		targetedBy = append(targetedBy, player.player.engine.playerTargetedByRef(refID))
	}
	return targetedBy
}`

const _Items_player_func string = `func (_player player) Items() []item {
	player := _player.player.engine.Player(_player.player.ID)
	var items []item
	for _, itemID := range player.player.Items {
		items = append(items, player.player.engine.Item(itemID))
	}
	return items
}`

const _GearScore_player_func string = `func (_player player) GearScore() gearScore {
	player := _player.player.engine.Player(_player.player.ID)
	return player.player.engine.GearScore(player.player.GearScore)
}`

const _GuildMembers_player_func string = `func (_player player) GuildMembers() []playerGuildMemberRef {
	player := _player.player.engine.Player(_player.player.ID)
	var guildMembers []playerGuildMemberRef
	for _, refID := range player.player.GuildMembers {
		guildMembers = append(guildMembers, player.player.engine.playerGuildMemberRef(refID))
	}
	return guildMembers
}`

const _EquipmentSets_player_func string = `func (_player player) EquipmentSets() []playerEquipmentSetRef {
	player := _player.player.engine.Player(_player.player.ID)
	var equipmentSets []playerEquipmentSetRef
	for _, refID := range player.player.EquipmentSets {
		equipmentSets = append(equipmentSets, player.player.engine.playerEquipmentSetRef(refID))
	}
	return equipmentSets
}`

const _Position_player_func string = `func (_player player) Position() position {
	player := _player.player.engine.Player(_player.player.ID)
	return player.player.engine.Position(player.player.Position)
}`

const _EveryGearScore_Engine_func string = `func (engine *Engine) EveryGearScore() []gearScore {
	gearScoreIDs := engine.allGearScoreIDs()
	var gearScores []gearScore
	for _, gearScoreID := range gearScoreIDs {
		gearScore := engine.GearScore(gearScoreID)
		if gearScore.gearScore.HasParent {
			continue
		}
		gearScores = append(gearScores, gearScore)
	}
	gearScoreIDSlicePool.Put(gearScoreIDs)
	return gearScores
}`

const _GearScore_Engine_func string = `func (engine *Engine) GearScore(gearScoreID GearScoreID) gearScore {
	patchingGearScore, ok := engine.Patch.GearScore[gearScoreID]
	if ok {
		return gearScore{gearScore: patchingGearScore}
	}
	currentGearScore, ok := engine.State.GearScore[gearScoreID]
	if ok {
		return gearScore{gearScore: currentGearScore}
	}
	return gearScore{gearScore: gearScoreCore{OperationKind: OperationKindDelete, engine: engine}}
}`

const _ID_gearScore_func string = `func (_gearScore gearScore) ID() GearScoreID {
	return _gearScore.gearScore.ID
}`

const _Exists_gearScore_func string = `func (_gearScore gearScore) Exists() (gearScore, bool) {
	gearScore := _gearScore.gearScore.engine.GearScore(_gearScore.gearScore.ID)
	return gearScore, gearScore.gearScore.OperationKind != OperationKindDelete
}`

const _Path_gearScore_func string = `func (_gearScore gearScore) Path() string {
	return _gearScore.gearScore.Path
}`

const _Level_gearScore_func string = `func (_gearScore gearScore) Level() int {
	gearScore := _gearScore.gearScore.engine.GearScore(_gearScore.gearScore.ID)
	return gearScore.gearScore.Level
}`

const _Score_gearScore_func string = `func (_gearScore gearScore) Score() int {
	gearScore := _gearScore.gearScore.engine.GearScore(_gearScore.gearScore.ID)
	return gearScore.gearScore.Score
}`

const _EveryItem_Engine_func string = `func (engine *Engine) EveryItem() []item {
	itemIDs := engine.allItemIDs()
	var items []item
	for _, itemID := range itemIDs {
		item := engine.Item(itemID)
		if item.item.HasParent {
			continue
		}
		items = append(items, item)
	}
	itemIDSlicePool.Put(itemIDs)
	return items
}`

const _Item_Engine_func string = `func (engine *Engine) Item(itemID ItemID) item {
	patchingItem, ok := engine.Patch.Item[itemID]
	if ok {
		return item{item: patchingItem}
	}
	currentItem, ok := engine.State.Item[itemID]
	if ok {
		return item{item: currentItem}
	}
	return item{item: itemCore{OperationKind: OperationKindDelete, engine: engine}}
}`

const _ID_item_func string = `func (_item item) ID() ItemID {
	return _item.item.ID
}`

const _Exists_item_func string = `func (_item item) Exists() (item, bool) {
	item := _item.item.engine.Item(_item.item.ID)
	return item, item.item.OperationKind != OperationKindDelete
}`

const _Path_item_func string = `func (_item item) Path() string {
	return _item.item.Path
}`

const _Name_item_func string = `func (_item item) Name() string {
	item := _item.item.engine.Item(_item.item.ID)
	return item.item.Name
}`

const _GearScore_item_func string = `func (_item item) GearScore() gearScore {
	item := _item.item.engine.Item(_item.item.ID)
	return item.item.engine.GearScore(item.item.GearScore)
}`

const _BoundTo_item_func string = `func (_item item) BoundTo() itemBoundToRef {
	item := _item.item.engine.Item(_item.item.ID)
	return item.item.engine.itemBoundToRef(item.item.BoundTo)
}`

const _Origin_item_func string = `func (_item item) Origin() anyOfPlayer_Position {
	item := _item.item.engine.Item(_item.item.ID)
	return item.item.engine.anyOfPlayer_Position(item.item.Origin)
}`

const _EveryPosition_Engine_func string = `func (engine *Engine) EveryPosition() []position {
	positionIDs := engine.allPositionIDs()
	var positions []position
	for _, positionID := range positionIDs {
		position := engine.Position(positionID)
		if position.position.HasParent {
			continue
		}
		positions = append(positions, position)
	}
	positionIDSlicePool.Put(positionIDs)
	return positions
}`

const _Position_Engine_func string = `func (engine *Engine) Position(positionID PositionID) position {
	patchingPosition, ok := engine.Patch.Position[positionID]
	if ok {
		return position{position: patchingPosition}
	}
	currentPosition, ok := engine.State.Position[positionID]
	if ok {
		return position{position: currentPosition}
	}
	return position{position: positionCore{OperationKind: OperationKindDelete, engine: engine}}
}`

const _ID_position_func string = `func (_position position) ID() PositionID {
	return _position.position.ID
}`

const _Exists_position_func string = `func (_position position) Exists() (position, bool) {
	position := _position.position.engine.Position(_position.position.ID)
	return position, position.position.OperationKind != OperationKindDelete
}`

const _Path_position_func string = `func (_position position) Path() string {
	return _position.position.Path
}`

const _X_position_func string = `func (_position position) X() float64 {
	position := _position.position.engine.Position(_position.position.ID)
	return position.position.X
}`

const _Y_position_func string = `func (_position position) Y() float64 {
	position := _position.position.engine.Position(_position.position.ID)
	return position.position.Y
}`

const _EveryZoneItem_Engine_func string = `func (engine *Engine) EveryZoneItem() []zoneItem {
	zoneItemIDs := engine.allZoneItemIDs()
	var zoneItems []zoneItem
	for _, zoneItemID := range zoneItemIDs {
		zoneItem := engine.ZoneItem(zoneItemID)
		if zoneItem.zoneItem.HasParent {
			continue
		}
		zoneItems = append(zoneItems, zoneItem)
	}
	zoneItemIDSlicePool.Put(zoneItemIDs)
	return zoneItems
}`

const _ZoneItem_Engine_func string = `func (engine *Engine) ZoneItem(zoneItemID ZoneItemID) zoneItem {
	patchingZoneItem, ok := engine.Patch.ZoneItem[zoneItemID]
	if ok {
		return zoneItem{zoneItem: patchingZoneItem}
	}
	currentZoneItem, ok := engine.State.ZoneItem[zoneItemID]
	if ok {
		return zoneItem{zoneItem: currentZoneItem}
	}
	return zoneItem{zoneItem: zoneItemCore{OperationKind: OperationKindDelete, engine: engine}}
}`

const _ID_zoneItem_func string = `func (_zoneItem zoneItem) ID() ZoneItemID {
	return _zoneItem.zoneItem.ID
}`

const _Exists_zoneItem_func string = `func (_zoneItem zoneItem) Exists() (zoneItem, bool) {
	zoneItem := _zoneItem.zoneItem.engine.ZoneItem(_zoneItem.zoneItem.ID)
	return zoneItem, zoneItem.zoneItem.OperationKind != OperationKindDelete
}`

const _Path_zoneItem_func string = `func (_zoneItem zoneItem) Path() string {
	return _zoneItem.zoneItem.Path
}`

const _Position_zoneItem_func string = `func (_zoneItem zoneItem) Position() position {
	zoneItem := _zoneItem.zoneItem.engine.ZoneItem(_zoneItem.zoneItem.ID)
	return zoneItem.zoneItem.engine.Position(zoneItem.zoneItem.Position)
}`

const _Item_zoneItem_func string = `func (_zoneItem zoneItem) Item() item {
	zoneItem := _zoneItem.zoneItem.engine.ZoneItem(_zoneItem.zoneItem.ID)
	return zoneItem.zoneItem.engine.Item(zoneItem.zoneItem.Item)
}`

const _EveryZone_Engine_func string = `func (engine *Engine) EveryZone() []zone {
	zoneIDs := engine.allZoneIDs()
	var zones []zone
	for _, zoneID := range zoneIDs {
		zone := engine.Zone(zoneID)
		zones = append(zones, zone)
	}
	zoneIDSlicePool.Put(zoneIDs)
	return zones
}`

const _Zone_Engine_func string = `func (engine *Engine) Zone(zoneID ZoneID) zone {
	patchingZone, ok := engine.Patch.Zone[zoneID]
	if ok {
		return zone{zone: patchingZone}
	}
	currentZone, ok := engine.State.Zone[zoneID]
	if ok {
		return zone{zone: currentZone}
	}
	return zone{zone: zoneCore{OperationKind: OperationKindDelete, engine: engine}}
}`

const _ID_zone_func string = `func (_zone zone) ID() ZoneID {
	return _zone.zone.ID
}`

const _Exists_zone_func string = `func (_zone zone) Exists() (zone, bool) {
	zone := _zone.zone.engine.Zone(_zone.zone.ID)
	return zone, zone.zone.OperationKind != OperationKindDelete
}`

const _Path_zone_func string = `func (_zone zone) Path() string {
	return _zone.zone.Path
}`

const _Players_zone_func string = `func (_zone zone) Players() []player {
	zone := _zone.zone.engine.Zone(_zone.zone.ID)
	var players []player
	for _, playerID := range zone.zone.Players {
		players = append(players, zone.zone.engine.Player(playerID))
	}
	return players
}`

const _Interactables_zone_func string = `func (_zone zone) Interactables() []anyOfItem_Player_ZoneItem {
	zone := _zone.zone.engine.Zone(_zone.zone.ID)
	var interactables []anyOfItem_Player_ZoneItem
	for _, anyOfItem_Player_ZoneItemID := range zone.zone.Interactables {
		interactables = append(interactables, zone.zone.engine.anyOfItem_Player_ZoneItem(anyOfItem_Player_ZoneItemID))
	}
	return interactables
}`

const _Items_zone_func string = `func (_zone zone) Items() []zoneItem {
	zone := _zone.zone.engine.Zone(_zone.zone.ID)
	var items []zoneItem
	for _, zoneItemID := range zone.zone.Items {
		items = append(items, zone.zone.engine.ZoneItem(zoneItemID))
	}
	return items
}`

const _Tags_zone_func string = `func (_zone zone) Tags() []string {
	zone := _zone.zone.engine.Zone(_zone.zone.ID)
	var tags []string
	for _, element := range zone.zone.Tags {
		tags = append(tags, element)
	}
	return tags
}`

const _ID_itemBoundToRef_func string = `func (_itemBoundToRef itemBoundToRef) ID() PlayerID {
	return _itemBoundToRef.itemBoundToRef.ReferencedElementID
}`

const itemBoundToRef_Engine_func string = `func (engine *Engine) itemBoundToRef(itemBoundToRefID ItemBoundToRefID) itemBoundToRef {
	patchingItemBoundToRef, ok := engine.Patch.ItemBoundToRef[itemBoundToRefID]
	if ok {
		return itemBoundToRef{itemBoundToRef: patchingItemBoundToRef}
	}
	currentItemBoundToRef, ok := engine.State.ItemBoundToRef[itemBoundToRefID]
	if ok {
		return itemBoundToRef{itemBoundToRef: currentItemBoundToRef}
	}
	return itemBoundToRef{itemBoundToRef: itemBoundToRefCore{OperationKind: OperationKindDelete, engine: engine}}
}`

const _ID_playerGuildMemberRef_func string = `func (_playerGuildMemberRef playerGuildMemberRef) ID() PlayerID {
	return _playerGuildMemberRef.playerGuildMemberRef.ReferencedElementID
}`

const playerGuildMemberRef_Engine_func string = `func (engine *Engine) playerGuildMemberRef(playerGuildMemberRefID PlayerGuildMemberRefID) playerGuildMemberRef {
	patchingPlayerGuildMemberRef, ok := engine.Patch.PlayerGuildMemberRef[playerGuildMemberRefID]
	if ok {
		return playerGuildMemberRef{playerGuildMemberRef: patchingPlayerGuildMemberRef}
	}
	currentPlayerGuildMemberRef, ok := engine.State.PlayerGuildMemberRef[playerGuildMemberRefID]
	if ok {
		return playerGuildMemberRef{playerGuildMemberRef: currentPlayerGuildMemberRef}
	}
	return playerGuildMemberRef{playerGuildMemberRef: playerGuildMemberRefCore{OperationKind: OperationKindDelete, engine: engine}}
}`

const _ID_playerEquipmentSetRef_func string = `func (_playerEquipmentSetRef playerEquipmentSetRef) ID() EquipmentSetID {
	return _playerEquipmentSetRef.playerEquipmentSetRef.ReferencedElementID
}`

const _EveryEquipmentSet_Engine_func string = `func (engine *Engine) EveryEquipmentSet() []equipmentSet {
	equipmentSetIDs := engine.allEquipmentSetIDs()
	var equipmentSets []equipmentSet
	for _, equipmentSetID := range equipmentSetIDs {
		equipmentSet := engine.EquipmentSet(equipmentSetID)
		equipmentSets = append(equipmentSets, equipmentSet)
	}
	equipmentSetIDSlicePool.Put(equipmentSetIDs)
	return equipmentSets
}`

const _EquipmentSet_Engine_func string = `func (engine *Engine) EquipmentSet(equipmentSetID EquipmentSetID) equipmentSet {
	patchingEquipmentSet, ok := engine.Patch.EquipmentSet[equipmentSetID]
	if ok {
		return equipmentSet{equipmentSet: patchingEquipmentSet}
	}
	currentEquipmentSet, ok := engine.State.EquipmentSet[equipmentSetID]
	if ok {
		return equipmentSet{equipmentSet: currentEquipmentSet}
	}
	return equipmentSet{equipmentSet: equipmentSetCore{OperationKind: OperationKindDelete, engine: engine}}
}`

const _ID_equipmentSet_func string = `func (_equipmentSet equipmentSet) ID() EquipmentSetID {
	return _equipmentSet.equipmentSet.ID
}`

const _Exists_equipmentSet_func string = `func (_equipmentSet equipmentSet) Exists() (equipmentSet, bool) {
	equipmentSet := _equipmentSet.equipmentSet.engine.EquipmentSet(_equipmentSet.equipmentSet.ID)
	return equipmentSet, equipmentSet.equipmentSet.OperationKind != OperationKindDelete
}`

const _Path_equipmentSet_func string = `func (_equipmentSet equipmentSet) Path() string {
	return _equipmentSet.equipmentSet.Path
}`

const _Name_equipmentSet_func string = `func (_equipmentSet equipmentSet) Name() string {
	equipmentSet := _equipmentSet.equipmentSet.engine.EquipmentSet(_equipmentSet.equipmentSet.ID)
	return equipmentSet.equipmentSet.Name
}`

const _Equipment_equipmentSet_func string = `func (_equipmentSet equipmentSet) Equipment() []equipmentSetEquipmentRef {
	equipmentSet := _equipmentSet.equipmentSet.engine.EquipmentSet(_equipmentSet.equipmentSet.ID)
	var equipment []equipmentSetEquipmentRef
	for _, refID := range equipmentSet.equipmentSet.Equipment {
		equipment = append(equipment, equipmentSet.equipmentSet.engine.equipmentSetEquipmentRef(refID))
	}
	return equipment
}`

const playerEquipmentSetRef_Engine_func string = `func (engine *Engine) playerEquipmentSetRef(playerEquipmentSetRefID PlayerEquipmentSetRefID) playerEquipmentSetRef {
	patchingPlayerEquipmentSetRef, ok := engine.Patch.PlayerEquipmentSetRef[playerEquipmentSetRefID]
	if ok {
		return playerEquipmentSetRef{playerEquipmentSetRef: patchingPlayerEquipmentSetRef}
	}
	currentPlayerEquipmentSetRef, ok := engine.State.PlayerEquipmentSetRef[playerEquipmentSetRefID]
	if ok {
		return playerEquipmentSetRef{playerEquipmentSetRef: currentPlayerEquipmentSetRef}
	}
	return playerEquipmentSetRef{playerEquipmentSetRef: playerEquipmentSetRefCore{OperationKind: OperationKindDelete, engine: engine}}
}`

const _ID_equipmentSetEquipmentRef_func string = `func (_equipmentSetEquipmentRef equipmentSetEquipmentRef) ID() ItemID {
	return _equipmentSetEquipmentRef.equipmentSetEquipmentRef.ReferencedElementID
}`

const equipmentSetEquipmentRef_Engine_func string = `func (engine *Engine) equipmentSetEquipmentRef(equipmentSetEquipmentRefID EquipmentSetEquipmentRefID) equipmentSetEquipmentRef {
	patchingEquipmentSetEquipmentRef, ok := engine.Patch.EquipmentSetEquipmentRef[equipmentSetEquipmentRefID]
	if ok {
		return equipmentSetEquipmentRef{equipmentSetEquipmentRef: patchingEquipmentSetEquipmentRef}
	}
	currentEquipmentSetEquipmentRef, ok := engine.State.EquipmentSetEquipmentRef[equipmentSetEquipmentRefID]
	if ok {
		return equipmentSetEquipmentRef{equipmentSetEquipmentRef: currentEquipmentSetEquipmentRef}
	}
	return equipmentSetEquipmentRef{equipmentSetEquipmentRef: equipmentSetEquipmentRefCore{OperationKind: OperationKindDelete, engine: engine}}
}`

const _ID_playerTargetRef_func string = `func (_playerTargetRef playerTargetRef) ID() AnyOfPlayer_ZoneItemID {
	return _playerTargetRef.playerTargetRef.ReferencedElementID
}`

const playerTargetRef_Engine_func string = `func (engine *Engine) playerTargetRef(playerTargetRefID PlayerTargetRefID) playerTargetRef {
	patchingPlayerTargetRef, ok := engine.Patch.PlayerTargetRef[playerTargetRefID]
	if ok {
		return playerTargetRef{playerTargetRef: patchingPlayerTargetRef}
	}
	currentPlayerTargetRef, ok := engine.State.PlayerTargetRef[playerTargetRefID]
	if ok {
		return playerTargetRef{playerTargetRef: currentPlayerTargetRef}
	}
	return playerTargetRef{playerTargetRef: playerTargetRefCore{OperationKind: OperationKindDelete, engine: engine}}
}`

const _ID_playerTargetedByRef_func string = `func (_playerTargetedByRef playerTargetedByRef) ID() AnyOfPlayer_ZoneItemID {
	return _playerTargetedByRef.playerTargetedByRef.ReferencedElementID
}`

const playerTargetedByRef_Engine_func string = `func (engine *Engine) playerTargetedByRef(playerTargetedByRefID PlayerTargetedByRefID) playerTargetedByRef {
	patchingPlayerTargetedByRef, ok := engine.Patch.PlayerTargetedByRef[playerTargetedByRefID]
	if ok {
		return playerTargetedByRef{playerTargetedByRef: patchingPlayerTargetedByRef}
	}
	currentPlayerTargetedByRef, ok := engine.State.PlayerTargetedByRef[playerTargetedByRefID]
	if ok {
		return playerTargetedByRef{playerTargetedByRef: currentPlayerTargetedByRef}
	}
	return playerTargetedByRef{playerTargetedByRef: playerTargetedByRefCore{OperationKind: OperationKindDelete, engine: engine}}
}`

const _ID_anyOfPlayer_Position_func string = `func (_anyOfPlayer_Position anyOfPlayer_Position) ID() AnyOfPlayer_PositionID {
	return _anyOfPlayer_Position.anyOfPlayer_Position.ID
}`

const _Player_anyOfPlayer_Position_func string = `func (_anyOfPlayer_Position anyOfPlayer_Position) Player() player {
	anyOfPlayer_Position := _anyOfPlayer_Position.anyOfPlayer_Position.engine.anyOfPlayer_Position(_anyOfPlayer_Position.anyOfPlayer_Position.ID)
	return anyOfPlayer_Position.anyOfPlayer_Position.engine.Player(anyOfPlayer_Position.anyOfPlayer_Position.Player)
}`

const _Position_anyOfPlayer_Position_func string = `func (_anyOfPlayer_Position anyOfPlayer_Position) Position() position {
	anyOfPlayer_Position := _anyOfPlayer_Position.anyOfPlayer_Position.engine.anyOfPlayer_Position(_anyOfPlayer_Position.anyOfPlayer_Position.ID)
	return anyOfPlayer_Position.anyOfPlayer_Position.engine.Position(anyOfPlayer_Position.anyOfPlayer_Position.Position)
}`

const anyOfPlayer_Position_Engine_func string = `func (engine *Engine) anyOfPlayer_Position(anyOfPlayer_PositionID AnyOfPlayer_PositionID) anyOfPlayer_Position {
	patchingAnyOfPlayer_Position, ok := engine.Patch.AnyOfPlayer_Position[anyOfPlayer_PositionID]
	if ok {
		return anyOfPlayer_Position{anyOfPlayer_Position: patchingAnyOfPlayer_Position}
	}
	currentAnyOfPlayer_Position, ok := engine.State.AnyOfPlayer_Position[anyOfPlayer_PositionID]
	if ok {
		return anyOfPlayer_Position{anyOfPlayer_Position: currentAnyOfPlayer_Position}
	}
	return anyOfPlayer_Position{anyOfPlayer_Position: anyOfPlayer_PositionCore{OperationKind: OperationKindDelete, engine: engine}}
}`

const _ID_anyOfPlayer_ZoneItem_func string = `func (_anyOfPlayer_ZoneItem anyOfPlayer_ZoneItem) ID() AnyOfPlayer_ZoneItemID {
	return _anyOfPlayer_ZoneItem.anyOfPlayer_ZoneItem.ID
}`

const _Player_anyOfPlayer_ZoneItem_func string = `func (_anyOfPlayer_ZoneItem anyOfPlayer_ZoneItem) Player() player {
	anyOfPlayer_ZoneItem := _anyOfPlayer_ZoneItem.anyOfPlayer_ZoneItem.engine.anyOfPlayer_ZoneItem(_anyOfPlayer_ZoneItem.anyOfPlayer_ZoneItem.ID)
	return anyOfPlayer_ZoneItem.anyOfPlayer_ZoneItem.engine.Player(anyOfPlayer_ZoneItem.anyOfPlayer_ZoneItem.Player)
}`

const _ZoneItem_anyOfPlayer_ZoneItem_func string = `func (_anyOfPlayer_ZoneItem anyOfPlayer_ZoneItem) ZoneItem() zoneItem {
	anyOfPlayer_ZoneItem := _anyOfPlayer_ZoneItem.anyOfPlayer_ZoneItem.engine.anyOfPlayer_ZoneItem(_anyOfPlayer_ZoneItem.anyOfPlayer_ZoneItem.ID)
	return anyOfPlayer_ZoneItem.anyOfPlayer_ZoneItem.engine.ZoneItem(anyOfPlayer_ZoneItem.anyOfPlayer_ZoneItem.ZoneItem)
}`

const anyOfPlayer_ZoneItem_Engine_func string = `func (engine *Engine) anyOfPlayer_ZoneItem(anyOfPlayer_ZoneItemID AnyOfPlayer_ZoneItemID) anyOfPlayer_ZoneItem {
	patchingAnyOfPlayer_ZoneItem, ok := engine.Patch.AnyOfPlayer_ZoneItem[anyOfPlayer_ZoneItemID]
	if ok {
		return anyOfPlayer_ZoneItem{anyOfPlayer_ZoneItem: patchingAnyOfPlayer_ZoneItem}
	}
	currentAnyOfPlayer_ZoneItem, ok := engine.State.AnyOfPlayer_ZoneItem[anyOfPlayer_ZoneItemID]
	if ok {
		return anyOfPlayer_ZoneItem{anyOfPlayer_ZoneItem: currentAnyOfPlayer_ZoneItem}
	}
	return anyOfPlayer_ZoneItem{anyOfPlayer_ZoneItem: anyOfPlayer_ZoneItemCore{OperationKind: OperationKindDelete, engine: engine}}
}`

const anyOfItem_Player_ZoneItem_Engine_func string = `func (engine *Engine) anyOfItem_Player_ZoneItem(anyOfItem_Player_ZoneItemID AnyOfItem_Player_ZoneItemID) anyOfItem_Player_ZoneItem {
	patchingAnyOfItem_Player_ZoneItem, ok := engine.Patch.AnyOfItem_Player_ZoneItem[anyOfItem_Player_ZoneItemID]
	if ok {
		return anyOfItem_Player_ZoneItem{anyOfItem_Player_ZoneItem: patchingAnyOfItem_Player_ZoneItem}
	}
	currentAnyOfItem_Player_ZoneItem, ok := engine.State.AnyOfItem_Player_ZoneItem[anyOfItem_Player_ZoneItemID]
	if ok {
		return anyOfItem_Player_ZoneItem{anyOfItem_Player_ZoneItem: currentAnyOfItem_Player_ZoneItem}
	}
	return anyOfItem_Player_ZoneItem{anyOfItem_Player_ZoneItem: anyOfItem_Player_ZoneItemCore{OperationKind: OperationKindDelete, engine: engine}}
}`

const _ID_anyOfItem_Player_ZoneItem_func string = `func (_anyOfItem_Player_ZoneItem anyOfItem_Player_ZoneItem) ID() AnyOfItem_Player_ZoneItemID {
	return _anyOfItem_Player_ZoneItem.anyOfItem_Player_ZoneItem.ID
}`

const _Player_anyOfItem_Player_ZoneItem_func string = `func (_anyOfItem_Player_ZoneItem anyOfItem_Player_ZoneItem) Player() player {
	anyOfItem_Player_ZoneItem := _anyOfItem_Player_ZoneItem.anyOfItem_Player_ZoneItem.engine.anyOfItem_Player_ZoneItem(_anyOfItem_Player_ZoneItem.anyOfItem_Player_ZoneItem.ID)
	return anyOfItem_Player_ZoneItem.anyOfItem_Player_ZoneItem.engine.Player(anyOfItem_Player_ZoneItem.anyOfItem_Player_ZoneItem.Player)
}`

const _ZoneItem_anyOfItem_Player_ZoneItem_func string = `func (_anyOfItem_Player_ZoneItem anyOfItem_Player_ZoneItem) ZoneItem() zoneItem {
	anyOfItem_Player_ZoneItem := _anyOfItem_Player_ZoneItem.anyOfItem_Player_ZoneItem.engine.anyOfItem_Player_ZoneItem(_anyOfItem_Player_ZoneItem.anyOfItem_Player_ZoneItem.ID)
	return anyOfItem_Player_ZoneItem.anyOfItem_Player_ZoneItem.engine.ZoneItem(anyOfItem_Player_ZoneItem.anyOfItem_Player_ZoneItem.ZoneItem)
}`

const _Item_anyOfItem_Player_ZoneItem_func string = `func (_anyOfItem_Player_ZoneItem anyOfItem_Player_ZoneItem) Item() item {
	anyOfItem_Player_ZoneItem := _anyOfItem_Player_ZoneItem.anyOfItem_Player_ZoneItem.engine.anyOfItem_Player_ZoneItem(_anyOfItem_Player_ZoneItem.anyOfItem_Player_ZoneItem.ID)
	return anyOfItem_Player_ZoneItem.anyOfItem_Player_ZoneItem.engine.Item(anyOfItem_Player_ZoneItem.anyOfItem_Player_ZoneItem.Item)
}`

const deduplicateZoneItemIDs_func string = `func deduplicateZoneItemIDs(a []ZoneItemID, b []ZoneItemID) []ZoneItemID {
	check := zoneItemCheckPool.Get().(map[ZoneItemID]bool)
	for k := range check {
		delete(check, k)
	}
	deduped := zoneItemIDSlicePool.Get().([]ZoneItemID)[:0]
	for _, val := range a {
		check[val] = true
	}
	for _, val := range b {
		check[val] = true
	}
	for val := range check {
		deduped = append(deduped, val)
	}
	zoneItemCheckPool.Put(check)
	return deduped
}`

const deduplicateZoneIDs_func string = `func deduplicateZoneIDs(a []ZoneID, b []ZoneID) []ZoneID {
	check := zoneCheckPool.Get().(map[ZoneID]bool)
	for k := range check {
		delete(check, k)
	}
	deduped := zoneIDSlicePool.Get().([]ZoneID)[:0]
	for _, val := range a {
		check[val] = true
	}
	for _, val := range b {
		check[val] = true
	}
	for val := range check {
		deduped = append(deduped, val)
	}
	zoneCheckPool.Put(check)
	return deduped
}`

const deduplicatePlayerIDs_func string = `func deduplicatePlayerIDs(a []PlayerID, b []PlayerID) []PlayerID {
	check := playerCheckPool.Get().(map[PlayerID]bool)
	for k := range check {
		delete(check, k)
	}
	deduped := playerIDSlicePool.Get().([]PlayerID)[:0]
	for _, val := range a {
		check[val] = true
	}
	for _, val := range b {
		check[val] = true
	}
	for val := range check {
		deduped = append(deduped, val)
	}
	playerCheckPool.Put(check)
	return deduped
}`

const deduplicatePositionIDs_func string = `func deduplicatePositionIDs(a []PositionID, b []PositionID) []PositionID {
	check := positionCheckPool.Get().(map[PositionID]bool)
	for k := range check {
		delete(check, k)
	}
	deduped := positionIDSlicePool.Get().([]PositionID)[:0]
	for _, val := range a {
		check[val] = true
	}
	for _, val := range b {
		check[val] = true
	}
	for val := range check {
		deduped = append(deduped, val)
	}
	positionCheckPool.Put(check)
	return deduped
}`

const deduplicateItemIDs_func string = `func deduplicateItemIDs(a []ItemID, b []ItemID) []ItemID {
	check := itemCheckPool.Get().(map[ItemID]bool)
	for k := range check {
		delete(check, k)
	}
	deduped := itemIDSlicePool.Get().([]ItemID)[:0]
	for _, val := range a {
		check[val] = true
	}
	for _, val := range b {
		check[val] = true
	}
	for val := range check {
		deduped = append(deduped, val)
	}
	itemCheckPool.Put(check)
	return deduped
}`

const deduplicateGearScoreIDs_func string = `func deduplicateGearScoreIDs(a []GearScoreID, b []GearScoreID) []GearScoreID {
	check := gearScoreCheckPool.Get().(map[GearScoreID]bool)
	for k := range check {
		delete(check, k)
	}
	deduped := gearScoreIDSlicePool.Get().([]GearScoreID)[:0]
	for _, val := range a {
		check[val] = true
	}
	for _, val := range b {
		check[val] = true
	}
	for val := range check {
		deduped = append(deduped, val)
	}
	gearScoreCheckPool.Put(check)
	return deduped
}`

const deduplicateEquipmentSetIDs_func string = `func deduplicateEquipmentSetIDs(a []EquipmentSetID, b []EquipmentSetID) []EquipmentSetID {
	check := equipmentSetCheckPool.Get().(map[EquipmentSetID]bool)
	for k := range check {
		delete(check, k)
	}
	deduped := equipmentSetIDSlicePool.Get().([]EquipmentSetID)[:0]
	for _, val := range a {
		check[val] = true
	}
	for _, val := range b {
		check[val] = true
	}
	for val := range check {
		deduped = append(deduped, val)
	}
	equipmentSetCheckPool.Put(check)
	return deduped
}`

const deduplicatePlayerTargetedByRefIDs_func string = `func deduplicatePlayerTargetedByRefIDs(a []PlayerTargetedByRefID, b []PlayerTargetedByRefID) []PlayerTargetedByRefID {
	check := playerTargetedByRefCheckPool.Get().(map[PlayerTargetedByRefID]bool)
	for k := range check {
		delete(check, k)
	}
	deduped := playerTargetedByRefIDSlicePool.Get().([]PlayerTargetedByRefID)[:0]
	for _, val := range a {
		check[val] = true
	}
	for _, val := range b {
		check[val] = true
	}
	for val := range check {
		deduped = append(deduped, val)
	}
	playerTargetedByRefCheckPool.Put(check)
	return deduped
}`

const deduplicatePlayerTargetRefIDs_func string = `func deduplicatePlayerTargetRefIDs(a []PlayerTargetRefID, b []PlayerTargetRefID) []PlayerTargetRefID {
	check := playerTargetRefCheckPool.Get().(map[PlayerTargetRefID]bool)
	for k := range check {
		delete(check, k)
	}
	deduped := playerTargetRefIDSlicePool.Get().([]PlayerTargetRefID)[:0]
	for _, val := range a {
		check[val] = true
	}
	for _, val := range b {
		check[val] = true
	}
	for val := range check {
		deduped = append(deduped, val)
	}
	playerTargetRefCheckPool.Put(check)
	return deduped
}`

const deduplicateItemBoundToRefIDs_func string = `func deduplicateItemBoundToRefIDs(a []ItemBoundToRefID, b []ItemBoundToRefID) []ItemBoundToRefID {
	check := itemBoundToRefCheckPool.Get().(map[ItemBoundToRefID]bool)
	for k := range check {
		delete(check, k)
	}
	deduped := itemBoundToRefIDSlicePool.Get().([]ItemBoundToRefID)[:0]
	for _, val := range a {
		check[val] = true
	}
	for _, val := range b {
		check[val] = true
	}
	for val := range check {
		deduped = append(deduped, val)
	}
	itemBoundToRefCheckPool.Put(check)
	return deduped
}`

const deduplicatePlayerGuildMemberRefIDs_func string = `func deduplicatePlayerGuildMemberRefIDs(a []PlayerGuildMemberRefID, b []PlayerGuildMemberRefID) []PlayerGuildMemberRefID {
	check := playerGuildMemberRefCheckPool.Get().(map[PlayerGuildMemberRefID]bool)
	for k := range check {
		delete(check, k)
	}
	deduped := playerGuildMemberRefIDSlicePool.Get().([]PlayerGuildMemberRefID)[:0]
	for _, val := range a {
		check[val] = true
	}
	for _, val := range b {
		check[val] = true
	}
	for val := range check {
		deduped = append(deduped, val)
	}
	playerGuildMemberRefCheckPool.Put(check)
	return deduped
}`

const deduplicatePlayerEquipmentSetRefIDs_func string = `func deduplicatePlayerEquipmentSetRefIDs(a []PlayerEquipmentSetRefID, b []PlayerEquipmentSetRefID) []PlayerEquipmentSetRefID {
	check := playerEquipmentSetRefCheckPool.Get().(map[PlayerEquipmentSetRefID]bool)
	for k := range check {
		delete(check, k)
	}
	deduped := playerEquipmentSetRefIDSlicePool.Get().([]PlayerEquipmentSetRefID)[:0]
	for _, val := range a {
		check[val] = true
	}
	for _, val := range b {
		check[val] = true
	}
	for val := range check {
		deduped = append(deduped, val)
	}
	playerEquipmentSetRefCheckPool.Put(check)
	return deduped
}`

const deduplicateEquipmentSetEquipmentRefIDs_func string = `func deduplicateEquipmentSetEquipmentRefIDs(a []EquipmentSetEquipmentRefID, b []EquipmentSetEquipmentRefID) []EquipmentSetEquipmentRefID {
	check := equipmentSetEquipmentRefCheckPool.Get().(map[EquipmentSetEquipmentRefID]bool)
	for k := range check {
		delete(check, k)
	}
	deduped := equipmentSetEquipmentRefIDSlicePool.Get().([]EquipmentSetEquipmentRefID)[:0]
	for _, val := range a {
		check[val] = true
	}
	for _, val := range b {
		check[val] = true
	}
	for val := range check {
		deduped = append(deduped, val)
	}
	equipmentSetEquipmentRefCheckPool.Put(check)
	return deduped
}`

const allEquipmentSetIDs_Engine_func string = `func (engine Engine) allEquipmentSetIDs() []EquipmentSetID {
	stateEquipmentSetIDs := equipmentSetIDSlicePool.Get().([]EquipmentSetID)[:0]
	for equipmentSetID := range engine.State.EquipmentSet {
		stateEquipmentSetIDs = append(stateEquipmentSetIDs, equipmentSetID)
	}
	patchEquipmentSetIDs := equipmentSetIDSlicePool.Get().([]EquipmentSetID)[:0]
	for equipmentSetID := range engine.Patch.EquipmentSet {
		patchEquipmentSetIDs = append(patchEquipmentSetIDs, equipmentSetID)
	}
	dedupedIDs := deduplicateEquipmentSetIDs(stateEquipmentSetIDs, patchEquipmentSetIDs)
	equipmentSetIDSlicePool.Put(stateEquipmentSetIDs)
	equipmentSetIDSlicePool.Put(patchEquipmentSetIDs)
	return dedupedIDs
}`

const allGearScoreIDs_Engine_func string = `func (engine Engine) allGearScoreIDs() []GearScoreID {
	stateGearScoreIDs := gearScoreIDSlicePool.Get().([]GearScoreID)[:0]
	for gearScoreID := range engine.State.GearScore {
		stateGearScoreIDs = append(stateGearScoreIDs, gearScoreID)
	}
	patchGearScoreIDs := gearScoreIDSlicePool.Get().([]GearScoreID)[:0]
	for gearScoreID := range engine.Patch.GearScore {
		patchGearScoreIDs = append(patchGearScoreIDs, gearScoreID)
	}
	dedupedIDs := deduplicateGearScoreIDs(stateGearScoreIDs, patchGearScoreIDs)
	gearScoreIDSlicePool.Put(stateGearScoreIDs)
	gearScoreIDSlicePool.Put(patchGearScoreIDs)
	return dedupedIDs
}`

const allItemIDs_Engine_func string = `func (engine Engine) allItemIDs() []ItemID {
	stateItemIDs := itemIDSlicePool.Get().([]ItemID)[:0]
	for itemID := range engine.State.Item {
		stateItemIDs = append(stateItemIDs, itemID)
	}
	patchItemIDs := itemIDSlicePool.Get().([]ItemID)[:0]
	for itemID := range engine.Patch.Item {
		patchItemIDs = append(patchItemIDs, itemID)
	}
	dedupedIDs := deduplicateItemIDs(stateItemIDs, patchItemIDs)
	itemIDSlicePool.Put(stateItemIDs)
	itemIDSlicePool.Put(patchItemIDs)
	return dedupedIDs
}`

const allPositionIDs_Engine_func string = `func (engine Engine) allPositionIDs() []PositionID {
	statePositionIDs := positionIDSlicePool.Get().([]PositionID)[:0]
	for positionID := range engine.State.Position {
		statePositionIDs = append(statePositionIDs, positionID)
	}
	patchPositionIDs := positionIDSlicePool.Get().([]PositionID)[:0]
	for positionID := range engine.Patch.Position {
		patchPositionIDs = append(patchPositionIDs, positionID)
	}
	dedupedIDs := deduplicatePositionIDs(statePositionIDs, patchPositionIDs)
	positionIDSlicePool.Put(statePositionIDs)
	positionIDSlicePool.Put(patchPositionIDs)
	return dedupedIDs
}`

const allZoneIDs_Engine_func string = `func (engine Engine) allZoneIDs() []ZoneID {
	stateZoneIDs := zoneIDSlicePool.Get().([]ZoneID)[:0]
	for zoneID := range engine.State.Zone {
		stateZoneIDs = append(stateZoneIDs, zoneID)
	}
	patchZoneIDs := zoneIDSlicePool.Get().([]ZoneID)[:0]
	for zoneID := range engine.Patch.Zone {
		patchZoneIDs = append(patchZoneIDs, zoneID)
	}
	dedupedIDs := deduplicateZoneIDs(stateZoneIDs, patchZoneIDs)
	zoneIDSlicePool.Put(stateZoneIDs)
	zoneIDSlicePool.Put(patchZoneIDs)
	return dedupedIDs
}`

const allZoneItemIDs_Engine_func string = `func (engine Engine) allZoneItemIDs() []ZoneItemID {
	stateZoneItemIDs := zoneItemIDSlicePool.Get().([]ZoneItemID)[:0]
	for zoneItemID := range engine.State.ZoneItem {
		stateZoneItemIDs = append(stateZoneItemIDs, zoneItemID)
	}
	patchZoneItemIDs := zoneItemIDSlicePool.Get().([]ZoneItemID)[:0]
	for zoneItemID := range engine.Patch.ZoneItem {
		patchZoneItemIDs = append(patchZoneItemIDs, zoneItemID)
	}
	dedupedIDs := deduplicateZoneItemIDs(stateZoneItemIDs, patchZoneItemIDs)
	zoneItemIDSlicePool.Put(stateZoneItemIDs)
	zoneItemIDSlicePool.Put(patchZoneItemIDs)
	return dedupedIDs
}`

const allPlayerIDs_Engine_func string = `func (engine Engine) allPlayerIDs() []PlayerID {
	statePlayerIDs := playerIDSlicePool.Get().([]PlayerID)[:0]
	for playerID := range engine.State.Player {
		statePlayerIDs = append(statePlayerIDs, playerID)
	}
	patchPlayerIDs := playerIDSlicePool.Get().([]PlayerID)[:0]
	for playerID := range engine.Patch.Player {
		patchPlayerIDs = append(patchPlayerIDs, playerID)
	}
	dedupedIDs := deduplicatePlayerIDs(statePlayerIDs, patchPlayerIDs)
	playerIDSlicePool.Put(statePlayerIDs)
	playerIDSlicePool.Put(patchPlayerIDs)
	return dedupedIDs
}`

const allPlayerTargetedByRefIDs_Engine_func string = `func (engine Engine) allPlayerTargetedByRefIDs() []PlayerTargetedByRefID {
	statePlayerTargetedByRefIDs := playerTargetedByRefIDSlicePool.Get().([]PlayerTargetedByRefID)[:0]
	for playerTargetedByRefID := range engine.State.PlayerTargetedByRef {
		statePlayerTargetedByRefIDs = append(statePlayerTargetedByRefIDs, playerTargetedByRefID)
	}
	patchPlayerTargetedByRefIDs := playerTargetedByRefIDSlicePool.Get().([]PlayerTargetedByRefID)[:0]
	for playerTargetedByRefID := range engine.Patch.PlayerTargetedByRef {
		patchPlayerTargetedByRefIDs = append(patchPlayerTargetedByRefIDs, playerTargetedByRefID)
	}
	dedupedIDs := deduplicatePlayerTargetedByRefIDs(statePlayerTargetedByRefIDs, patchPlayerTargetedByRefIDs)
	playerTargetedByRefIDSlicePool.Put(statePlayerTargetedByRefIDs)
	playerTargetedByRefIDSlicePool.Put(patchPlayerTargetedByRefIDs)
	return dedupedIDs
}`

const allPlayerTargetRefIDs_Engine_func string = `func (engine Engine) allPlayerTargetRefIDs() []PlayerTargetRefID {
	statePlayerTargetRefIDs := playerTargetRefIDSlicePool.Get().([]PlayerTargetRefID)[:0]
	for playerTargetRefID := range engine.State.PlayerTargetRef {
		statePlayerTargetRefIDs = append(statePlayerTargetRefIDs, playerTargetRefID)
	}
	patchPlayerTargetRefIDs := playerTargetRefIDSlicePool.Get().([]PlayerTargetRefID)[:0]
	for playerTargetRefID := range engine.Patch.PlayerTargetRef {
		patchPlayerTargetRefIDs = append(patchPlayerTargetRefIDs, playerTargetRefID)
	}
	dedupedIDs := deduplicatePlayerTargetRefIDs(statePlayerTargetRefIDs, patchPlayerTargetRefIDs)
	playerTargetRefIDSlicePool.Put(statePlayerTargetRefIDs)
	playerTargetRefIDSlicePool.Put(patchPlayerTargetRefIDs)
	return dedupedIDs
}`

const allItemBoundToRefIDs_Engine_func string = `func (engine Engine) allItemBoundToRefIDs() []ItemBoundToRefID {
	stateItemBoundToRefIDs := itemBoundToRefIDSlicePool.Get().([]ItemBoundToRefID)[:0]
	for itemBoundToRefID := range engine.State.ItemBoundToRef {
		stateItemBoundToRefIDs = append(stateItemBoundToRefIDs, itemBoundToRefID)
	}
	patchItemBoundToRefIDs := itemBoundToRefIDSlicePool.Get().([]ItemBoundToRefID)[:0]
	for itemBoundToRefID := range engine.Patch.ItemBoundToRef {
		patchItemBoundToRefIDs = append(patchItemBoundToRefIDs, itemBoundToRefID)
	}
	dedupedIDs := deduplicateItemBoundToRefIDs(stateItemBoundToRefIDs, patchItemBoundToRefIDs)
	itemBoundToRefIDSlicePool.Put(stateItemBoundToRefIDs)
	itemBoundToRefIDSlicePool.Put(patchItemBoundToRefIDs)
	return dedupedIDs
}`

const allPlayerGuildMemberRefIDs_Engine_func string = `func (engine Engine) allPlayerGuildMemberRefIDs() []PlayerGuildMemberRefID {
	statePlayerGuildMemberRefIDs := playerGuildMemberRefIDSlicePool.Get().([]PlayerGuildMemberRefID)[:0]
	for playerGuildMemberRefID := range engine.State.PlayerGuildMemberRef {
		statePlayerGuildMemberRefIDs = append(statePlayerGuildMemberRefIDs, playerGuildMemberRefID)
	}
	patchPlayerGuildMemberRefIDs := playerGuildMemberRefIDSlicePool.Get().([]PlayerGuildMemberRefID)[:0]
	for playerGuildMemberRefID := range engine.Patch.PlayerGuildMemberRef {
		patchPlayerGuildMemberRefIDs = append(patchPlayerGuildMemberRefIDs, playerGuildMemberRefID)
	}
	dedupedIDs := deduplicatePlayerGuildMemberRefIDs(statePlayerGuildMemberRefIDs, patchPlayerGuildMemberRefIDs)
	playerGuildMemberRefIDSlicePool.Put(statePlayerGuildMemberRefIDs)
	playerGuildMemberRefIDSlicePool.Put(patchPlayerGuildMemberRefIDs)
	return dedupedIDs
}`

const allPlayerEquipmentSetRefIDs_Engine_func string = `func (engine Engine) allPlayerEquipmentSetRefIDs() []PlayerEquipmentSetRefID {
	statePlayerEquipmentSetRefIDs := playerEquipmentSetRefIDSlicePool.Get().([]PlayerEquipmentSetRefID)[:0]
	for playerEquipmentSetRefID := range engine.State.PlayerEquipmentSetRef {
		statePlayerEquipmentSetRefIDs = append(statePlayerEquipmentSetRefIDs, playerEquipmentSetRefID)
	}
	patchPlayerEquipmentSetRefIDs := playerEquipmentSetRefIDSlicePool.Get().([]PlayerEquipmentSetRefID)[:0]
	for playerEquipmentSetRefID := range engine.Patch.PlayerEquipmentSetRef {
		patchPlayerEquipmentSetRefIDs = append(patchPlayerEquipmentSetRefIDs, playerEquipmentSetRefID)
	}
	dedupedIDs := deduplicatePlayerEquipmentSetRefIDs(statePlayerEquipmentSetRefIDs, patchPlayerEquipmentSetRefIDs)
	playerEquipmentSetRefIDSlicePool.Put(statePlayerEquipmentSetRefIDs)
	playerEquipmentSetRefIDSlicePool.Put(patchPlayerEquipmentSetRefIDs)
	return dedupedIDs
}`

const allEquipmentSetEquipmentRefIDs_Engine_func string = `func (engine Engine) allEquipmentSetEquipmentRefIDs() []EquipmentSetEquipmentRefID {
	stateEquipmentSetEquipmentRefIDs := equipmentSetEquipmentRefIDSlicePool.Get().([]EquipmentSetEquipmentRefID)[:0]
	for equipmentSetEquipmentRefID := range engine.State.EquipmentSetEquipmentRef {
		stateEquipmentSetEquipmentRefIDs = append(stateEquipmentSetEquipmentRefIDs, equipmentSetEquipmentRefID)
	}
	patchEquipmentSetEquipmentRefIDs := equipmentSetEquipmentRefIDSlicePool.Get().([]EquipmentSetEquipmentRefID)[:0]
	for equipmentSetEquipmentRefID := range engine.Patch.EquipmentSetEquipmentRef {
		patchEquipmentSetEquipmentRefIDs = append(patchEquipmentSetEquipmentRefIDs, equipmentSetEquipmentRefID)
	}
	dedupedIDs := deduplicateEquipmentSetEquipmentRefIDs(stateEquipmentSetEquipmentRefIDs, patchEquipmentSetEquipmentRefIDs)
	equipmentSetEquipmentRefIDSlicePool.Put(stateEquipmentSetEquipmentRefIDs)
	equipmentSetEquipmentRefIDSlicePool.Put(patchEquipmentSetEquipmentRefIDs)
	return dedupedIDs
}`

const mergeGearScoreIDs_func string = `func mergeGearScoreIDs(currentIDs, nextIDs []GearScoreID) []GearScoreID {
	ids := make([]GearScoreID, len(currentIDs))
	copy(ids, currentIDs)
	var j int
	for _, currentID := range currentIDs {
		if len(nextIDs) <= j || currentID != nextIDs[j] {
			continue
		}
		j += 1
	}
	for _, nextID := range nextIDs[j:] {
		ids = append(ids, nextID)
	}
	return ids
}`

const mergeItemIDs_func string = `func mergeItemIDs(currentIDs, nextIDs []ItemID) []ItemID {
	ids := make([]ItemID, len(currentIDs))
	copy(ids, currentIDs)
	var j int
	for _, currentID := range currentIDs {
		if len(nextIDs) <= j || currentID != nextIDs[j] {
			continue
		}
		j += 1
	}
	for _, nextID := range nextIDs[j:] {
		ids = append(ids, nextID)
	}
	return ids
}`

const mergePlayerIDs_func string = `func mergePlayerIDs(currentIDs, nextIDs []PlayerID) []PlayerID {
	ids := make([]PlayerID, len(currentIDs))
	copy(ids, currentIDs)
	var j int
	for _, currentID := range currentIDs {
		if len(nextIDs) <= j || currentID != nextIDs[j] {
			continue
		}
		j += 1
	}
	for _, nextID := range nextIDs[j:] {
		ids = append(ids, nextID)
	}
	return ids
}`

const mergePositionIDs_func string = `func mergePositionIDs(currentIDs, nextIDs []PositionID) []PositionID {
	ids := make([]PositionID, len(currentIDs))
	copy(ids, currentIDs)
	var j int
	for _, currentID := range currentIDs {
		if len(nextIDs) <= j || currentID != nextIDs[j] {
			continue
		}
		j += 1
	}
	for _, nextID := range nextIDs[j:] {
		ids = append(ids, nextID)
	}
	return ids
}`

const mergeZoneIDs_func string = `func mergeZoneIDs(currentIDs, nextIDs []ZoneID) []ZoneID {
	ids := make([]ZoneID, len(currentIDs))
	copy(ids, currentIDs)
	var j int
	for _, currentID := range currentIDs {
		if len(nextIDs) <= j || currentID != nextIDs[j] {
			continue
		}
		j += 1
	}
	for _, nextID := range nextIDs[j:] {
		ids = append(ids, nextID)
	}
	return ids
}`

const mergeZoneItemIDs_func string = `func mergeZoneItemIDs(currentIDs, nextIDs []ZoneItemID) []ZoneItemID {
	ids := make([]ZoneItemID, len(currentIDs))
	copy(ids, currentIDs)
	var j int
	for _, currentID := range currentIDs {
		if len(nextIDs) <= j || currentID != nextIDs[j] {
			continue
		}
		j += 1
	}
	for _, nextID := range nextIDs[j:] {
		ids = append(ids, nextID)
	}
	return ids
}`

const mergeEquipmentSetIDs_func string = `func mergeEquipmentSetIDs(currentIDs, nextIDs []EquipmentSetID) []EquipmentSetID {
	ids := make([]EquipmentSetID, len(currentIDs))
	copy(ids, currentIDs)
	var j int
	for _, currentID := range currentIDs {
		if len(nextIDs) <= j || currentID != nextIDs[j] {
			continue
		}
		j += 1
	}
	for _, nextID := range nextIDs[j:] {
		ids = append(ids, nextID)
	}
	return ids
}`

const mergeItemBoundToRefIDs_func string = `func mergeItemBoundToRefIDs(currentIDs, nextIDs []ItemBoundToRefID) []ItemBoundToRefID {
	ids := make([]ItemBoundToRefID, len(currentIDs))
	copy(ids, currentIDs)
	var j int
	for _, currentID := range currentIDs {
		if len(nextIDs) <= j || currentID != nextIDs[j] {
			continue
		}
		j += 1
	}
	for _, nextID := range nextIDs[j:] {
		ids = append(ids, nextID)
	}
	return ids
}`

const mergeEquipmentSetEquipmentRefIDs_func string = `func mergeEquipmentSetEquipmentRefIDs(currentIDs, nextIDs []EquipmentSetEquipmentRefID) []EquipmentSetEquipmentRefID {
	ids := make([]EquipmentSetEquipmentRefID, len(currentIDs))
	copy(ids, currentIDs)
	var j int
	for _, currentID := range currentIDs {
		if len(nextIDs) <= j || currentID != nextIDs[j] {
			continue
		}
		j += 1
	}
	for _, nextID := range nextIDs[j:] {
		ids = append(ids, nextID)
	}
	return ids
}`

const mergePlayerGuildMemberRefIDs_func string = `func mergePlayerGuildMemberRefIDs(currentIDs, nextIDs []PlayerGuildMemberRefID) []PlayerGuildMemberRefID {
	ids := make([]PlayerGuildMemberRefID, len(currentIDs))
	copy(ids, currentIDs)
	var j int
	for _, currentID := range currentIDs {
		if len(nextIDs) <= j || currentID != nextIDs[j] {
			continue
		}
		j += 1
	}
	for _, nextID := range nextIDs[j:] {
		ids = append(ids, nextID)
	}
	return ids
}`

const mergePlayerTargetedByRefIDs_func string = `func mergePlayerTargetedByRefIDs(currentIDs, nextIDs []PlayerTargetedByRefID) []PlayerTargetedByRefID {
	ids := make([]PlayerTargetedByRefID, len(currentIDs))
	copy(ids, currentIDs)
	var j int
	for _, currentID := range currentIDs {
		if len(nextIDs) <= j || currentID != nextIDs[j] {
			continue
		}
		j += 1
	}
	for _, nextID := range nextIDs[j:] {
		ids = append(ids, nextID)
	}
	return ids
}`

const mergePlayerTargetRefIDs_func string = `func mergePlayerTargetRefIDs(currentIDs, nextIDs []PlayerTargetRefID) []PlayerTargetRefID {
	ids := make([]PlayerTargetRefID, len(currentIDs))
	copy(ids, currentIDs)
	var j int
	for _, currentID := range currentIDs {
		if len(nextIDs) <= j || currentID != nextIDs[j] {
			continue
		}
		j += 1
	}
	for _, nextID := range nextIDs[j:] {
		ids = append(ids, nextID)
	}
	return ids
}`

const mergePlayerEquipmentSetRefIDs_func string = `func mergePlayerEquipmentSetRefIDs(currentIDs, nextIDs []PlayerEquipmentSetRefID) []PlayerEquipmentSetRefID {
	ids := make([]PlayerEquipmentSetRefID, len(currentIDs))
	copy(ids, currentIDs)
	var j int
	for _, currentID := range currentIDs {
		if len(nextIDs) <= j || currentID != nextIDs[j] {
			continue
		}
		j += 1
	}
	for _, nextID := range nextIDs[j:] {
		ids = append(ids, nextID)
	}
	return ids
}`

const mergeAnyOfPlayer_ZoneItemIDs_func string = `func mergeAnyOfPlayer_ZoneItemIDs(currentIDs, nextIDs []AnyOfPlayer_ZoneItemID) []AnyOfPlayer_ZoneItemID {
	ids := make([]AnyOfPlayer_ZoneItemID, len(currentIDs))
	copy(ids, currentIDs)
	var j int
	for _, currentID := range currentIDs {
		if len(nextIDs) <= j || currentID != nextIDs[j] {
			continue
		}
		j += 1
	}
	for _, nextID := range nextIDs[j:] {
		ids = append(ids, nextID)
	}
	return ids
}`

const mergeAnyOfPlayer_PositionIDs_func string = `func mergeAnyOfPlayer_PositionIDs(currentIDs, nextIDs []AnyOfPlayer_PositionID) []AnyOfPlayer_PositionID {
	ids := make([]AnyOfPlayer_PositionID, len(currentIDs))
	copy(ids, currentIDs)
	var j int
	for _, currentID := range currentIDs {
		if len(nextIDs) <= j || currentID != nextIDs[j] {
			continue
		}
		j += 1
	}
	for _, nextID := range nextIDs[j:] {
		ids = append(ids, nextID)
	}
	return ids
}`

const mergeAnyOfItem_Player_ZoneItemIDs_func string = `func mergeAnyOfItem_Player_ZoneItemIDs(currentIDs, nextIDs []AnyOfItem_Player_ZoneItemID) []AnyOfItem_Player_ZoneItemID {
	ids := make([]AnyOfItem_Player_ZoneItemID, len(currentIDs))
	copy(ids, currentIDs)
	var j int
	for _, currentID := range currentIDs {
		if len(nextIDs) <= j || currentID != nextIDs[j] {
			continue
		}
		j += 1
	}
	for _, nextID := range nextIDs[j:] {
		ids = append(ids, nextID)
	}
	return ids
}`

const path_go_import string = `import "strconv"`

const equipmentSetIdentifier_type string = `const (
	equipmentSetIdentifier	int	= -1
	gearScoreIdentifier	int	= -2
	itemIdentifier		int	= -3
	originIdentifier	int	= -4
	playerIdentifier	int	= -5
	itemsIdentifier		int	= -6
	positionIdentifier	int	= -7
	zoneIdentifier		int	= -8
	interactablesIdentifier	int	= -9
	playersIdentifier	int	= -10
	zoneItemIdentifier	int	= -11
)`

const path_type string = `type path []int`

const newPath_func string = `func newPath(elementIdentifier int) path {
	return []int{elementIdentifier}
}`

const equipmentSet_path_func string = `func (p path) equipmentSet() path {
	newPath := make([]int, len(p), len(p)+1)
	copy(newPath, p)
	newPath = append(newPath, equipmentSetIdentifier)
	return newPath
}`

const items_path_func string = `func (p path) items() path {
	newPath := make([]int, len(p), len(p)+1)
	copy(newPath, p)
	newPath = append(newPath, itemsIdentifier)
	return newPath
}`

const player_path_func string = `func (p path) player() path {
	newPath := make([]int, len(p), len(p)+1)
	copy(newPath, p)
	newPath = append(newPath, playerIdentifier)
	return newPath
}`

const gearScore_path_func string = `func (p path) gearScore() path {
	newPath := make([]int, len(p), len(p)+1)
	copy(newPath, p)
	newPath = append(newPath, gearScoreIdentifier)
	return newPath
}`

const position_path_func string = `func (p path) position() path {
	newPath := make([]int, len(p), len(p)+1)
	copy(newPath, p)
	newPath = append(newPath, positionIdentifier)
	return newPath
}`

const players_path_func string = `func (p path) players() path {
	newPath := make([]int, len(p), len(p)+1)
	copy(newPath, p)
	newPath = append(newPath, playersIdentifier)
	return newPath
}`

const interactables_path_func string = `func (p path) interactables() path {
	newPath := make([]int, len(p), len(p)+1)
	copy(newPath, p)
	newPath = append(newPath, interactablesIdentifier)
	return newPath
}`

const item_path_func string = `func (p path) item() path {
	newPath := make([]int, len(p), len(p)+1)
	copy(newPath, p)
	newPath = append(newPath, itemIdentifier)
	return newPath
}`

const zone_path_func string = `func (p path) zone() path {
	newPath := make([]int, len(p), len(p)+1)
	copy(newPath, p)
	newPath = append(newPath, zoneIdentifier)
	return newPath
}`

const zoneItem_path_func string = `func (p path) zoneItem() path {
	newPath := make([]int, len(p), len(p)+1)
	copy(newPath, p)
	newPath = append(newPath, zoneItemIdentifier)
	return newPath
}`

const origin_path_func string = `func (p path) origin() path {
	newPath := make([]int, len(p), len(p)+1)
	copy(newPath, p)
	newPath = append(newPath, originIdentifier)
	return newPath
}`

const id_path_func string = `func (p path) id(id int) path {
	newPath := make([]int, len(p), len(p)+1)
	copy(newPath, p)
	newPath = append(newPath, id)
	return newPath
}`

const equals_path_func string = `func (p path) equals(parentPath path) bool {
	if len(p) != len(parentPath) {
		return false
	}
	for i, segment := range parentPath {
		if segment != p[i] {
			return false
		}
	}
	return true
}`

const toJSONPath_path_func string = `func (p path) toJSONPath() string {
	jsonPath := "$"
	for i, seg := range p {
		if seg < 0 {
			jsonPath += "." + pathIdentifierToString(seg)
		} else if i == 1 {
			jsonPath += "." + strconv.Itoa(seg)
		} else {
			jsonPath += "[" + strconv.Itoa(seg) + "]"
		}
	}
	return jsonPath
}`

const pathIdentifierToString_func string = `func pathIdentifierToString(identifier int) string {
	switch identifier {
	case equipmentSetIdentifier:
		return "equipmentSet"
	case gearScoreIdentifier:
		return "gearScore"
	case itemIdentifier:
		return "item"
	case originIdentifier:
		return "origin"
	case playerIdentifier:
		return "player"
	case itemsIdentifier:
		return "items"
	case positionIdentifier:
		return "position"
	case zoneIdentifier:
		return "zone"
	case interactablesIdentifier:
		return "interactables"
	case playersIdentifier:
		return "players"
	case zoneItemIdentifier:
		return "zoneItem"
	}
	return ""
}`

const pools_go_import string = `import (
	"sync"
)`

const zoneItemCheckPool_type string = `var zoneItemCheckPool = sync.Pool{New: func() interface{} {
	return make(map[ZoneItemID]bool)
}}`

const zoneItemIDSlicePool_type string = `var zoneItemIDSlicePool = sync.Pool{New: func() interface{} {
	return make([]ZoneItemID, 0)
}}`

const zoneCheckPool_type string = `var zoneCheckPool = sync.Pool{New: func() interface{} {
	return make(map[ZoneID]bool)
}}`

const zoneIDSlicePool_type string = `var zoneIDSlicePool = sync.Pool{New: func() interface{} {
	return make([]ZoneID, 0)
}}`

const playerCheckPool_type string = `var playerCheckPool = sync.Pool{New: func() interface{} {
	return make(map[PlayerID]bool)
}}`

const playerIDSlicePool_type string = `var playerIDSlicePool = sync.Pool{New: func() interface{} {
	return make([]PlayerID, 0)
}}`

const positionCheckPool_type string = `var positionCheckPool = sync.Pool{New: func() interface{} {
	return make(map[PositionID]bool)
}}`

const positionIDSlicePool_type string = `var positionIDSlicePool = sync.Pool{New: func() interface{} {
	return make([]PositionID, 0)
}}`

const itemCheckPool_type string = `var itemCheckPool = sync.Pool{New: func() interface{} {
	return make(map[ItemID]bool)
}}`

const itemIDSlicePool_type string = `var itemIDSlicePool = sync.Pool{New: func() interface{} {
	return make([]ItemID, 0)
}}`

const gearScoreCheckPool_type string = `var gearScoreCheckPool = sync.Pool{New: func() interface{} {
	return make(map[GearScoreID]bool)
}}`

const gearScoreIDSlicePool_type string = `var gearScoreIDSlicePool = sync.Pool{New: func() interface{} {
	return make([]GearScoreID, 0)
}}`

const equipmentSetCheckPool_type string = `var equipmentSetCheckPool = sync.Pool{New: func() interface{} {
	return make(map[EquipmentSetID]bool)
}}`

const equipmentSetIDSlicePool_type string = `var equipmentSetIDSlicePool = sync.Pool{New: func() interface{} {
	return make([]EquipmentSetID, 0)
}}`

const playerTargetedByRefCheckPool_type string = `var playerTargetedByRefCheckPool = sync.Pool{New: func() interface{} {
	return make(map[PlayerTargetedByRefID]bool)
}}`

const playerTargetedByRefIDSlicePool_type string = `var playerTargetedByRefIDSlicePool = sync.Pool{New: func() interface{} {
	return make([]PlayerTargetedByRefID, 0)
}}`

const playerTargetRefCheckPool_type string = `var playerTargetRefCheckPool = sync.Pool{New: func() interface{} {
	return make(map[PlayerTargetRefID]bool)
}}`

const playerTargetRefIDSlicePool_type string = `var playerTargetRefIDSlicePool = sync.Pool{New: func() interface{} {
	return make([]PlayerTargetRefID, 0)
}}`

const itemBoundToRefCheckPool_type string = `var itemBoundToRefCheckPool = sync.Pool{New: func() interface{} {
	return make(map[ItemBoundToRefID]bool)
}}`

const itemBoundToRefIDSlicePool_type string = `var itemBoundToRefIDSlicePool = sync.Pool{New: func() interface{} {
	return make([]ItemBoundToRefID, 0)
}}`

const playerGuildMemberRefCheckPool_type string = `var playerGuildMemberRefCheckPool = sync.Pool{New: func() interface{} {
	return make(map[PlayerGuildMemberRefID]bool)
}}`

const playerGuildMemberRefIDSlicePool_type string = `var playerGuildMemberRefIDSlicePool = sync.Pool{New: func() interface{} {
	return make([]PlayerGuildMemberRefID, 0)
}}`

const playerEquipmentSetRefCheckPool_type string = `var playerEquipmentSetRefCheckPool = sync.Pool{New: func() interface{} {
	return make(map[PlayerEquipmentSetRefID]bool)
}}`

const playerEquipmentSetRefIDSlicePool_type string = `var playerEquipmentSetRefIDSlicePool = sync.Pool{New: func() interface{} {
	return make([]PlayerEquipmentSetRefID, 0)
}}`

const equipmentSetEquipmentRefCheckPool_type string = `var equipmentSetEquipmentRefCheckPool = sync.Pool{New: func() interface{} {
	return make(map[EquipmentSetEquipmentRefID]bool)
}}`

const equipmentSetEquipmentRefIDSlicePool_type string = `var equipmentSetEquipmentRefIDSlicePool = sync.Pool{New: func() interface{} {
	return make([]EquipmentSetEquipmentRefID, 0)
}}`

const _IsSet_itemBoundToRef_func string = `func (_ref itemBoundToRef) IsSet() (itemBoundToRef, bool) {
	ref := _ref.itemBoundToRef.engine.itemBoundToRef(_ref.itemBoundToRef.ID)
	return ref, ref.itemBoundToRef.ID != 0
}`

const _Unset_itemBoundToRef_func string = `func (_ref itemBoundToRef) Unset() {
	ref := _ref.itemBoundToRef.engine.itemBoundToRef(_ref.itemBoundToRef.ID)
	if ref.itemBoundToRef.OperationKind == OperationKindDelete {
		return
	}
	ref.itemBoundToRef.engine.deleteItemBoundToRef(ref.itemBoundToRef.ID)
	parent := ref.itemBoundToRef.engine.Item(ref.itemBoundToRef.ParentID).item
	if parent.OperationKind == OperationKindDelete {
		return
	}
	parent.BoundTo = 0
	parent.OperationKind = OperationKindUpdate
	ref.itemBoundToRef.engine.Patch.Item[parent.ID] = parent
}`

const _Get_itemBoundToRef_func string = `func (_ref itemBoundToRef) Get() player {
	ref := _ref.itemBoundToRef.engine.itemBoundToRef(_ref.itemBoundToRef.ID)
	return ref.itemBoundToRef.engine.Player(ref.itemBoundToRef.ReferencedElementID)
}`

const _Get_playerGuildMemberRef_func string = `func (_ref playerGuildMemberRef) Get() player {
	ref := _ref.playerGuildMemberRef.engine.playerGuildMemberRef(_ref.playerGuildMemberRef.ID)
	return ref.playerGuildMemberRef.engine.Player(ref.playerGuildMemberRef.ReferencedElementID)
}`

const _Get_playerEquipmentSetRef_func string = `func (_ref playerEquipmentSetRef) Get() equipmentSet {
	ref := _ref.playerEquipmentSetRef.engine.playerEquipmentSetRef(_ref.playerEquipmentSetRef.ID)
	return ref.playerEquipmentSetRef.engine.EquipmentSet(ref.playerEquipmentSetRef.ReferencedElementID)
}`

const _Get_equipmentSetEquipmentRef_func string = `func (_ref equipmentSetEquipmentRef) Get() item {
	ref := _ref.equipmentSetEquipmentRef.engine.equipmentSetEquipmentRef(_ref.equipmentSetEquipmentRef.ID)
	return ref.equipmentSetEquipmentRef.engine.Item(ref.equipmentSetEquipmentRef.ReferencedElementID)
}`

const _IsSet_playerTargetRef_func string = `func (_ref playerTargetRef) IsSet() (playerTargetRef, bool) {
	ref := _ref.playerTargetRef.engine.playerTargetRef(_ref.playerTargetRef.ID)
	return ref, ref.playerTargetRef.ID != 0
}`

const _Unset_playerTargetRef_func string = `func (_ref playerTargetRef) Unset() {
	ref := _ref.playerTargetRef.engine.playerTargetRef(_ref.playerTargetRef.ID)
	if ref.playerTargetRef.OperationKind == OperationKindDelete {
		return
	}
	ref.playerTargetRef.engine.deletePlayerTargetRef(ref.playerTargetRef.ID)
	parent := ref.playerTargetRef.engine.Player(ref.playerTargetRef.ParentID).player
	if parent.OperationKind == OperationKindDelete {
		return
	}
	parent.Target = 0
	parent.OperationKind = OperationKindUpdate
	ref.playerTargetRef.engine.Patch.Player[parent.ID] = parent
}`

const _Get_playerTargetRef_func string = `func (_ref playerTargetRef) Get() anyOfPlayer_ZoneItemRef {
	ref := _ref.playerTargetRef.engine.playerTargetRef(_ref.playerTargetRef.ID)
	anyContainer := ref.playerTargetRef.engine.anyOfPlayer_ZoneItem(ref.playerTargetRef.ReferencedElementID)
	return anyOfPlayer_ZoneItemRef{anyOfPlayer_ZoneItem: anyContainer.anyOfPlayer_ZoneItem, anyOfPlayer_ZoneItemWrapper: anyContainer}
}`

const _Get_playerTargetedByRef_func string = `func (_ref playerTargetedByRef) Get() anyOfPlayer_ZoneItemRef {
	ref := _ref.playerTargetedByRef.engine.playerTargetedByRef(_ref.playerTargetedByRef.ID)
	anyContainer := ref.playerTargetedByRef.engine.anyOfPlayer_ZoneItem(ref.playerTargetedByRef.ReferencedElementID)
	return anyOfPlayer_ZoneItemRef{anyOfPlayer_ZoneItem: anyContainer.anyOfPlayer_ZoneItem, anyOfPlayer_ZoneItemWrapper: anyContainer}
}`

const dereferenceItemBoundToRefs_Engine_func string = `func (engine *Engine) dereferenceItemBoundToRefs(playerID PlayerID) {
	allItemBoundToRefIDs := engine.allItemBoundToRefIDs()
	for _, refID := range allItemBoundToRefIDs {
		ref := engine.itemBoundToRef(refID)
		if ref.itemBoundToRef.ReferencedElementID == playerID {
			ref.Unset()
		}
	}
	itemBoundToRefIDSlicePool.Put(allItemBoundToRefIDs)
}`

const dereferenceEquipmentSetEquipmentRefs_Engine_func string = `func (engine *Engine) dereferenceEquipmentSetEquipmentRefs(itemID ItemID) {
	allEquipmentSetEquipmentRefIDs := engine.allEquipmentSetEquipmentRefIDs()
	for _, refID := range allEquipmentSetEquipmentRefIDs {
		ref := engine.equipmentSetEquipmentRef(refID)
		if ref.equipmentSetEquipmentRef.ReferencedElementID == itemID {
			parent := engine.EquipmentSet(ref.equipmentSetEquipmentRef.ParentID)
			parent.RemoveEquipment(itemID)
		}
	}
	equipmentSetEquipmentRefIDSlicePool.Put(allEquipmentSetEquipmentRefIDs)
}`

const dereferencePlayerGuildMemberRefs_Engine_func string = `func (engine *Engine) dereferencePlayerGuildMemberRefs(playerID PlayerID) {
	allPlayerGuildMemberRefIDs := engine.allPlayerGuildMemberRefIDs()
	for _, refID := range allPlayerGuildMemberRefIDs {
		ref := engine.playerGuildMemberRef(refID)
		if ref.playerGuildMemberRef.ReferencedElementID == playerID {
			parent := engine.Player(ref.playerGuildMemberRef.ParentID)
			parent.RemoveGuildMembers(playerID)
		}
	}
	playerGuildMemberRefIDSlicePool.Put(allPlayerGuildMemberRefIDs)
}`

const dereferencePlayerEquipmentSetRefs_Engine_func string = `func (engine *Engine) dereferencePlayerEquipmentSetRefs(equipmentSetID EquipmentSetID) {
	allPlayerEquipmentSetRefIDs := engine.allPlayerEquipmentSetRefIDs()
	for _, refID := range allPlayerEquipmentSetRefIDs {
		ref := engine.playerEquipmentSetRef(refID)
		if ref.playerEquipmentSetRef.ReferencedElementID == equipmentSetID {
			parent := engine.Player(ref.playerEquipmentSetRef.ParentID)
			parent.RemoveEquipmentSets(equipmentSetID)
		}
	}
	playerEquipmentSetRefIDSlicePool.Put(allPlayerEquipmentSetRefIDs)
}`

const dereferencePlayerTargetRefsPlayer_Engine_func string = `func (engine *Engine) dereferencePlayerTargetRefsPlayer(playerID PlayerID) {
	allPlayerTargetRefIDs := engine.allPlayerTargetRefIDs()
	for _, refID := range allPlayerTargetRefIDs {
		ref := engine.playerTargetRef(refID)
		anyContainer := ref.Get()
		if anyContainer.anyOfPlayer_ZoneItem.ElementKind != ElementKindPlayer {
			continue
		}
		if anyContainer.anyOfPlayer_ZoneItem.Player == playerID {
			ref.Unset()
		}
	}
	playerTargetRefIDSlicePool.Put(allPlayerTargetRefIDs)
}`

const dereferencePlayerTargetRefsZoneItem_Engine_func string = `func (engine *Engine) dereferencePlayerTargetRefsZoneItem(zoneItemID ZoneItemID) {
	allPlayerTargetRefIDs := engine.allPlayerTargetRefIDs()
	for _, refID := range allPlayerTargetRefIDs {
		ref := engine.playerTargetRef(refID)
		anyContainer := ref.Get()
		if anyContainer.anyOfPlayer_ZoneItem.ElementKind != ElementKindZoneItem {
			continue
		}
		if anyContainer.anyOfPlayer_ZoneItem.ZoneItem == zoneItemID {
			ref.Unset()
		}
	}
	playerTargetRefIDSlicePool.Put(allPlayerTargetRefIDs)
}`

const dereferencePlayerTargetedByRefsPlayer_Engine_func string = `func (engine *Engine) dereferencePlayerTargetedByRefsPlayer(playerID PlayerID) {
	allPlayerTargetedByRefIDs := engine.allPlayerTargetedByRefIDs()
	for _, refID := range allPlayerTargetedByRefIDs {
		ref := engine.playerTargetedByRef(refID)
		anyContainer := ref.Get()
		if anyContainer.anyOfPlayer_ZoneItem.ElementKind != ElementKindPlayer {
			continue
		}
		if anyContainer.anyOfPlayer_ZoneItem.Player == playerID {
			parent := engine.Player(ref.playerTargetedByRef.ParentID)
			parent.RemoveTargetedByPlayer(playerID)
		}
	}
	playerTargetedByRefIDSlicePool.Put(allPlayerTargetedByRefIDs)
}`

const dereferencePlayerTargetedByRefsZoneItem_Engine_func string = `func (engine *Engine) dereferencePlayerTargetedByRefsZoneItem(zoneItemID ZoneItemID) {
	allPlayerTargetedByRefIDs := engine.allPlayerTargetedByRefIDs()
	for _, refID := range allPlayerTargetedByRefIDs {
		ref := engine.playerTargetedByRef(refID)
		anyContainer := ref.Get()
		if anyContainer.anyOfPlayer_ZoneItem.ElementKind != ElementKindZoneItem {
			continue
		}
		if anyContainer.anyOfPlayer_ZoneItem.ZoneItem == zoneItemID {
			parent := engine.Player(ref.playerTargetedByRef.ParentID)
			parent.RemoveTargetedByZoneItem(zoneItemID)
		}
	}
	playerTargetedByRefIDSlicePool.Put(allPlayerTargetedByRefIDs)
}`

const _RemovePlayers_zone_func string = `func (_zone zone) RemovePlayers(playersToRemove ...PlayerID) zone {
	zone := _zone.zone.engine.Zone(_zone.zone.ID)
	if zone.zone.OperationKind == OperationKindDelete {
		return zone
	}
	var wereElementsAltered bool
	var newElements []PlayerID
	for _, element := range zone.zone.Players {
		var toBeRemoved bool
		for _, elementToRemove := range playersToRemove {
			if element == elementToRemove {
				toBeRemoved = true
				wereElementsAltered = true
				zone.zone.engine.deletePlayer(element)
				break
			}
		}
		if !toBeRemoved {
			newElements = append(newElements, element)
		}
	}
	if !wereElementsAltered {
		return zone
	}
	zone.zone.Players = newElements
	zone.zone.OperationKind = OperationKindUpdate
	zone.zone.engine.Patch.Zone[zone.zone.ID] = zone.zone
	return zone
}`

const _RemoveItems_zone_func string = `func (_zone zone) RemoveItems(itemsToRemove ...ZoneItemID) zone {
	zone := _zone.zone.engine.Zone(_zone.zone.ID)
	if zone.zone.OperationKind == OperationKindDelete {
		return zone
	}
	var wereElementsAltered bool
	var newElements []ZoneItemID
	for _, element := range zone.zone.Items {
		var toBeRemoved bool
		for _, elementToRemove := range itemsToRemove {
			if element == elementToRemove {
				toBeRemoved = true
				wereElementsAltered = true
				zone.zone.engine.deleteZoneItem(element)
				break
			}
		}
		if !toBeRemoved {
			newElements = append(newElements, element)
		}
	}
	if !wereElementsAltered {
		return zone
	}
	zone.zone.Items = newElements
	zone.zone.OperationKind = OperationKindUpdate
	zone.zone.engine.Patch.Zone[zone.zone.ID] = zone.zone
	return zone
}`

const _RemoveInteractablesItem_zone_func string = `func (_zone zone) RemoveInteractablesItem(itemsToRemove ...ItemID) zone {
	zone := _zone.zone.engine.Zone(_zone.zone.ID)
	if zone.zone.OperationKind == OperationKindDelete {
		return zone
	}
	var wereElementsAltered bool
	var newElements []AnyOfItem_Player_ZoneItemID
	for _, anyContainerID := range zone.zone.Interactables {
		anyContainer := zone.zone.engine.anyOfItem_Player_ZoneItem(anyContainerID)
		element := anyContainer.Item().ID()
		var toBeRemoved bool
		for _, elementToRemove := range itemsToRemove {
			if element == elementToRemove {
				toBeRemoved = true
				wereElementsAltered = true
				zone.zone.engine.deleteItem(element)
				break
			}
		}
		if !toBeRemoved {
			newElements = append(newElements, anyContainer.anyOfItem_Player_ZoneItem.ID)
		}
	}
	if !wereElementsAltered {
		return zone
	}
	zone.zone.Interactables = newElements
	zone.zone.OperationKind = OperationKindUpdate
	zone.zone.engine.Patch.Zone[zone.zone.ID] = zone.zone
	return zone
}`

const _RemoveInteractablesPlayer_zone_func string = `func (_zone zone) RemoveInteractablesPlayer(playersToRemove ...PlayerID) zone {
	zone := _zone.zone.engine.Zone(_zone.zone.ID)
	if zone.zone.OperationKind == OperationKindDelete {
		return zone
	}
	var wereElementsAltered bool
	var newElements []AnyOfItem_Player_ZoneItemID
	for _, anyContainerID := range zone.zone.Interactables {
		anyContainer := zone.zone.engine.anyOfItem_Player_ZoneItem(anyContainerID)
		element := anyContainer.Player().ID()
		var toBeRemoved bool
		for _, elementToRemove := range playersToRemove {
			if element == elementToRemove {
				toBeRemoved = true
				wereElementsAltered = true
				zone.zone.engine.deletePlayer(element)
				break
			}
		}
		if !toBeRemoved {
			newElements = append(newElements, anyContainer.anyOfItem_Player_ZoneItem.ID)
		}
	}
	if !wereElementsAltered {
		return zone
	}
	zone.zone.Interactables = newElements
	zone.zone.OperationKind = OperationKindUpdate
	zone.zone.engine.Patch.Zone[zone.zone.ID] = zone.zone
	return zone
}`

const _RemoveInteractablesZoneItem_zone_func string = `func (_zone zone) RemoveInteractablesZoneItem(zoneItemsToRemove ...ZoneItemID) zone {
	zone := _zone.zone.engine.Zone(_zone.zone.ID)
	if zone.zone.OperationKind == OperationKindDelete {
		return zone
	}
	var wereElementsAltered bool
	var newElements []AnyOfItem_Player_ZoneItemID
	for _, anyContainerID := range zone.zone.Interactables {
		anyContainer := zone.zone.engine.anyOfItem_Player_ZoneItem(anyContainerID)
		element := anyContainer.ZoneItem().ID()
		var toBeRemoved bool
		for _, elementToRemove := range zoneItemsToRemove {
			if element == elementToRemove {
				toBeRemoved = true
				wereElementsAltered = true
				zone.zone.engine.deleteZoneItem(element)
				break
			}
		}
		if !toBeRemoved {
			newElements = append(newElements, anyContainer.anyOfItem_Player_ZoneItem.ID)
		}
	}
	if !wereElementsAltered {
		return zone
	}
	zone.zone.Interactables = newElements
	zone.zone.OperationKind = OperationKindUpdate
	zone.zone.engine.Patch.Zone[zone.zone.ID] = zone.zone
	return zone
}`

const _RemoveItems_player_func string = `func (_player player) RemoveItems(itemsToRemove ...ItemID) player {
	player := _player.player.engine.Player(_player.player.ID)
	if player.player.OperationKind == OperationKindDelete {
		return player
	}
	var wereElementsAltered bool
	var newElements []ItemID
	for _, element := range player.player.Items {
		var toBeRemoved bool
		for _, elementToRemove := range itemsToRemove {
			if element == elementToRemove {
				toBeRemoved = true
				wereElementsAltered = true
				player.player.engine.deleteItem(element)
				break
			}
		}
		if !toBeRemoved {
			newElements = append(newElements, element)
		}
	}
	if !wereElementsAltered {
		return player
	}
	player.player.Items = newElements
	player.player.OperationKind = OperationKindUpdate
	player.player.engine.Patch.Player[player.player.ID] = player.player
	return player
}`

const _RemoveEquipmentSets_player_func string = `func (_player player) RemoveEquipmentSets(equipmentSetsToRemove ...EquipmentSetID) player {
	player := _player.player.engine.Player(_player.player.ID)
	if player.player.OperationKind == OperationKindDelete {
		return player
	}
	var wereElementsAltered bool
	var newElements []PlayerEquipmentSetRefID
	for _, refElement := range player.player.EquipmentSets {
		element := player.player.engine.playerEquipmentSetRef(refElement).playerEquipmentSetRef.ReferencedElementID
		var toBeRemoved bool
		for _, elementToRemove := range equipmentSetsToRemove {
			if element == elementToRemove {
				toBeRemoved = true
				wereElementsAltered = true
				player.player.engine.deletePlayerEquipmentSetRef(refElement)
				break
			}
		}
		if !toBeRemoved {
			newElements = append(newElements, refElement)
		}
	}
	if !wereElementsAltered {
		return player
	}
	player.player.EquipmentSets = newElements
	player.player.OperationKind = OperationKindUpdate
	player.player.engine.Patch.Player[player.player.ID] = player.player
	return player
}`

const _RemoveGuildMembers_player_func string = `func (_player player) RemoveGuildMembers(guildMembersToRemove ...PlayerID) player {
	player := _player.player.engine.Player(_player.player.ID)
	if player.player.OperationKind == OperationKindDelete {
		return player
	}
	var wereElementsAltered bool
	var newElements []PlayerGuildMemberRefID
	for _, refElement := range player.player.GuildMembers {
		element := player.player.engine.playerGuildMemberRef(refElement).playerGuildMemberRef.ReferencedElementID
		var toBeRemoved bool
		for _, elementToRemove := range guildMembersToRemove {
			if element == elementToRemove {
				toBeRemoved = true
				wereElementsAltered = true
				player.player.engine.deletePlayerGuildMemberRef(refElement)
				break
			}
		}
		if !toBeRemoved {
			newElements = append(newElements, refElement)
		}
	}
	if !wereElementsAltered {
		return player
	}
	player.player.GuildMembers = newElements
	player.player.OperationKind = OperationKindUpdate
	player.player.engine.Patch.Player[player.player.ID] = player.player
	return player
}`

const _RemoveTargetedByZoneItem_player_func string = `func (_player player) RemoveTargetedByZoneItem(zoneItemsToRemove ...ZoneItemID) player {
	player := _player.player.engine.Player(_player.player.ID)
	if player.player.OperationKind == OperationKindDelete {
		return player
	}
	var wereElementsAltered bool
	var newElements []PlayerTargetedByRefID
	for _, refElement := range player.player.TargetedBy {
		anyContainer := player.player.engine.playerTargetedByRef(refElement).Get()
		element := anyContainer.ZoneItem().ID()
		var toBeRemoved bool
		for _, elementToRemove := range zoneItemsToRemove {
			if element == elementToRemove {
				toBeRemoved = true
				wereElementsAltered = true
				player.player.engine.deletePlayerTargetedByRef(refElement)
				break
			}
		}
		if !toBeRemoved {
			newElements = append(newElements, refElement)
		}
	}
	if !wereElementsAltered {
		return player
	}
	player.player.TargetedBy = newElements
	player.player.OperationKind = OperationKindUpdate
	player.player.engine.Patch.Player[player.player.ID] = player.player
	return player
}`

const _RemoveTargetedByPlayer_player_func string = `func (_player player) RemoveTargetedByPlayer(playersToRemove ...PlayerID) player {
	player := _player.player.engine.Player(_player.player.ID)
	if player.player.OperationKind == OperationKindDelete {
		return player
	}
	var wereElementsAltered bool
	var newElements []PlayerTargetedByRefID
	for _, refElement := range player.player.TargetedBy {
		anyContainer := player.player.engine.playerTargetedByRef(refElement).Get()
		element := anyContainer.Player().ID()
		var toBeRemoved bool
		for _, elementToRemove := range playersToRemove {
			if element == elementToRemove {
				toBeRemoved = true
				wereElementsAltered = true
				player.player.engine.deletePlayerTargetedByRef(refElement)
				break
			}
		}
		if !toBeRemoved {
			newElements = append(newElements, refElement)
		}
	}
	if !wereElementsAltered {
		return player
	}
	player.player.TargetedBy = newElements
	player.player.OperationKind = OperationKindUpdate
	player.player.engine.Patch.Player[player.player.ID] = player.player
	return player
}`

const _RemoveTags_zone_func string = `func (_zone zone) RemoveTags(tagsToRemove ...string) zone {
	zone := _zone.zone.engine.Zone(_zone.zone.ID)
	if zone.zone.OperationKind == OperationKindDelete {
		return zone
	}
	var wereElementsAltered bool
	var newElements []string
	for _, element := range zone.zone.Tags {
		var toBeRemoved bool
		for _, elementToRemove := range tagsToRemove {
			if element == elementToRemove {
				toBeRemoved = true
				wereElementsAltered = true
				break
			}
		}
		if !toBeRemoved {
			newElements = append(newElements, element)
		}
	}
	if !wereElementsAltered {
		return zone
	}
	zone.zone.Tags = newElements
	zone.zone.OperationKind = OperationKindUpdate
	zone.zone.engine.Patch.Zone[zone.zone.ID] = zone.zone
	return zone
}`

const _RemoveEquipment_equipmentSet_func string = `func (_equipmentSet equipmentSet) RemoveEquipment(equipmentToRemove ...ItemID) equipmentSet {
	equipmentSet := _equipmentSet.equipmentSet.engine.EquipmentSet(_equipmentSet.equipmentSet.ID)
	if equipmentSet.equipmentSet.OperationKind == OperationKindDelete {
		return equipmentSet
	}
	var wereElementsAltered bool
	var newElements []EquipmentSetEquipmentRefID
	for _, refElement := range equipmentSet.equipmentSet.Equipment {
		element := equipmentSet.equipmentSet.engine.equipmentSetEquipmentRef(refElement).equipmentSetEquipmentRef.ReferencedElementID
		var toBeRemoved bool
		for _, elementToRemove := range equipmentToRemove {
			if element == elementToRemove {
				toBeRemoved = true
				wereElementsAltered = true
				equipmentSet.equipmentSet.engine.deleteEquipmentSetEquipmentRef(refElement)
				break
			}
		}
		if !toBeRemoved {
			newElements = append(newElements, refElement)
		}
	}
	if !wereElementsAltered {
		return equipmentSet
	}
	equipmentSet.equipmentSet.Equipment = newElements
	equipmentSet.equipmentSet.OperationKind = OperationKindUpdate
	equipmentSet.equipmentSet.engine.Patch.EquipmentSet[equipmentSet.equipmentSet.ID] = equipmentSet.equipmentSet
	return equipmentSet
}`

const _SetLevel_gearScore_func string = `func (_gearScore gearScore) SetLevel(newLevel int) gearScore {
	gearScore := _gearScore.gearScore.engine.GearScore(_gearScore.gearScore.ID)
	if gearScore.gearScore.OperationKind == OperationKindDelete {
		return gearScore
	}
	if gearScore.gearScore.Level == newLevel {
		return gearScore
	}
	gearScore.gearScore.Level = newLevel
	gearScore.gearScore.OperationKind = OperationKindUpdate
	gearScore.gearScore.engine.Patch.GearScore[gearScore.gearScore.ID] = gearScore.gearScore
	return gearScore
}`

const _SetScore_gearScore_func string = `func (_gearScore gearScore) SetScore(newScore int) gearScore {
	gearScore := _gearScore.gearScore.engine.GearScore(_gearScore.gearScore.ID)
	if gearScore.gearScore.OperationKind == OperationKindDelete {
		return gearScore
	}
	if gearScore.gearScore.Score == newScore {
		return gearScore
	}
	gearScore.gearScore.Score = newScore
	gearScore.gearScore.OperationKind = OperationKindUpdate
	gearScore.gearScore.engine.Patch.GearScore[gearScore.gearScore.ID] = gearScore.gearScore
	return gearScore
}`

const _SetX_position_func string = `func (_position position) SetX(newX float64) position {
	position := _position.position.engine.Position(_position.position.ID)
	if position.position.OperationKind == OperationKindDelete {
		return position
	}
	if position.position.X == newX {
		return position
	}
	position.position.X = newX
	position.position.OperationKind = OperationKindUpdate
	position.position.engine.Patch.Position[position.position.ID] = position.position
	return position
}`

const _SetY_position_func string = `func (_position position) SetY(newY float64) position {
	position := _position.position.engine.Position(_position.position.ID)
	if position.position.OperationKind == OperationKindDelete {
		return position
	}
	if position.position.Y == newY {
		return position
	}
	position.position.Y = newY
	position.position.OperationKind = OperationKindUpdate
	position.position.engine.Patch.Position[position.position.ID] = position.position
	return position
}`

const _SetName_item_func string = `func (_item item) SetName(newName string) item {
	item := _item.item.engine.Item(_item.item.ID)
	if item.item.OperationKind == OperationKindDelete {
		return item
	}
	if item.item.Name == newName {
		return item
	}
	item.item.Name = newName
	item.item.OperationKind = OperationKindUpdate
	item.item.engine.Patch.Item[item.item.ID] = item.item
	return item
}`

const _SetBoundTo_item_func string = `func (_item item) SetBoundTo(playerID PlayerID) item {
	item := _item.item.engine.Item(_item.item.ID)
	if item.item.OperationKind == OperationKindDelete {
		return item
	}
	if item.item.engine.Player(playerID).player.OperationKind == OperationKindDelete {
		return item
	}
	if item.item.engine.itemBoundToRef(item.item.BoundTo).itemBoundToRef.ReferencedElementID == playerID {
		return item
	}
	if item.item.BoundTo != 0 {
		item.item.engine.deleteItemBoundToRef(item.item.BoundTo)
	}
	ref := item.item.engine.createItemBoundToRef(playerID, item.item.ID)
	item.item.BoundTo = ref.ID
	item.item.OperationKind = OperationKindUpdate
	item.item.engine.Patch.Item[item.item.ID] = item.item
	return item
}`

const _SetName_equipmentSet_func string = `func (_equipmentSet equipmentSet) SetName(newName string) equipmentSet {
	equipmentSet := _equipmentSet.equipmentSet.engine.EquipmentSet(_equipmentSet.equipmentSet.ID)
	if equipmentSet.equipmentSet.OperationKind == OperationKindDelete {
		return equipmentSet
	}
	if equipmentSet.equipmentSet.Name == newName {
		return equipmentSet
	}
	equipmentSet.equipmentSet.Name = newName
	equipmentSet.equipmentSet.OperationKind = OperationKindUpdate
	equipmentSet.equipmentSet.engine.Patch.EquipmentSet[equipmentSet.equipmentSet.ID] = equipmentSet.equipmentSet
	return equipmentSet
}`

const _SetTargetPlayer_player_func string = `func (_player player) SetTargetPlayer(playerID PlayerID) player {
	player := _player.player.engine.Player(_player.player.ID)
	if player.player.OperationKind == OperationKindDelete {
		return player
	}
	if player.player.engine.Player(playerID).player.OperationKind == OperationKindDelete {
		return player
	}
	if player.player.engine.anyOfPlayer_ZoneItem(player.player.engine.playerTargetRef(player.player.Target).playerTargetRef.ReferencedElementID).anyOfPlayer_ZoneItem.Player == playerID {
		return player
	}
	if player.player.Target != 0 {
		player.player.engine.deletePlayerTargetRef(player.player.Target)
	}
	anyContainer := player.player.engine.createAnyOfPlayer_ZoneItem(false, nil)
	anyContainer.anyOfPlayer_ZoneItem.setPlayer(playerID, false)
	ref := player.player.engine.createPlayerTargetRef(anyContainer.anyOfPlayer_ZoneItem.ID, player.player.ID)
	player.player.Target = ref.ID
	player.player.OperationKind = OperationKindUpdate
	player.player.engine.Patch.Player[player.player.ID] = player.player
	return player
}`

const _SetTargetZoneItem_player_func string = `func (_player player) SetTargetZoneItem(zoneItemID ZoneItemID) player {
	player := _player.player.engine.Player(_player.player.ID)
	if player.player.OperationKind == OperationKindDelete {
		return player
	}
	if player.player.engine.ZoneItem(zoneItemID).zoneItem.OperationKind == OperationKindDelete {
		return player
	}
	if player.player.engine.anyOfPlayer_ZoneItem(player.player.engine.playerTargetRef(player.player.Target).playerTargetRef.ReferencedElementID).anyOfPlayer_ZoneItem.ZoneItem == zoneItemID {
		return player
	}
	if player.player.Target != 0 {
		player.player.engine.deletePlayerTargetRef(player.player.Target)
	}
	anyContainer := player.player.engine.createAnyOfPlayer_ZoneItem(false, nil)
	anyContainer.anyOfPlayer_ZoneItem.setZoneItem(zoneItemID, false)
	ref := player.player.engine.createPlayerTargetRef(anyContainer.anyOfPlayer_ZoneItem.ID, player.player.ID)
	player.player.Target = ref.ID
	player.player.OperationKind = OperationKindUpdate
	player.player.engine.Patch.Player[player.player.ID] = player.player
	return player
}`

const _EquipmentSetID_type string = `type EquipmentSetID int`

const _GearScoreID_type string = `type GearScoreID int`

const _ItemID_type string = `type ItemID int`

const _PlayerID_type string = `type PlayerID int`

const _PositionID_type string = `type PositionID int`

const _ZoneID_type string = `type ZoneID int`

const _ZoneItemID_type string = `type ZoneItemID int`

const _PlayerGuildMemberRefID_type string = `type PlayerGuildMemberRefID int`

const _ItemBoundToRefID_type string = `type ItemBoundToRefID int`

const _EquipmentSetEquipmentRefID_type string = `type EquipmentSetEquipmentRefID int`

const _PlayerEquipmentSetRefID_type string = `type PlayerEquipmentSetRefID int`

const _AnyOfItem_Player_ZoneItemID_type string = `type AnyOfItem_Player_ZoneItemID int`

const _AnyOfPlayer_ZoneItemID_type string = `type AnyOfPlayer_ZoneItemID int`

const _AnyOfPlayer_PositionID_type string = `type AnyOfPlayer_PositionID int`

const _PlayerTargetRefID_type string = `type PlayerTargetRefID int`

const _PlayerTargetedByRefID_type string = `type PlayerTargetedByRefID int`

const _State_type string = `type State struct {
	EquipmentSet			map[EquipmentSetID]equipmentSetCore				` + "`" + `json:"equipmentSet"` + "`" + `
	GearScore			map[GearScoreID]gearScoreCore					` + "`" + `json:"gearScore"` + "`" + `
	Item				map[ItemID]itemCore						` + "`" + `json:"item"` + "`" + `
	Player				map[PlayerID]playerCore						` + "`" + `json:"player"` + "`" + `
	Position			map[PositionID]positionCore					` + "`" + `json:"position"` + "`" + `
	Zone				map[ZoneID]zoneCore						` + "`" + `json:"zone"` + "`" + `
	ZoneItem			map[ZoneItemID]zoneItemCore					` + "`" + `json:"zoneItem"` + "`" + `
	EquipmentSetEquipmentRef	map[EquipmentSetEquipmentRefID]equipmentSetEquipmentRefCore	` + "`" + `json:"equipmentSetEquipmentRef"` + "`" + `
	ItemBoundToRef			map[ItemBoundToRefID]itemBoundToRefCore				` + "`" + `json:"itemBoundToRef"` + "`" + `
	PlayerEquipmentSetRef		map[PlayerEquipmentSetRefID]playerEquipmentSetRefCore		` + "`" + `json:"playerEquipmentSetRef"` + "`" + `
	PlayerGuildMemberRef		map[PlayerGuildMemberRefID]playerGuildMemberRefCore		` + "`" + `json:"playerGuildMemberRef"` + "`" + `
	PlayerTargetRef			map[PlayerTargetRefID]playerTargetRefCore			` + "`" + `json:"playerTargetRef"` + "`" + `
	PlayerTargetedByRef		map[PlayerTargetedByRefID]playerTargetedByRefCore		` + "`" + `json:"playerTargetedByRef"` + "`" + `
	AnyOfPlayer_Position		map[AnyOfPlayer_PositionID]anyOfPlayer_PositionCore		` + "`" + `json:"anyOfPlayer_Position"` + "`" + `
	AnyOfPlayer_ZoneItem		map[AnyOfPlayer_ZoneItemID]anyOfPlayer_ZoneItemCore		` + "`" + `json:"anyOfPlayer_ZoneItem"` + "`" + `
	AnyOfItem_Player_ZoneItem	map[AnyOfItem_Player_ZoneItemID]anyOfItem_Player_ZoneItemCore	` + "`" + `json:"anyOfItem_Player_ZoneItem"` + "`" + `
}`

const newState_func string = `func newState() State {
	return State{EquipmentSet: make(map[EquipmentSetID]equipmentSetCore), GearScore: make(map[GearScoreID]gearScoreCore), Item: make(map[ItemID]itemCore), Player: make(map[PlayerID]playerCore), Position: make(map[PositionID]positionCore), Zone: make(map[ZoneID]zoneCore), ZoneItem: make(map[ZoneItemID]zoneItemCore), EquipmentSetEquipmentRef: make(map[EquipmentSetEquipmentRefID]equipmentSetEquipmentRefCore), ItemBoundToRef: make(map[ItemBoundToRefID]itemBoundToRefCore), PlayerEquipmentSetRef: make(map[PlayerEquipmentSetRefID]playerEquipmentSetRefCore), PlayerGuildMemberRef: make(map[PlayerGuildMemberRefID]playerGuildMemberRefCore), PlayerTargetRef: make(map[PlayerTargetRefID]playerTargetRefCore), PlayerTargetedByRef: make(map[PlayerTargetedByRefID]playerTargetedByRefCore), AnyOfPlayer_Position: make(map[AnyOfPlayer_PositionID]anyOfPlayer_PositionCore), AnyOfPlayer_ZoneItem: make(map[AnyOfPlayer_ZoneItemID]anyOfPlayer_ZoneItemCore), AnyOfItem_Player_ZoneItem: make(map[AnyOfItem_Player_ZoneItemID]anyOfItem_Player_ZoneItemCore)}
}`

const zoneCore_type string = `type zoneCore struct {
	ID		ZoneID				` + "`" + `json:"id"` + "`" + `
	Interactables	[]AnyOfItem_Player_ZoneItemID	` + "`" + `json:"interactables"` + "`" + `
	Items		[]ZoneItemID			` + "`" + `json:"items"` + "`" + `
	Players		[]PlayerID			` + "`" + `json:"players"` + "`" + `
	Tags		[]string			` + "`" + `json:"tags"` + "`" + `
	OperationKind	OperationKind			` + "`" + `json:"operationKind"` + "`" + `
	HasParent	bool				` + "`" + `json:"hasParent"` + "`" + `
	Path		string				` + "`" + `json:"path"` + "`" + `
	path		path
	engine		*Engine
}`

const zone_type string = `type zone struct{ zone zoneCore }`

const zoneItemCore_type string = `type zoneItemCore struct {
	ID		ZoneItemID	` + "`" + `json:"id"` + "`" + `
	Item		ItemID		` + "`" + `json:"item"` + "`" + `
	Position	PositionID	` + "`" + `json:"position"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
	HasParent	bool		` + "`" + `json:"hasParent"` + "`" + `
	Path		string		` + "`" + `json:"path"` + "`" + `
	path		path
	engine		*Engine
}`

const zoneItem_type string = `type zoneItem struct{ zoneItem zoneItemCore }`

const itemCore_type string = `type itemCore struct {
	ID		ItemID			` + "`" + `json:"id"` + "`" + `
	BoundTo		ItemBoundToRefID	` + "`" + `json:"boundTo"` + "`" + `
	GearScore	GearScoreID		` + "`" + `json:"gearScore"` + "`" + `
	Name		string			` + "`" + `json:"name"` + "`" + `
	Origin		AnyOfPlayer_PositionID	` + "`" + `json:"origin"` + "`" + `
	OperationKind	OperationKind		` + "`" + `json:"operationKind"` + "`" + `
	HasParent	bool			` + "`" + `json:"hasParent"` + "`" + `
	Path		string			` + "`" + `json:"path"` + "`" + `
	path		path
	engine		*Engine
}`

const item_type string = `type item struct{ item itemCore }`

const playerCore_type string = `type playerCore struct {
	ID		PlayerID			` + "`" + `json:"id"` + "`" + `
	EquipmentSets	[]PlayerEquipmentSetRefID	` + "`" + `json:"equipmentSets"` + "`" + `
	GearScore	GearScoreID			` + "`" + `json:"gearScore"` + "`" + `
	GuildMembers	[]PlayerGuildMemberRefID	` + "`" + `json:"guildMembers"` + "`" + `
	Items		[]ItemID			` + "`" + `json:"items"` + "`" + `
	Position	PositionID			` + "`" + `json:"position"` + "`" + `
	Target		PlayerTargetRefID		` + "`" + `json:"target"` + "`" + `
	TargetedBy	[]PlayerTargetedByRefID		` + "`" + `json:"targetedBy"` + "`" + `
	OperationKind	OperationKind			` + "`" + `json:"operationKind"` + "`" + `
	HasParent	bool				` + "`" + `json:"hasParent"` + "`" + `
	Path		string				` + "`" + `json:"path"` + "`" + `
	path		path
	engine		*Engine
}`

const player_type string = `type player struct{ player playerCore }`

const gearScoreCore_type string = `type gearScoreCore struct {
	ID		GearScoreID	` + "`" + `json:"id"` + "`" + `
	Level		int		` + "`" + `json:"level"` + "`" + `
	Score		int		` + "`" + `json:"score"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
	HasParent	bool		` + "`" + `json:"hasParent"` + "`" + `
	Path		string		` + "`" + `json:"path"` + "`" + `
	path		path
	engine		*Engine
}`

const gearScore_type string = `type gearScore struct{ gearScore gearScoreCore }`

const positionCore_type string = `type positionCore struct {
	ID		PositionID	` + "`" + `json:"id"` + "`" + `
	X		float64		` + "`" + `json:"x"` + "`" + `
	Y		float64		` + "`" + `json:"y"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
	HasParent	bool		` + "`" + `json:"hasParent"` + "`" + `
	Path		string		` + "`" + `json:"path"` + "`" + `
	path		path
	engine		*Engine
}`

const position_type string = `type position struct{ position positionCore }`

const equipmentSetCore_type string = `type equipmentSetCore struct {
	ID		EquipmentSetID			` + "`" + `json:"id"` + "`" + `
	Equipment	[]EquipmentSetEquipmentRefID	` + "`" + `json:"equipment"` + "`" + `
	Name		string				` + "`" + `json:"name"` + "`" + `
	OperationKind	OperationKind			` + "`" + `json:"operationKind"` + "`" + `
	HasParent	bool				` + "`" + `json:"hasParent"` + "`" + `
	Path		string				` + "`" + `json:"path"` + "`" + `
	path		path
	engine		*Engine
}`

const equipmentSet_type string = `type equipmentSet struct{ equipmentSet equipmentSetCore }`

const itemBoundToRefCore_type string = `type itemBoundToRefCore struct {
	ID			ItemBoundToRefID	` + "`" + `json:"id"` + "`" + `
	ParentID		ItemID			` + "`" + `json:"parentID"` + "`" + `
	ReferencedElementID	PlayerID		` + "`" + `json:"referencedElementID"` + "`" + `
	OperationKind		OperationKind		` + "`" + `json:"operationKind"` + "`" + `
	engine			*Engine
}`

const itemBoundToRef_type string = `type itemBoundToRef struct{ itemBoundToRef itemBoundToRefCore }`

const playerGuildMemberRefCore_type string = `type playerGuildMemberRefCore struct {
	ID			PlayerGuildMemberRefID	` + "`" + `json:"id"` + "`" + `
	ParentID		PlayerID		` + "`" + `json:"parentID"` + "`" + `
	ReferencedElementID	PlayerID		` + "`" + `json:"referencedElementID"` + "`" + `
	OperationKind		OperationKind		` + "`" + `json:"operationKind"` + "`" + `
	engine			*Engine
}`

const playerGuildMemberRef_type string = `type playerGuildMemberRef struct{ playerGuildMemberRef playerGuildMemberRefCore }`

const equipmentSetEquipmentRefCore_type string = `type equipmentSetEquipmentRefCore struct {
	ID			EquipmentSetEquipmentRefID	` + "`" + `json:"id"` + "`" + `
	ParentID		EquipmentSetID			` + "`" + `json:"parentID"` + "`" + `
	ReferencedElementID	ItemID				` + "`" + `json:"referencedElementID"` + "`" + `
	OperationKind		OperationKind			` + "`" + `json:"operationKind"` + "`" + `
	engine			*Engine
}`

const equipmentSetEquipmentRef_type string = `type equipmentSetEquipmentRef struct{ equipmentSetEquipmentRef equipmentSetEquipmentRefCore }`

const playerEquipmentSetRefCore_type string = `type playerEquipmentSetRefCore struct {
	ID			PlayerEquipmentSetRefID	` + "`" + `json:"id"` + "`" + `
	ParentID		PlayerID		` + "`" + `json:"parentID"` + "`" + `
	ReferencedElementID	EquipmentSetID		` + "`" + `json:"referencedElementID"` + "`" + `
	OperationKind		OperationKind		` + "`" + `json:"operationKind"` + "`" + `
	engine			*Engine
}`

const playerEquipmentSetRef_type string = `type playerEquipmentSetRef struct{ playerEquipmentSetRef playerEquipmentSetRefCore }`

const anyOfPlayer_PositionCore_type string = `type anyOfPlayer_PositionCore struct {
	ID			AnyOfPlayer_PositionID	` + "`" + `json:"id"` + "`" + `
	ElementKind		ElementKind		` + "`" + `json:"elementKind"` + "`" + `
	ChildElementPath	path			` + "`" + `json:"childElementPath"` + "`" + `
	Player			PlayerID		` + "`" + `json:"player"` + "`" + `
	Position		PositionID		` + "`" + `json:"position"` + "`" + `
	OperationKind		OperationKind		` + "`" + `json:"operationKind"` + "`" + `
	engine			*Engine
}`

const anyOfPlayer_Position_type string = `type anyOfPlayer_Position struct{ anyOfPlayer_Position anyOfPlayer_PositionCore }`

const anyOfPlayer_ZoneItemCore_type string = `type anyOfPlayer_ZoneItemCore struct {
	ID			AnyOfPlayer_ZoneItemID	` + "`" + `json:"id"` + "`" + `
	ElementKind		ElementKind		` + "`" + `json:"elementKind"` + "`" + `
	ChildElementPath	path			` + "`" + `json:"childElementPath"` + "`" + `
	Player			PlayerID		` + "`" + `json:"player"` + "`" + `
	ZoneItem		ZoneItemID		` + "`" + `json:"zoneItem"` + "`" + `
	OperationKind		OperationKind		` + "`" + `json:"operationKind"` + "`" + `
	engine			*Engine
}`

const anyOfPlayer_ZoneItem_type string = `type anyOfPlayer_ZoneItem struct{ anyOfPlayer_ZoneItem anyOfPlayer_ZoneItemCore }`

const anyOfItem_Player_ZoneItemCore_type string = `type anyOfItem_Player_ZoneItemCore struct {
	ID			AnyOfItem_Player_ZoneItemID	` + "`" + `json:"id"` + "`" + `
	ElementKind		ElementKind			` + "`" + `json:"elementKind"` + "`" + `
	ChildElementPath	path				` + "`" + `json:"childElementPath"` + "`" + `
	Item			ItemID				` + "`" + `json:"item"` + "`" + `
	Player			PlayerID			` + "`" + `json:"player"` + "`" + `
	ZoneItem		ZoneItemID			` + "`" + `json:"zoneItem"` + "`" + `
	OperationKind		OperationKind			` + "`" + `json:"operationKind"` + "`" + `
	engine			*Engine
}`

const anyOfItem_Player_ZoneItem_type string = `type anyOfItem_Player_ZoneItem struct{ anyOfItem_Player_ZoneItem anyOfItem_Player_ZoneItemCore }`

const playerTargetRefCore_type string = `type playerTargetRefCore struct {
	ID			PlayerTargetRefID	` + "`" + `json:"id"` + "`" + `
	ParentID		PlayerID		` + "`" + `json:"parentID"` + "`" + `
	ReferencedElementID	AnyOfPlayer_ZoneItemID	` + "`" + `json:"referencedElementID"` + "`" + `
	OperationKind		OperationKind		` + "`" + `json:"operationKind"` + "`" + `
	engine			*Engine
}`

const playerTargetRef_type string = `type playerTargetRef struct{ playerTargetRef playerTargetRefCore }`

const playerTargetedByRefCore_type string = `type playerTargetedByRefCore struct {
	ID			PlayerTargetedByRefID	` + "`" + `json:"id"` + "`" + `
	ParentID		PlayerID		` + "`" + `json:"parentID"` + "`" + `
	ReferencedElementID	AnyOfPlayer_ZoneItemID	` + "`" + `json:"referencedElementID"` + "`" + `
	OperationKind		OperationKind		` + "`" + `json:"operationKind"` + "`" + `
	engine			*Engine
}`

const playerTargetedByRef_type string = `type playerTargetedByRef struct{ playerTargetedByRef playerTargetedByRefCore }`

const _OperationKind_type string = `type OperationKind string`

const _OperationKindDelete_type string = `const (
	OperationKindDelete	OperationKind	= "DELETE"
	OperationKindUpdate	OperationKind	= "UPDATE"
	OperationKindUnchanged	OperationKind	= "UNCHANGED"
)`

const _Engine_type string = `type Engine struct {
	State				State
	Patch				State
	Tree				Tree
	assembleCache			assembleCache
	forceIncludeAssembleCache	assembleCache
	IDgen				int
}`

const newEngine_func string = `func newEngine() *Engine {
	return &Engine{IDgen: 1, Patch: newState(), State: newState(), Tree: newTree(), assembleCache: newAssembleCache(), forceIncludeAssembleCache: newAssembleCache()}
}`

const _GenerateID_Engine_func string = `func (engine *Engine) GenerateID() int {
	newID := engine.IDgen
	engine.IDgen = engine.IDgen + 1
	return newID
}`

const _UpdateState_Engine_func string = `func (engine *Engine) UpdateState() {
	for _, equipmentSet := range engine.Patch.EquipmentSet {
		if equipmentSet.OperationKind == OperationKindDelete {
			delete(engine.State.EquipmentSet, equipmentSet.ID)
		} else {
			equipmentSet.OperationKind = OperationKindUnchanged
			engine.State.EquipmentSet[equipmentSet.ID] = equipmentSet
		}
	}
	for _, gearScore := range engine.Patch.GearScore {
		if gearScore.OperationKind == OperationKindDelete {
			delete(engine.State.GearScore, gearScore.ID)
		} else {
			gearScore.OperationKind = OperationKindUnchanged
			engine.State.GearScore[gearScore.ID] = gearScore
		}
	}
	for _, item := range engine.Patch.Item {
		if item.OperationKind == OperationKindDelete {
			delete(engine.State.Item, item.ID)
		} else {
			item.OperationKind = OperationKindUnchanged
			engine.State.Item[item.ID] = item
		}
	}
	for _, player := range engine.Patch.Player {
		if player.OperationKind == OperationKindDelete {
			delete(engine.State.Player, player.ID)
		} else {
			player.OperationKind = OperationKindUnchanged
			engine.State.Player[player.ID] = player
		}
	}
	for _, position := range engine.Patch.Position {
		if position.OperationKind == OperationKindDelete {
			delete(engine.State.Position, position.ID)
		} else {
			position.OperationKind = OperationKindUnchanged
			engine.State.Position[position.ID] = position
		}
	}
	for _, zone := range engine.Patch.Zone {
		if zone.OperationKind == OperationKindDelete {
			delete(engine.State.Zone, zone.ID)
		} else {
			zone.OperationKind = OperationKindUnchanged
			engine.State.Zone[zone.ID] = zone
		}
	}
	for _, zoneItem := range engine.Patch.ZoneItem {
		if zoneItem.OperationKind == OperationKindDelete {
			delete(engine.State.ZoneItem, zoneItem.ID)
		} else {
			zoneItem.OperationKind = OperationKindUnchanged
			engine.State.ZoneItem[zoneItem.ID] = zoneItem
		}
	}
	for _, equipmentSetEquipmentRef := range engine.Patch.EquipmentSetEquipmentRef {
		if equipmentSetEquipmentRef.OperationKind == OperationKindDelete {
			delete(engine.State.EquipmentSetEquipmentRef, equipmentSetEquipmentRef.ID)
		} else {
			equipmentSetEquipmentRef.OperationKind = OperationKindUnchanged
			engine.State.EquipmentSetEquipmentRef[equipmentSetEquipmentRef.ID] = equipmentSetEquipmentRef
		}
	}
	for _, itemBoundToRef := range engine.Patch.ItemBoundToRef {
		if itemBoundToRef.OperationKind == OperationKindDelete {
			delete(engine.State.ItemBoundToRef, itemBoundToRef.ID)
		} else {
			itemBoundToRef.OperationKind = OperationKindUnchanged
			engine.State.ItemBoundToRef[itemBoundToRef.ID] = itemBoundToRef
		}
	}
	for _, playerEquipmentSetRef := range engine.Patch.PlayerEquipmentSetRef {
		if playerEquipmentSetRef.OperationKind == OperationKindDelete {
			delete(engine.State.PlayerEquipmentSetRef, playerEquipmentSetRef.ID)
		} else {
			playerEquipmentSetRef.OperationKind = OperationKindUnchanged
			engine.State.PlayerEquipmentSetRef[playerEquipmentSetRef.ID] = playerEquipmentSetRef
		}
	}
	for _, playerGuildMemberRef := range engine.Patch.PlayerGuildMemberRef {
		if playerGuildMemberRef.OperationKind == OperationKindDelete {
			delete(engine.State.PlayerGuildMemberRef, playerGuildMemberRef.ID)
		} else {
			playerGuildMemberRef.OperationKind = OperationKindUnchanged
			engine.State.PlayerGuildMemberRef[playerGuildMemberRef.ID] = playerGuildMemberRef
		}
	}
	for _, playerTargetRef := range engine.Patch.PlayerTargetRef {
		if playerTargetRef.OperationKind == OperationKindDelete {
			delete(engine.State.PlayerTargetRef, playerTargetRef.ID)
		} else {
			playerTargetRef.OperationKind = OperationKindUnchanged
			engine.State.PlayerTargetRef[playerTargetRef.ID] = playerTargetRef
		}
	}
	for _, playerTargetedByRef := range engine.Patch.PlayerTargetedByRef {
		if playerTargetedByRef.OperationKind == OperationKindDelete {
			delete(engine.State.PlayerTargetedByRef, playerTargetedByRef.ID)
		} else {
			playerTargetedByRef.OperationKind = OperationKindUnchanged
			engine.State.PlayerTargetedByRef[playerTargetedByRef.ID] = playerTargetedByRef
		}
	}
	for _, anyOfPlayer_Position := range engine.Patch.AnyOfPlayer_Position {
		if anyOfPlayer_Position.OperationKind == OperationKindDelete {
			delete(engine.State.AnyOfPlayer_Position, anyOfPlayer_Position.ID)
		} else {
			anyOfPlayer_Position.OperationKind = OperationKindUnchanged
			engine.State.AnyOfPlayer_Position[anyOfPlayer_Position.ID] = anyOfPlayer_Position
		}
	}
	for _, anyOfPlayer_ZoneItem := range engine.Patch.AnyOfPlayer_ZoneItem {
		if anyOfPlayer_ZoneItem.OperationKind == OperationKindDelete {
			delete(engine.State.AnyOfPlayer_ZoneItem, anyOfPlayer_ZoneItem.ID)
		} else {
			anyOfPlayer_ZoneItem.OperationKind = OperationKindUnchanged
			engine.State.AnyOfPlayer_ZoneItem[anyOfPlayer_ZoneItem.ID] = anyOfPlayer_ZoneItem
		}
	}
	for _, anyOfItem_Player_ZoneItem := range engine.Patch.AnyOfItem_Player_ZoneItem {
		if anyOfItem_Player_ZoneItem.OperationKind == OperationKindDelete {
			delete(engine.State.AnyOfItem_Player_ZoneItem, anyOfItem_Player_ZoneItem.ID)
		} else {
			anyOfItem_Player_ZoneItem.OperationKind = OperationKindUnchanged
			engine.State.AnyOfItem_Player_ZoneItem[anyOfItem_Player_ZoneItem.ID] = anyOfItem_Player_ZoneItem
		}
	}
	for key := range engine.Patch.EquipmentSet {
		delete(engine.Patch.EquipmentSet, key)
	}
	for key := range engine.Patch.GearScore {
		delete(engine.Patch.GearScore, key)
	}
	for key := range engine.Patch.Item {
		delete(engine.Patch.Item, key)
	}
	for key := range engine.Patch.Player {
		delete(engine.Patch.Player, key)
	}
	for key := range engine.Patch.Position {
		delete(engine.Patch.Position, key)
	}
	for key := range engine.Patch.Zone {
		delete(engine.Patch.Zone, key)
	}
	for key := range engine.Patch.ZoneItem {
		delete(engine.Patch.ZoneItem, key)
	}
	for key := range engine.Patch.EquipmentSetEquipmentRef {
		delete(engine.Patch.EquipmentSetEquipmentRef, key)
	}
	for key := range engine.Patch.ItemBoundToRef {
		delete(engine.Patch.ItemBoundToRef, key)
	}
	for key := range engine.Patch.PlayerEquipmentSetRef {
		delete(engine.Patch.PlayerEquipmentSetRef, key)
	}
	for key := range engine.Patch.PlayerGuildMemberRef {
		delete(engine.Patch.PlayerGuildMemberRef, key)
	}
	for key := range engine.Patch.PlayerTargetRef {
		delete(engine.Patch.PlayerTargetRef, key)
	}
	for key := range engine.Patch.PlayerTargetedByRef {
		delete(engine.Patch.PlayerTargetedByRef, key)
	}
	for key := range engine.Patch.AnyOfPlayer_Position {
		delete(engine.Patch.AnyOfPlayer_Position, key)
	}
	for key := range engine.Patch.AnyOfPlayer_ZoneItem {
		delete(engine.Patch.AnyOfPlayer_ZoneItem, key)
	}
	for key := range engine.Patch.AnyOfItem_Player_ZoneItem {
		delete(engine.Patch.AnyOfItem_Player_ZoneItem, key)
	}
}`

const _ReferencedDataStatus_type string = `type ReferencedDataStatus string`

const _ReferencedDataModified_type string = `const (
	ReferencedDataModified	ReferencedDataStatus	= "MODIFIED"
	ReferencedDataUnchanged	ReferencedDataStatus	= "UNCHANGED"
)`

const _ElementKind_type string = `type ElementKind string`

const _ElementKindEquipmentSet_type string = `const (
	ElementKindEquipmentSet	ElementKind	= "EquipmentSet"
	ElementKindGearScore	ElementKind	= "GearScore"
	ElementKindItem		ElementKind	= "Item"
	ElementKindPlayer	ElementKind	= "Player"
	ElementKindPosition	ElementKind	= "Position"
	ElementKindZone		ElementKind	= "Zone"
	ElementKindZoneItem	ElementKind	= "ZoneItem"
)`

const _Tree_type string = `type Tree struct {
	EquipmentSet	map[EquipmentSetID]EquipmentSet	` + "`" + `json:"equipmentSet"` + "`" + `
	GearScore	map[GearScoreID]GearScore	` + "`" + `json:"gearScore"` + "`" + `
	Item		map[ItemID]Item			` + "`" + `json:"item"` + "`" + `
	Player		map[PlayerID]Player		` + "`" + `json:"player"` + "`" + `
	Position	map[PositionID]Position		` + "`" + `json:"position"` + "`" + `
	Zone		map[ZoneID]Zone			` + "`" + `json:"zone"` + "`" + `
	ZoneItem	map[ZoneItemID]ZoneItem		` + "`" + `json:"zoneItem"` + "`" + `
}`

const newTree_func string = `func newTree() Tree {
	return Tree{EquipmentSet: make(map[EquipmentSetID]EquipmentSet), GearScore: make(map[GearScoreID]GearScore), Item: make(map[ItemID]Item), Player: make(map[PlayerID]Player), Position: make(map[PositionID]Position), Zone: make(map[ZoneID]Zone), ZoneItem: make(map[ZoneItemID]ZoneItem)}
}`

const _ZoneItem_type string = `type ZoneItem struct {
	ID		ZoneItemID	` + "`" + `json:"id"` + "`" + `
	Item		*Item		` + "`" + `json:"item"` + "`" + `
	Position	*Position	` + "`" + `json:"position"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
}`

const _ZoneItemReference_type string = `type ZoneItemReference struct {
	OperationKind		OperationKind		` + "`" + `json:"operationKind"` + "`" + `
	ElementID		ZoneItemID		` + "`" + `json:"id"` + "`" + `
	ElementKind		ElementKind		` + "`" + `json:"elementKind"` + "`" + `
	ReferencedDataStatus	ReferencedDataStatus	` + "`" + `json:"referencedDataStatus"` + "`" + `
	ElementPath		string			` + "`" + `json:"elementPath"` + "`" + `
	ZoneItem		*ZoneItem		` + "`" + `json:"zoneItem"` + "`" + `
}`

const _Item_type string = `type Item struct {
	ID		ItemID			` + "`" + `json:"id"` + "`" + `
	BoundTo		*PlayerReference	` + "`" + `json:"boundTo"` + "`" + `
	GearScore	*GearScore		` + "`" + `json:"gearScore"` + "`" + `
	Name		string			` + "`" + `json:"name"` + "`" + `
	Origin		interface{}		` + "`" + `json:"origin"` + "`" + `
	OperationKind	OperationKind		` + "`" + `json:"operationKind"` + "`" + `
}`

const _ItemReference_type string = `type ItemReference struct {
	OperationKind		OperationKind		` + "`" + `json:"operationKind"` + "`" + `
	ElementID		ItemID			` + "`" + `json:"id"` + "`" + `
	ElementKind		ElementKind		` + "`" + `json:"elementKind"` + "`" + `
	ReferencedDataStatus	ReferencedDataStatus	` + "`" + `json:"referencedDataStatus"` + "`" + `
	ElementPath		string			` + "`" + `json:"elementPath"` + "`" + `
	Item			*Item			` + "`" + `json:"item"` + "`" + `
}`

const _EquipmentSet_type string = `type EquipmentSet struct {
	ID		EquipmentSetID			` + "`" + `json:"id"` + "`" + `
	Equipment	map[ItemID]ItemReference	` + "`" + `json:"equipment"` + "`" + `
	Name		string				` + "`" + `json:"name"` + "`" + `
	OperationKind	OperationKind			` + "`" + `json:"operationKind"` + "`" + `
}`

const _EquipmentSetReference_type string = `type EquipmentSetReference struct {
	OperationKind		OperationKind		` + "`" + `json:"operationKind"` + "`" + `
	ElementID		EquipmentSetID		` + "`" + `json:"id"` + "`" + `
	ElementKind		ElementKind		` + "`" + `json:"elementKind"` + "`" + `
	ReferencedDataStatus	ReferencedDataStatus	` + "`" + `json:"referencedDataStatus"` + "`" + `
	ElementPath		string			` + "`" + `json:"elementPath"` + "`" + `
	EquipmentSet		*EquipmentSet		` + "`" + `json:"equipmentSet"` + "`" + `
}`

const _Position_type string = `type Position struct {
	ID		PositionID	` + "`" + `json:"id"` + "`" + `
	X		float64		` + "`" + `json:"x"` + "`" + `
	Y		float64		` + "`" + `json:"y"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
}`

const _PositionReference_type string = `type PositionReference struct {
	OperationKind		OperationKind		` + "`" + `json:"operationKind"` + "`" + `
	ElementID		PositionID		` + "`" + `json:"id"` + "`" + `
	ElementKind		ElementKind		` + "`" + `json:"elementKind"` + "`" + `
	ReferencedDataStatus	ReferencedDataStatus	` + "`" + `json:"referencedDataStatus"` + "`" + `
	ElementPath		string			` + "`" + `json:"elementPath"` + "`" + `
	Position		*Position		` + "`" + `json:"position"` + "`" + `
}`

const _GearScore_type string = `type GearScore struct {
	ID		GearScoreID	` + "`" + `json:"id"` + "`" + `
	Level		int		` + "`" + `json:"level"` + "`" + `
	Score		int		` + "`" + `json:"score"` + "`" + `
	OperationKind	OperationKind	` + "`" + `json:"operationKind"` + "`" + `
}`

const _GearScoreReference_type string = `type GearScoreReference struct {
	OperationKind		OperationKind		` + "`" + `json:"operationKind"` + "`" + `
	ElementID		GearScoreID		` + "`" + `json:"id"` + "`" + `
	ElementKind		ElementKind		` + "`" + `json:"elementKind"` + "`" + `
	ReferencedDataStatus	ReferencedDataStatus	` + "`" + `json:"referencedDataStatus"` + "`" + `
	ElementPath		string			` + "`" + `json:"elementPath"` + "`" + `
	GearScore		*GearScore		` + "`" + `json:"gearScore"` + "`" + `
}`

const _Player_type string = `type Player struct {
	ID		PlayerID					` + "`" + `json:"id"` + "`" + `
	EquipmentSets	map[EquipmentSetID]EquipmentSetReference	` + "`" + `json:"equipmentSets"` + "`" + `
	GearScore	*GearScore					` + "`" + `json:"gearScore"` + "`" + `
	GuildMembers	map[PlayerID]PlayerReference			` + "`" + `json:"guildMembers"` + "`" + `
	Items		map[ItemID]Item					` + "`" + `json:"items"` + "`" + `
	Position	*Position					` + "`" + `json:"position"` + "`" + `
	Target		*AnyOfPlayer_ZoneItemReference			` + "`" + `json:"target"` + "`" + `
	TargetedBy	map[int]AnyOfPlayer_ZoneItemReference		` + "`" + `json:"targetedBy"` + "`" + `
	OperationKind	OperationKind					` + "`" + `json:"operationKind"` + "`" + `
}`

const _PlayerReference_type string = `type PlayerReference struct {
	OperationKind		OperationKind		` + "`" + `json:"operationKind"` + "`" + `
	ElementID		PlayerID		` + "`" + `json:"id"` + "`" + `
	ElementKind		ElementKind		` + "`" + `json:"elementKind"` + "`" + `
	ReferencedDataStatus	ReferencedDataStatus	` + "`" + `json:"referencedDataStatus"` + "`" + `
	ElementPath		string			` + "`" + `json:"elementPath"` + "`" + `
	Player			*Player			` + "`" + `json:"player"` + "`" + `
}`

const _Zone_type string = `type Zone struct {
	ID		ZoneID			` + "`" + `json:"id"` + "`" + `
	Interactables	map[int]interface{}	` + "`" + `json:"interactables"` + "`" + `
	Items		map[ZoneItemID]ZoneItem	` + "`" + `json:"items"` + "`" + `
	Players		map[PlayerID]Player	` + "`" + `json:"players"` + "`" + `
	Tags		[]string		` + "`" + `json:"tags"` + "`" + `
	OperationKind	OperationKind		` + "`" + `json:"operationKind"` + "`" + `
}`

const _ZoneReference_type string = `type ZoneReference struct {
	OperationKind		OperationKind		` + "`" + `json:"operationKind"` + "`" + `
	ElementID		ZoneID			` + "`" + `json:"id"` + "`" + `
	ElementKind		ElementKind		` + "`" + `json:"elementKind"` + "`" + `
	ReferencedDataStatus	ReferencedDataStatus	` + "`" + `json:"referencedDataStatus"` + "`" + `
	ElementPath		string			` + "`" + `json:"elementPath"` + "`" + `
	Zone			*Zone			` + "`" + `json:"zone"` + "`" + `
}`

const _AnyOfPlayer_ZoneItemReference_type string = `type AnyOfPlayer_ZoneItemReference struct {
	OperationKind		OperationKind		` + "`" + `json:"operationKind"` + "`" + `
	ElementID		int			` + "`" + `json:"id"` + "`" + `
	ElementKind		ElementKind		` + "`" + `json:"elementKind"` + "`" + `
	ReferencedDataStatus	ReferencedDataStatus	` + "`" + `json:"referencedDataStatus"` + "`" + `
	ElementPath		string			` + "`" + `json:"elementPath"` + "`" + `
	Element			interface{}		` + "`" + `json:"element"` + "`" + `
}`

const recursionCheck_type string = `type recursionCheck struct {
	equipmentSet	map[EquipmentSetID]bool
	gearScore	map[GearScoreID]bool
	item		map[ItemID]bool
	player		map[PlayerID]bool
	position	map[PositionID]bool
	zone		map[ZoneID]bool
	zoneItem	map[ZoneItemID]bool
}`

const newRecursionCheck_func string = `func newRecursionCheck() *recursionCheck {
	return &recursionCheck{equipmentSet: make(map[EquipmentSetID]bool), gearScore: make(map[GearScoreID]bool), item: make(map[ItemID]bool), player: make(map[PlayerID]bool), position: make(map[PositionID]bool), zone: make(map[ZoneID]bool), zoneItem: make(map[ZoneItemID]bool)}
}`

const assembleCache_type string = `type assembleCache struct {
	equipmentSet	map[EquipmentSetID]equipmentSetCacheElement
	gearScore	map[GearScoreID]gearScoreCacheElement
	item		map[ItemID]itemCacheElement
	player		map[PlayerID]playerCacheElement
	position	map[PositionID]positionCacheElement
	zone		map[ZoneID]zoneCacheElement
	zoneItem	map[ZoneItemID]zoneItemCacheElement
}`

const newAssembleCache_func string = `func newAssembleCache() assembleCache {
	return assembleCache{equipmentSet: make(map[EquipmentSetID]equipmentSetCacheElement), gearScore: make(map[GearScoreID]gearScoreCacheElement), item: make(map[ItemID]itemCacheElement), player: make(map[PlayerID]playerCacheElement), position: make(map[PositionID]positionCacheElement), zone: make(map[ZoneID]zoneCacheElement), zoneItem: make(map[ZoneItemID]zoneItemCacheElement)}
}`

const equipmentSetCacheElement_type string = `type equipmentSetCacheElement struct {
	hasUpdated	bool
	equipmentSet	EquipmentSet
}`

const gearScoreCacheElement_type string = `type gearScoreCacheElement struct {
	hasUpdated	bool
	gearScore	GearScore
}`

const itemCacheElement_type string = `type itemCacheElement struct {
	hasUpdated	bool
	item		Item
}`

const playerCacheElement_type string = `type playerCacheElement struct {
	hasUpdated	bool
	player		Player
}`

const positionCacheElement_type string = `type positionCacheElement struct {
	hasUpdated	bool
	position	Position
}`

const zoneCacheElement_type string = `type zoneCacheElement struct {
	hasUpdated	bool
	zone		Zone
}`

const zoneItemCacheElement_type string = `type zoneItemCacheElement struct {
	hasUpdated	bool
	zoneItem	ZoneItem
}`
