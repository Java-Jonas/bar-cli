package main

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/parser"
	"go/printer"
	"go/token"
	"io/ioutil"
	"path/filepath"
	"regexp"
	"strings"
)

var generatedFileMatcher = regexp.MustCompile(`\.generated`)
var excludeFileMatcher = regexp.MustCompile(`_test|_easyjson`)

type sourceDir struct {
	name string
	path string
}

// TODO find way to make paths absolute
var sourceDirs = []sourceDir{
	{path: "./examples/server", name: "server"},
	{path: "./examples/client", name: "client"},
	{path: "./examples/connect", name: "connect"},
	{path: "./examples/logging", name: "logging"},
	{path: "./examples/message", name: "message"},
	{path: "./examples/state", name: "state"},
}

func scanDeclsInDir(directoryPath string) (decls []ast.Decl, importDecls []ast.Decl, err error) {

	fileInfos, err := ioutil.ReadDir(directoryPath)
	if err != nil {
		return nil, nil, err
	}

	for _, fileInfo := range fileInfos {
		if fileInfo.IsDir() {
			continue
		}

		fileName := fileInfo.Name()
		filePath := filepath.Join(directoryPath, fileName)

		if filepath.Ext(fileName) != ".go" {
			continue
		}

		if excludeFileMatcher.MatchString(fileName) {
			continue
		}

		content, err := ioutil.ReadFile(filePath)
		if err != nil {
			return nil, nil, err
		}

		f, err := parser.ParseFile(token.NewFileSet(), "", content, 0)
		if err != nil {
			return nil, nil, err
		}

		if generatedFileMatcher.MatchString(fileName) {

			for _, decl := range f.Decls {
				if _, ok := isImportDecl(decl); ok {
					importDecls = append(importDecls, decl)
				}
			}

		} else {

			for _, decl := range f.Decls {
				if _, ok := isImportDecl(decl); ok {
					importDecls = append(importDecls, decl)
				} else {
					decls = append(decls, decl)
				}
			}

		}
	}

	return
}

func writeCodeFromDir(buf *bytes.Buffer, path string) *bytes.Buffer {

	decls, importDecls, err := scanDeclsInDir(path)
	if err != nil {
		panic(err)
	}

	if importDecl, ok := newImportDecl(importDecls); ok {
		printer.Fprint(buf, token.NewFileSet(), importDecl)
		buf.WriteString("\n")
	}

	printer.Fprint(buf, token.NewFileSet(), decls)

	return buf
}

func newImportDecl(importDecls []ast.Decl) (ast.Decl, bool) {
	importDecl := &ast.GenDecl{
		Tok: token.IMPORT,
	}

	dedupSpecs := make(map[string]ast.Spec)

	for _, decl := range importDecls {
		if genDecl, ok := isImportDecl(decl); ok {

			for _, spec := range genDecl.Specs {
				buf := bytes.NewBufferString("")
				printer.Fprint(buf, token.NewFileSet(), spec)
				specString := buf.String()

				dedupSpecs[specString] = spec
			}

		}
	}

	for _, spec := range dedupSpecs {
		importDecl.Specs = append(importDecl.Specs, spec)
	}

	return importDecl, len(dedupSpecs) > 0
}

func isImportDecl(decl ast.Decl) (*ast.GenDecl, bool) {
	if genDecl, ok := decl.(*ast.GenDecl); ok {

		if genDecl.Tok == token.IMPORT {
			return genDecl, true
		}

	}

	return nil, false
}

func writeDecl(buf *bytes.Buffer, name string, value string) {
	buf.WriteString("\n\nconst " + name + " string = `" + escapeBackticks(value) + "`")
}

func escapeBackticks(s string) string {
	return strings.Replace(s, "`", "` + \"`\" +  `", -1)
}

func main() {

	file := bytes.NewBufferString("// this file was generated by sourcing the examples within this repo\n")
	file.WriteString("\npackage main\n")

	for _, dir := range sourceDirs {
		buf := bytes.NewBufferString(fmt.Sprintf("package %s\n", dir.name))
		writeCodeFromDir(buf, dir.path)
		writeDecl(file, fmt.Sprintf("importedCode_%s", dir.name), buf.String())
	}

	content := file.Bytes()
	// TODO find better way to read own path
	content = bytes.ReplaceAll(content, []byte("github.com/jobergner/backent-cli"), []byte("{{path}}"))

	if err := ioutil.WriteFile("./static_code.pregenerated.go", content, 0644); err != nil {
		panic(err)
	}
}
