package main

import (
	"bytes"
	"go/ast"
	"go/parser"
	"go/printer"
	"go/token"
	"io/ioutil"
	"path/filepath"
	"regexp"
	"strings"

	"github.com/jobergner/backent-cli/pkg/factory/utils"
)

var generatedFileMatcher = regexp.MustCompile(`\.generated`)
var testFileMatcher = regexp.MustCompile(`_test`)

type sourceDir struct {
	name string
	path string
}

var sourceDirs = []sourceDir{
	{path: "./examples/server", name: "server"},
	{path: "./examples/client", name: "client"},
	{path: "./examples/connect", name: "connect"},
	{path: "./examples/logging", name: "logging"},
	{path: "./examples/message", name: "message"},
	{path: "./examples/state", name: "state"},
}

type importedFile struct {
	importDecl  string
	decls       string
	packageName string
}

func scanDeclsInDir(directoryPath string) (decls []ast.Decl, importDecls []ast.Decl, err error) {

	fileInfos, err := ioutil.ReadDir(directoryPath)
	if err != nil {
		return nil, nil, err
	}

	for _, fileInfo := range fileInfos {
		if fileInfo.IsDir() {
			continue
		}

		fileName := fileInfo.Name()
		filePath := filepath.Join(directoryPath, fileName)

		if filepath.Ext(fileName) != ".go" {
			continue
		}

		if testFileMatcher.MatchString(fileName) {
			continue
		}

		content, err := ioutil.ReadFile(filePath)
		if err != nil {
			return nil, nil, err
		}

		f, err := parser.ParseFile(token.NewFileSet(), "", content, 0)
		if err != nil {
			return nil, nil, err
		}

		if generatedFileMatcher.MatchString(fileName) {

			for _, decl := range f.Decls {
				if _, ok := isImportDecl(decl); ok {
					decls = append(importDecls, decl)
				}
			}

		} else {

			for _, decl := range f.Decls {
				if _, ok := isImportDecl(decl); ok {
					decls = append(importDecls, decl)
				} else {
					decls = append(decls, decl)
				}
			}

		}
	}

	return decls, nil, nil
}

func newImportedFile(dir sourceDir) importedFile {

	decls, importDecls, err := scanDeclsInDir(dir.path)
	if err != nil {
		panic(err)
	}

	buf := bytes.Buffer{}
	printer.Fprint(&buf, token.NewFileSet(), decls)

	f := importedFile{
		packageName: dir.name,
		decls:       buf.String(),
		importDecl:  newImportDecl(importDecls),
	}

	return f
}

func newImportDecl(importDecls []ast.Decl) string {
	importDecl := &ast.GenDecl{
		Tok: token.IMPORT,
	}

	for _, decl := range importDecls {
		if genDecl, ok := isImportDecl(decl); ok {
			importDecl.Specs = append(importDecl.Specs, genDecl.Specs...)
		}
	}

	importBuf := bytes.NewBufferString(utils.PackageClause)

	printer.Fprint(importBuf, token.NewFileSet(), importDecl)
	utils.Format(importBuf)

	return utils.TrimPackageClause(importBuf.String())
}

func isImportDecl(decl ast.Decl) (*ast.GenDecl, bool) {
	if genDecl, ok := decl.(*ast.GenDecl); ok {

		if genDecl.Tok == token.IMPORT {
			return genDecl, true
		}

	}

	return nil, false
}

func writeDecl(buf *bytes.Buffer, name string, value string) {
	buf.WriteString("\n\nconst " + name + " string = `" + escapeBackticks(value) + "`")
}

func escapeBackticks(s string) string {
	return strings.Replace(s, "`", "` + \"`\" +  `", -1)
}

func main() {
	buf := bytes.NewBufferString("// this code is generated by sourcing the examples within this repo\n")

	buf.WriteString("package main\n")

	var files []importedFile

	for _, dir := range sourceDirs {
		files = append(files, newImportedFile(dir))
	}

	if err := ioutil.WriteFile("./copied_from_examples.go", buf.Bytes(), 0644); err != nil {
		panic(err)
	}
}
