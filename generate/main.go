package main

import (
	"bytes"
	"go/ast"
	"go/parser"
	"go/printer"
	"go/token"
	"io/ioutil"
	"path/filepath"
	"strings"

	"github.com/jobergner/backent-cli/factoryutils"
)

var importedDirs = []string{
	"./examples/application/server",
	"./examples/engine",
}

var excludedFiles = []string{
	"examples/application/server/gets_generated.go",
	"examples/application/server/gets_generated_easyjson.go",
	"examples/application/server/message_easyjson.go",
	"examples/application/server/state.go",
	"examples/application/server/state_easyjson.go",
	"examples/engine/state_engine_test.go",
	"examples/engine/state_engine_bench_test.go",
	"examples/engine/tree_easyjson.go",
}

func isExcludedFileName(filePath string) bool {
	for _, excludedFile := range excludedFiles {
		if filePath == excludedFile {
			return true
		}
	}
	return false
}

func isForceIncludeFileName(filePath string, forceIncludeFileNames []string) bool {
	for _, forceIncludeFileName := range forceIncludeFileNames {
		if filePath == forceIncludeFileName {
			return true
		}
	}
	return false
}

func scanDeclsInDir(directoryPath string, forceIncludeFileNames ...string) ([]ast.Decl, error) {

	fileInfos, err := ioutil.ReadDir(directoryPath)
	if err != nil {
		return nil, err
	}

	var decls []ast.Decl

	for _, fileInfo := range fileInfos {
		if fileInfo.IsDir() {
			continue
		}

		fileName := fileInfo.Name()
		filePath := filepath.Join(directoryPath, fileName)

		if filepath.Ext(fileName) != ".go" {
			continue
		}

		if isExcludedFileName(filePath) && !isForceIncludeFileName(filePath, forceIncludeFileNames) {
			continue
		}

		content, err := ioutil.ReadFile(filePath)
		if err != nil {
			return nil, err
		}

		f, err := parser.ParseFile(token.NewFileSet(), "", content, 0)
		if err != nil {
			return nil, err
		}

		decls = append(decls, f.Decls...)
	}

	return decls, nil
}

func readImportedServerExampleFiles() string {

	dirDecls, err := scanDeclsInDir(importedDirs[0])
	if err != nil {
		panic(err)
	}

	var decls []ast.Decl
	for _, decl := range dirDecls {
		if _, ok := isImportDecl(decl); !ok {
			decls = append(decls, decl)
		}
	}

	buf := bytes.Buffer{}
	printer.Fprint(&buf, token.NewFileSet(), decls)
	return buf.String()
}

func generateImportDecl(engineOnly bool) string {
	importDecl := &ast.GenDecl{
		Tok: token.IMPORT,
	}

	var decls []ast.Decl
	if engineOnly {
		dirDecls, err := scanDeclsInDir(importedDirs[1])
		if err != nil {
			panic(err)
		}
		decls = append(decls, dirDecls...)
	} else {
		for _, importedDir := range importedDirs {
			dirDecls, err := scanDeclsInDir(importedDir, "examples/application/server/gets_generated.go")
			if err != nil {
				panic(err)
			}
			decls = append(decls, dirDecls...)
		}
	}

	for _, decl := range decls {
		if genDecl, ok := isImportDecl(decl); ok {
			importDecl.Specs = append(importDecl.Specs, genDecl.Specs...)
		}
	}

	importBuf := bytes.NewBufferString("package state\n")
	printer.Fprint(importBuf, token.NewFileSet(), importDecl)
	factoryutils.Format(importBuf)
	return factoryutils.TrimPackageName(importBuf.String())
}

func isImportDecl(decl ast.Decl) (*ast.GenDecl, bool) {
	if genDecl, ok := decl.(*ast.GenDecl); ok {
		if genDecl.Tok == token.IMPORT {
			return genDecl, true
		}
	}
	return nil, false
}

func writeDecl(buf *bytes.Buffer, name string, value string) {
	buf.WriteString("\n\nconst " + name + " string = `" + escapeBackticks(value) + "`")
}

func escapeBackticks(s string) string {
	return strings.Replace(s, "`", "` + \"`\" +  `", -1)
}

func main() {
	buf := bytes.NewBufferString("// this code is generated by sourcing the examples within this repo\n")

	buf.WriteString("package main\n")

	engineOnlyImportDecl := generateImportDecl(true)
	writeDecl(buf, "engine_only_import_decl", engineOnlyImportDecl)

	importDecl := generateImportDecl(false)
	writeDecl(buf, "import_decl", importDecl)

	importedServerExampleFiles := readImportedServerExampleFiles()
	writeDecl(buf, "imported_server_example_files", importedServerExampleFiles)

	if err := ioutil.WriteFile("./copied_from_examples.go", buf.Bytes(), 0644); err != nil {
		panic(err)
	}
}
