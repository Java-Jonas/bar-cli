package main

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/parser"
	"go/printer"
	"go/token"
	"io/ioutil"
	"os"
	"path/filepath"
	"regexp"
	"strings"

	"github.com/dave/jennifer/jen"
	"github.com/jobergner/backent-cli/pkg/packages"
)

var generatedFileMatcher = regexp.MustCompile(`\.generated`)
var excludeFileMatcher = regexp.MustCompile(`_test|_easyjson`)

func scanDeclsInDir(directoryPath string) (decls []ast.Decl, importDecls []ast.Decl, err error) {

	fileInfos, err := ioutil.ReadDir(directoryPath)
	if err != nil {
		return nil, nil, err
	}

	for _, fileInfo := range fileInfos {
		if fileInfo.IsDir() {
			continue
		}

		fileName := fileInfo.Name()
		filePath := filepath.Join(directoryPath, fileName)

		if filepath.Ext(fileName) != ".go" {
			continue
		}

		if excludeFileMatcher.MatchString(fileName) {
			continue
		}

		content, err := os.ReadFile(filePath)
		if err != nil {
			return nil, nil, err
		}

		f, err := parser.ParseFile(token.NewFileSet(), "", content, parser.ParseComments)
		if err != nil {
			return nil, nil, err
		}

		if generatedFileMatcher.MatchString(fileName) {

			for _, decl := range f.Decls {
				if _, ok := isImportDecl(decl); ok {
					importDecls = append(importDecls, decl)
				}
			}

		} else {

			for _, decl := range f.Decls {
				if _, ok := isImportDecl(decl); ok {
					importDecls = append(importDecls, decl)
				} else {
					decls = append(decls, decl)
				}
			}

		}
	}

	return
}

func writeCodeFromDir(path string) string {
	buf := bytes.NewBuffer(nil)

	decls, importDecls, err := scanDeclsInDir(path)
	if err != nil {
		panic(err)
	}

	if importDecl, ok := newImportDecl(importDecls); ok {
		printer.Fprint(buf, token.NewFileSet(), importDecl)
		buf.WriteString("\n")
	}

	for _, decl := range decls {
		if needsSkipMarshallerComment(decl) {
			buf.WriteString("// easyjson:skip\n")
		}
		purgeSkipMarshallerComment(decl)
		printer.Fprint(buf, token.NewFileSet(), decl)
		buf.WriteString("\n")
	}

	return buf.String()
}

func newImportDecl(importDecls []ast.Decl) (ast.Decl, bool) {
	importDecl := &ast.GenDecl{
		Tok: token.IMPORT,
	}

	dedupSpecs := make(map[string]ast.Spec)

	for _, decl := range importDecls {
		if genDecl, ok := isImportDecl(decl); ok {

			for _, spec := range genDecl.Specs {
				buf := bytes.NewBuffer(nil)
				printer.Fprint(buf, token.NewFileSet(), spec)
				specString := buf.String()

				dedupSpecs[specString] = spec
			}

		}
	}

	for _, spec := range dedupSpecs {
		importDecl.Specs = append(importDecl.Specs, spec)
	}

	return importDecl, len(dedupSpecs) > 0
}

func purgeSkipMarshallerComment(decl ast.Decl) {
	if genDecl, ok := decl.(*ast.FuncDecl); ok {
		genDecl.Doc = nil
	}
	if genDecl, ok := decl.(*ast.GenDecl); ok {
		genDecl.Doc = nil
		// TODO: figure out how to maintain comments as intended in the future
		// if genDecl.Doc == nil {
		// 	return
		// }
		// for _, c := range genDecl.Doc.List {
		// 	c.Text = strings.ReplaceAll(c.Text, "easyjson:skip", "")
		// }
	}
}

func needsSkipMarshallerComment(decl ast.Decl) bool {
	if genDecl, ok := decl.(*ast.GenDecl); ok {
		return strings.Contains(genDecl.Doc.Text(), "easyjson:skip")
	}

	return false
}

func isImportDecl(decl ast.Decl) (*ast.GenDecl, bool) {
	if genDecl, ok := decl.(*ast.GenDecl); ok {

		if genDecl.Tok == token.IMPORT {
			return genDecl, true
		}

	}

	return nil, false
}

func escapeBackticks(s string) string {
	return strings.Replace(s, "`", "` + \"`\" +  `", -1)
}

func main() {

	file := jen.NewFile("main")
	file.Comment("this file was generated by sourcing the examples within this repo")

	mapContent := make(jen.Dict)
	for _, pkg := range packages.Packages(nil) {
		code := fmt.Sprintf("package %s \n%s", pkg.Name, writeCodeFromDir(pkg.SourcePath))
		mapContent[jen.Lit(pkg.StaticCodeIdentifier)] = jen.Id("`" + escapeBackticks(code) + "`")
	}

	file.Var().Id("staticCode").Op("=").Map(jen.String()).String().Values(mapContent)

	buf := bytes.NewBuffer(nil)

	file.Render(buf)

	content := buf.Bytes()
	// TODO find better way to read own path
	content = bytes.ReplaceAll(content, []byte("github.com/jobergner/backent-cli/examples"), []byte("{{path}}"))

	if err := os.WriteFile("./static_code.pregenerated.go", content, 0644); err != nil {
		panic(err)
	}
}
