// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package state

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	websocket "nhooyr.io/websocket"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState(in *jlexer.Lexer, out *zoneItemCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ZoneItemID(in.Int())
		case "item":
			out.Item = ItemID(in.Int())
		case "position":
			out.Position = PositionID(in.Int())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "hasParent":
			out.HasParent = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState(out *jwriter.Writer, in zoneItemCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Item != 0 {
		const prefix string = ",\"item\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Item))
	}
	if in.Position != 0 {
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Position))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if in.HasParent {
		const prefix string = ",\"hasParent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasParent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v zoneItemCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v zoneItemCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *zoneItemCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *zoneItemCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState1(in *jlexer.Lexer, out *zoneItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState1(out *jwriter.Writer, in zoneItem) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v zoneItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v zoneItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *zoneItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *zoneItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState1(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState2(in *jlexer.Lexer, out *zoneCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ZoneID(in.Int())
		case "interactables":
			if in.IsNull() {
				in.Skip()
				out.Interactables = nil
			} else {
				in.Delim('[')
				if out.Interactables == nil {
					if !in.IsDelim(']') {
						out.Interactables = make([]AnyOfItem_Player_ZoneItemID, 0, 8)
					} else {
						out.Interactables = []AnyOfItem_Player_ZoneItemID{}
					}
				} else {
					out.Interactables = (out.Interactables)[:0]
				}
				for !in.IsDelim(']') {
					var v1 AnyOfItem_Player_ZoneItemID
					v1 = AnyOfItem_Player_ZoneItemID(in.Int())
					out.Interactables = append(out.Interactables, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]ZoneItemID, 0, 8)
					} else {
						out.Items = []ZoneItemID{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v2 ZoneItemID
					v2 = ZoneItemID(in.Int())
					out.Items = append(out.Items, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "players":
			if in.IsNull() {
				in.Skip()
				out.Players = nil
			} else {
				in.Delim('[')
				if out.Players == nil {
					if !in.IsDelim(']') {
						out.Players = make([]PlayerID, 0, 8)
					} else {
						out.Players = []PlayerID{}
					}
				} else {
					out.Players = (out.Players)[:0]
				}
				for !in.IsDelim(']') {
					var v3 PlayerID
					v3 = PlayerID(in.Int())
					out.Players = append(out.Players, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Tags = append(out.Tags, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState2(out *jwriter.Writer, in zoneCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if len(in.Interactables) != 0 {
		const prefix string = ",\"interactables\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Interactables {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v6))
			}
			out.RawByte(']')
		}
	}
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v7, v8 := range in.Items {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v8))
			}
			out.RawByte(']')
		}
	}
	if len(in.Players) != 0 {
		const prefix string = ",\"players\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v9, v10 := range in.Players {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v10))
			}
			out.RawByte(']')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.Tags {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v zoneCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v zoneCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *zoneCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *zoneCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState2(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState3(in *jlexer.Lexer, out *zone) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState3(out *jwriter.Writer, in zone) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v zone) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v zone) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *zone) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *zone) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState3(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState4(in *jlexer.Lexer, out *recursionCheck) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState4(out *jwriter.Writer, in recursionCheck) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v recursionCheck) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v recursionCheck) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *recursionCheck) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *recursionCheck) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState4(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState5(in *jlexer.Lexer, out *positionCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = PositionID(in.Int())
		case "x":
			out.X = float64(in.Float64())
		case "y":
			out.Y = float64(in.Float64())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "hasParent":
			out.HasParent = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState5(out *jwriter.Writer, in positionCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.X != 0 {
		const prefix string = ",\"x\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Y))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if in.HasParent {
		const prefix string = ",\"hasParent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasParent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v positionCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v positionCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *positionCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *positionCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState5(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState6(in *jlexer.Lexer, out *position) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState6(out *jwriter.Writer, in position) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v position) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v position) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *position) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *position) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState6(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState7(in *jlexer.Lexer, out *playerTargetedByRefCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = PlayerTargetedByRefID(in.Int())
		case "parentID":
			out.ParentID = PlayerID(in.Int())
		case "referencedElementID":
			out.ReferencedElementID = AnyOfPlayer_ZoneItemID(in.Int())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState7(out *jwriter.Writer, in playerTargetedByRefCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.ParentID != 0 {
		const prefix string = ",\"parentID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ParentID))
	}
	if in.ReferencedElementID != 0 {
		const prefix string = ",\"referencedElementID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReferencedElementID))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v playerTargetedByRefCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v playerTargetedByRefCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *playerTargetedByRefCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *playerTargetedByRefCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState7(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState8(in *jlexer.Lexer, out *playerTargetedByRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState8(out *jwriter.Writer, in playerTargetedByRef) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v playerTargetedByRef) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v playerTargetedByRef) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *playerTargetedByRef) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *playerTargetedByRef) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState8(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState9(in *jlexer.Lexer, out *playerTargetRefCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = PlayerTargetRefID(in.Int())
		case "parentID":
			out.ParentID = PlayerID(in.Int())
		case "referencedElementID":
			out.ReferencedElementID = AnyOfPlayer_ZoneItemID(in.Int())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState9(out *jwriter.Writer, in playerTargetRefCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.ParentID != 0 {
		const prefix string = ",\"parentID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ParentID))
	}
	if in.ReferencedElementID != 0 {
		const prefix string = ",\"referencedElementID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReferencedElementID))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v playerTargetRefCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v playerTargetRefCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *playerTargetRefCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *playerTargetRefCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState9(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState10(in *jlexer.Lexer, out *playerTargetRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState10(out *jwriter.Writer, in playerTargetRef) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v playerTargetRef) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v playerTargetRef) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *playerTargetRef) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *playerTargetRef) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState10(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState11(in *jlexer.Lexer, out *playerGuildMemberRefCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = PlayerGuildMemberRefID(in.Int())
		case "parentID":
			out.ParentID = PlayerID(in.Int())
		case "referencedElementID":
			out.ReferencedElementID = PlayerID(in.Int())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState11(out *jwriter.Writer, in playerGuildMemberRefCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.ParentID != 0 {
		const prefix string = ",\"parentID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ParentID))
	}
	if in.ReferencedElementID != 0 {
		const prefix string = ",\"referencedElementID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReferencedElementID))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v playerGuildMemberRefCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v playerGuildMemberRefCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *playerGuildMemberRefCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *playerGuildMemberRefCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState11(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState12(in *jlexer.Lexer, out *playerGuildMemberRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState12(out *jwriter.Writer, in playerGuildMemberRef) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v playerGuildMemberRef) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v playerGuildMemberRef) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *playerGuildMemberRef) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *playerGuildMemberRef) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState12(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState13(in *jlexer.Lexer, out *playerEquipmentSetRefCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = PlayerEquipmentSetRefID(in.Int())
		case "parentID":
			out.ParentID = PlayerID(in.Int())
		case "referencedElementID":
			out.ReferencedElementID = EquipmentSetID(in.Int())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState13(out *jwriter.Writer, in playerEquipmentSetRefCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.ParentID != 0 {
		const prefix string = ",\"parentID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ParentID))
	}
	if in.ReferencedElementID != 0 {
		const prefix string = ",\"referencedElementID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReferencedElementID))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v playerEquipmentSetRefCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v playerEquipmentSetRefCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *playerEquipmentSetRefCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *playerEquipmentSetRefCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState13(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState14(in *jlexer.Lexer, out *playerEquipmentSetRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState14(out *jwriter.Writer, in playerEquipmentSetRef) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v playerEquipmentSetRef) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v playerEquipmentSetRef) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *playerEquipmentSetRef) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *playerEquipmentSetRef) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState14(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState15(in *jlexer.Lexer, out *playerCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = PlayerID(in.Int())
		case "equipmentSets":
			if in.IsNull() {
				in.Skip()
				out.EquipmentSets = nil
			} else {
				in.Delim('[')
				if out.EquipmentSets == nil {
					if !in.IsDelim(']') {
						out.EquipmentSets = make([]PlayerEquipmentSetRefID, 0, 8)
					} else {
						out.EquipmentSets = []PlayerEquipmentSetRefID{}
					}
				} else {
					out.EquipmentSets = (out.EquipmentSets)[:0]
				}
				for !in.IsDelim(']') {
					var v13 PlayerEquipmentSetRefID
					v13 = PlayerEquipmentSetRefID(in.Int())
					out.EquipmentSets = append(out.EquipmentSets, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "gearScore":
			out.GearScore = GearScoreID(in.Int())
		case "guildMembers":
			if in.IsNull() {
				in.Skip()
				out.GuildMembers = nil
			} else {
				in.Delim('[')
				if out.GuildMembers == nil {
					if !in.IsDelim(']') {
						out.GuildMembers = make([]PlayerGuildMemberRefID, 0, 8)
					} else {
						out.GuildMembers = []PlayerGuildMemberRefID{}
					}
				} else {
					out.GuildMembers = (out.GuildMembers)[:0]
				}
				for !in.IsDelim(']') {
					var v14 PlayerGuildMemberRefID
					v14 = PlayerGuildMemberRefID(in.Int())
					out.GuildMembers = append(out.GuildMembers, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]ItemID, 0, 8)
					} else {
						out.Items = []ItemID{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v15 ItemID
					v15 = ItemID(in.Int())
					out.Items = append(out.Items, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "position":
			out.Position = PositionID(in.Int())
		case "target":
			out.Target = PlayerTargetRefID(in.Int())
		case "targetedBy":
			if in.IsNull() {
				in.Skip()
				out.TargetedBy = nil
			} else {
				in.Delim('[')
				if out.TargetedBy == nil {
					if !in.IsDelim(']') {
						out.TargetedBy = make([]PlayerTargetedByRefID, 0, 8)
					} else {
						out.TargetedBy = []PlayerTargetedByRefID{}
					}
				} else {
					out.TargetedBy = (out.TargetedBy)[:0]
				}
				for !in.IsDelim(']') {
					var v16 PlayerTargetedByRefID
					v16 = PlayerTargetedByRefID(in.Int())
					out.TargetedBy = append(out.TargetedBy, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "hasParent":
			out.HasParent = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState15(out *jwriter.Writer, in playerCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if len(in.EquipmentSets) != 0 {
		const prefix string = ",\"equipmentSets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.EquipmentSets {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v18))
			}
			out.RawByte(']')
		}
	}
	if in.GearScore != 0 {
		const prefix string = ",\"gearScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.GearScore))
	}
	if len(in.GuildMembers) != 0 {
		const prefix string = ",\"guildMembers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v19, v20 := range in.GuildMembers {
				if v19 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v20))
			}
			out.RawByte(']')
		}
	}
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v21, v22 := range in.Items {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v22))
			}
			out.RawByte(']')
		}
	}
	if in.Position != 0 {
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Position))
	}
	if in.Target != 0 {
		const prefix string = ",\"target\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Target))
	}
	if len(in.TargetedBy) != 0 {
		const prefix string = ",\"targetedBy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v23, v24 := range in.TargetedBy {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v24))
			}
			out.RawByte(']')
		}
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if in.HasParent {
		const prefix string = ",\"hasParent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasParent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v playerCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v playerCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *playerCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *playerCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState15(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState16(in *jlexer.Lexer, out *player) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState16(out *jwriter.Writer, in player) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v player) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v player) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *player) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *player) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState16(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState17(in *jlexer.Lexer, out *pathTrack) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState17(out *jwriter.Writer, in pathTrack) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v pathTrack) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v pathTrack) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *pathTrack) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *pathTrack) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState17(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState18(in *jlexer.Lexer, out *message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "kind":
			out.Kind = messageKind(in.Int())
		case "content":
			if in.IsNull() {
				in.Skip()
				out.Content = nil
			} else {
				out.Content = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState18(out *jwriter.Writer, in message) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Kind != 0 {
		const prefix string = ",\"kind\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Kind))
	}
	if len(in.Content) != 0 {
		const prefix string = ",\"content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Content)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState18(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState19(in *jlexer.Lexer, out *itemCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ItemID(in.Int())
		case "boundTo":
			out.BoundTo = ItemBoundToRefID(in.Int())
		case "gearScore":
			out.GearScore = GearScoreID(in.Int())
		case "name":
			out.Name = string(in.String())
		case "origin":
			out.Origin = AnyOfPlayer_PositionID(in.Int())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "hasParent":
			out.HasParent = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState19(out *jwriter.Writer, in itemCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.BoundTo != 0 {
		const prefix string = ",\"boundTo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BoundTo))
	}
	if in.GearScore != 0 {
		const prefix string = ",\"gearScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.GearScore))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Origin != 0 {
		const prefix string = ",\"origin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Origin))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if in.HasParent {
		const prefix string = ",\"hasParent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasParent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v itemCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v itemCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *itemCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *itemCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState19(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState20(in *jlexer.Lexer, out *itemBoundToRefCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ItemBoundToRefID(in.Int())
		case "parentID":
			out.ParentID = ItemID(in.Int())
		case "referencedElementID":
			out.ReferencedElementID = PlayerID(in.Int())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState20(out *jwriter.Writer, in itemBoundToRefCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.ParentID != 0 {
		const prefix string = ",\"parentID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ParentID))
	}
	if in.ReferencedElementID != 0 {
		const prefix string = ",\"referencedElementID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReferencedElementID))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v itemBoundToRefCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v itemBoundToRefCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *itemBoundToRefCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *itemBoundToRefCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState20(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState21(in *jlexer.Lexer, out *itemBoundToRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState21(out *jwriter.Writer, in itemBoundToRef) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v itemBoundToRef) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v itemBoundToRef) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *itemBoundToRef) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *itemBoundToRef) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState21(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState22(in *jlexer.Lexer, out *item) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState22(out *jwriter.Writer, in item) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v item) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v item) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *item) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *item) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState22(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState23(in *jlexer.Lexer, out *gearScoreCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = GearScoreID(in.Int())
		case "level":
			out.Level = int(in.Int())
		case "score":
			out.Score = int(in.Int())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "hasParent":
			out.HasParent = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState23(out *jwriter.Writer, in gearScoreCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Level != 0 {
		const prefix string = ",\"level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Level))
	}
	if in.Score != 0 {
		const prefix string = ",\"score\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Score))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	if in.HasParent {
		const prefix string = ",\"hasParent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasParent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v gearScoreCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v gearScoreCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *gearScoreCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *gearScoreCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState23(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState24(in *jlexer.Lexer, out *gearScore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState24(out *jwriter.Writer, in gearScore) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v gearScore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v gearScore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *gearScore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *gearScore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState24(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState25(in *jlexer.Lexer, out *equipmentSetEquipmentRefCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = EquipmentSetEquipmentRefID(in.Int())
		case "parentID":
			out.ParentID = EquipmentSetID(in.Int())
		case "referencedElementID":
			out.ReferencedElementID = ItemID(in.Int())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState25(out *jwriter.Writer, in equipmentSetEquipmentRefCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.ParentID != 0 {
		const prefix string = ",\"parentID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ParentID))
	}
	if in.ReferencedElementID != 0 {
		const prefix string = ",\"referencedElementID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReferencedElementID))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v equipmentSetEquipmentRefCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v equipmentSetEquipmentRefCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *equipmentSetEquipmentRefCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *equipmentSetEquipmentRefCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState25(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState26(in *jlexer.Lexer, out *equipmentSetEquipmentRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState26(out *jwriter.Writer, in equipmentSetEquipmentRef) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v equipmentSetEquipmentRef) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v equipmentSetEquipmentRef) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *equipmentSetEquipmentRef) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *equipmentSetEquipmentRef) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState26(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState27(in *jlexer.Lexer, out *equipmentSetCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = EquipmentSetID(in.Int())
		case "equipment":
			if in.IsNull() {
				in.Skip()
				out.Equipment = nil
			} else {
				in.Delim('[')
				if out.Equipment == nil {
					if !in.IsDelim(']') {
						out.Equipment = make([]EquipmentSetEquipmentRefID, 0, 8)
					} else {
						out.Equipment = []EquipmentSetEquipmentRefID{}
					}
				} else {
					out.Equipment = (out.Equipment)[:0]
				}
				for !in.IsDelim(']') {
					var v28 EquipmentSetEquipmentRefID
					v28 = EquipmentSetEquipmentRefID(in.Int())
					out.Equipment = append(out.Equipment, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name = string(in.String())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState27(out *jwriter.Writer, in equipmentSetCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if len(in.Equipment) != 0 {
		const prefix string = ",\"equipment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v29, v30 := range in.Equipment {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v30))
			}
			out.RawByte(']')
		}
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v equipmentSetCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v equipmentSetCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *equipmentSetCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *equipmentSetCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState27(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState28(in *jlexer.Lexer, out *equipmentSet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState28(out *jwriter.Writer, in equipmentSet) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v equipmentSet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v equipmentSet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *equipmentSet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *equipmentSet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState28(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState29(in *jlexer.Lexer, out *assembleConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState29(out *jwriter.Writer, in assembleConfig) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v assembleConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v assembleConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *assembleConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *assembleConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState29(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer(in *jlexer.Lexer, out *anyOfPlayer_ZoneItemCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = AnyOfPlayer_ZoneItemID(in.Int())
		case "elementKind":
			out.ElementKind = ElementKind(in.String())
		case "player":
			out.Player = PlayerID(in.Int())
		case "zoneItem":
			out.ZoneItem = ZoneItemID(in.Int())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer(out *jwriter.Writer, in anyOfPlayer_ZoneItemCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.ElementKind != "" {
		const prefix string = ",\"elementKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElementKind))
	}
	if in.Player != 0 {
		const prefix string = ",\"player\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Player))
	}
	if in.ZoneItem != 0 {
		const prefix string = ",\"zoneItem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ZoneItem))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v anyOfPlayer_ZoneItemCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v anyOfPlayer_ZoneItemCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *anyOfPlayer_ZoneItemCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *anyOfPlayer_ZoneItemCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer1(in *jlexer.Lexer, out *anyOfPlayer_ZoneItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer1(out *jwriter.Writer, in anyOfPlayer_ZoneItem) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v anyOfPlayer_ZoneItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v anyOfPlayer_ZoneItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *anyOfPlayer_ZoneItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *anyOfPlayer_ZoneItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer1(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer2(in *jlexer.Lexer, out *anyOfPlayer_PositionCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = AnyOfPlayer_PositionID(in.Int())
		case "elementKind":
			out.ElementKind = ElementKind(in.String())
		case "player":
			out.Player = PlayerID(in.Int())
		case "position":
			out.Position = PositionID(in.Int())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer2(out *jwriter.Writer, in anyOfPlayer_PositionCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.ElementKind != "" {
		const prefix string = ",\"elementKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElementKind))
	}
	if in.Player != 0 {
		const prefix string = ",\"player\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Player))
	}
	if in.Position != 0 {
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Position))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v anyOfPlayer_PositionCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v anyOfPlayer_PositionCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *anyOfPlayer_PositionCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *anyOfPlayer_PositionCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer2(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer3(in *jlexer.Lexer, out *anyOfPlayer_Position) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer3(out *jwriter.Writer, in anyOfPlayer_Position) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v anyOfPlayer_Position) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v anyOfPlayer_Position) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *anyOfPlayer_Position) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *anyOfPlayer_Position) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer3(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfItemPlayer(in *jlexer.Lexer, out *anyOfItem_Player_ZoneItemCore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = AnyOfItem_Player_ZoneItemID(in.Int())
		case "elementKind":
			out.ElementKind = ElementKind(in.String())
		case "item":
			out.Item = ItemID(in.Int())
		case "player":
			out.Player = PlayerID(in.Int())
		case "zoneItem":
			out.ZoneItem = ZoneItemID(in.Int())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfItemPlayer(out *jwriter.Writer, in anyOfItem_Player_ZoneItemCore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.ElementKind != "" {
		const prefix string = ",\"elementKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElementKind))
	}
	if in.Item != 0 {
		const prefix string = ",\"item\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Item))
	}
	if in.Player != 0 {
		const prefix string = ",\"player\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Player))
	}
	if in.ZoneItem != 0 {
		const prefix string = ",\"zoneItem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ZoneItem))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v anyOfItem_Player_ZoneItemCore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfItemPlayer(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v anyOfItem_Player_ZoneItemCore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfItemPlayer(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *anyOfItem_Player_ZoneItemCore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfItemPlayer(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *anyOfItem_Player_ZoneItemCore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfItemPlayer(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfItemPlayer1(in *jlexer.Lexer, out *anyOfItem_Player_ZoneItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfItemPlayer1(out *jwriter.Writer, in anyOfItem_Player_ZoneItem) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v anyOfItem_Player_ZoneItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfItemPlayer1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v anyOfItem_Player_ZoneItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfItemPlayer1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *anyOfItem_Player_ZoneItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfItemPlayer1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *anyOfItem_Player_ZoneItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfItemPlayer1(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState30(in *jlexer.Lexer, out *actions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState30(out *jwriter.Writer, in actions) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v actions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v actions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *actions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *actions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState30(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState31(in *jlexer.Lexer, out *ZoneReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "id":
			out.ElementID = ZoneID(in.Int())
		case "elementKind":
			out.ElementKind = ElementKind(in.String())
		case "referencedDataStatus":
			out.ReferencedDataStatus = ReferencedDataStatus(in.String())
		case "elementPath":
			out.ElementPath = string(in.String())
		case "zone":
			if in.IsNull() {
				in.Skip()
				out.Zone = nil
			} else {
				if out.Zone == nil {
					out.Zone = new(Zone)
				}
				(*out.Zone).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState31(out *jwriter.Writer, in ZoneReference) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.OperationKind))
	}
	if in.ElementID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ElementID))
	}
	if in.ElementKind != "" {
		const prefix string = ",\"elementKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElementKind))
	}
	if in.ReferencedDataStatus != "" {
		const prefix string = ",\"referencedDataStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReferencedDataStatus))
	}
	if in.ElementPath != "" {
		const prefix string = ",\"elementPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElementPath))
	}
	if in.Zone != nil {
		const prefix string = ",\"zone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Zone).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ZoneReference) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ZoneReference) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ZoneReference) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ZoneReference) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState31(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState32(in *jlexer.Lexer, out *ZoneItemReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "id":
			out.ElementID = ZoneItemID(in.Int())
		case "elementKind":
			out.ElementKind = ElementKind(in.String())
		case "referencedDataStatus":
			out.ReferencedDataStatus = ReferencedDataStatus(in.String())
		case "elementPath":
			out.ElementPath = string(in.String())
		case "zoneItem":
			if in.IsNull() {
				in.Skip()
				out.ZoneItem = nil
			} else {
				if out.ZoneItem == nil {
					out.ZoneItem = new(ZoneItem)
				}
				(*out.ZoneItem).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState32(out *jwriter.Writer, in ZoneItemReference) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.OperationKind))
	}
	if in.ElementID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ElementID))
	}
	if in.ElementKind != "" {
		const prefix string = ",\"elementKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElementKind))
	}
	if in.ReferencedDataStatus != "" {
		const prefix string = ",\"referencedDataStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReferencedDataStatus))
	}
	if in.ElementPath != "" {
		const prefix string = ",\"elementPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElementPath))
	}
	if in.ZoneItem != nil {
		const prefix string = ",\"zoneItem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ZoneItem).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ZoneItemReference) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ZoneItemReference) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ZoneItemReference) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ZoneItemReference) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState32(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState33(in *jlexer.Lexer, out *ZoneItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ZoneItemID(in.Int())
		case "item":
			if in.IsNull() {
				in.Skip()
				out.Item = nil
			} else {
				if out.Item == nil {
					out.Item = new(Item)
				}
				(*out.Item).UnmarshalEasyJSON(in)
			}
		case "position":
			if in.IsNull() {
				in.Skip()
				out.Position = nil
			} else {
				if out.Position == nil {
					out.Position = new(Position)
				}
				(*out.Position).UnmarshalEasyJSON(in)
			}
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState33(out *jwriter.Writer, in ZoneItem) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Item != nil {
		const prefix string = ",\"item\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Item).MarshalEasyJSON(out)
	}
	if in.Position != nil {
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Position).MarshalEasyJSON(out)
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ZoneItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ZoneItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ZoneItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ZoneItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState33(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState34(in *jlexer.Lexer, out *Zone) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ZoneID(in.Int())
		case "interactables":
			if in.IsNull() {
				in.Skip()
				out.Interactables = nil
			} else {
				in.Delim('[')
				if out.Interactables == nil {
					if !in.IsDelim(']') {
						out.Interactables = make([]interface{}, 0, 4)
					} else {
						out.Interactables = []interface{}{}
					}
				} else {
					out.Interactables = (out.Interactables)[:0]
				}
				for !in.IsDelim(']') {
					var v31 interface{}
					if m, ok := v31.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v31.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v31 = in.Interface()
					}
					out.Interactables = append(out.Interactables, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]ZoneItem, 0, 1)
					} else {
						out.Items = []ZoneItem{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v32 ZoneItem
					(v32).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "players":
			if in.IsNull() {
				in.Skip()
				out.Players = nil
			} else {
				in.Delim('[')
				if out.Players == nil {
					if !in.IsDelim(']') {
						out.Players = make([]Player, 0, 0)
					} else {
						out.Players = []Player{}
					}
				} else {
					out.Players = (out.Players)[:0]
				}
				for !in.IsDelim(']') {
					var v33 Player
					(v33).UnmarshalEasyJSON(in)
					out.Players = append(out.Players, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v34 string
					v34 = string(in.String())
					out.Tags = append(out.Tags, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState34(out *jwriter.Writer, in Zone) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if len(in.Interactables) != 0 {
		const prefix string = ",\"interactables\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v35, v36 := range in.Interactables {
				if v35 > 0 {
					out.RawByte(',')
				}
				if m, ok := v36.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v36.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v36))
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v37, v38 := range in.Items {
				if v37 > 0 {
					out.RawByte(',')
				}
				(v38).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Players) != 0 {
		const prefix string = ",\"players\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v39, v40 := range in.Players {
				if v39 > 0 {
					out.RawByte(',')
				}
				(v40).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v41, v42 := range in.Tags {
				if v41 > 0 {
					out.RawByte(',')
				}
				out.String(string(v42))
			}
			out.RawByte(']')
		}
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Zone) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Zone) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Zone) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Zone) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState34(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState35(in *jlexer.Lexer, out *Tree) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "equipmentSet":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.EquipmentSet = make(map[EquipmentSetID]EquipmentSet)
				} else {
					out.EquipmentSet = nil
				}
				for !in.IsDelim('}') {
					key := EquipmentSetID(in.IntStr())
					in.WantColon()
					var v43 EquipmentSet
					(v43).UnmarshalEasyJSON(in)
					(out.EquipmentSet)[key] = v43
					in.WantComma()
				}
				in.Delim('}')
			}
		case "gearScore":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.GearScore = make(map[GearScoreID]GearScore)
				} else {
					out.GearScore = nil
				}
				for !in.IsDelim('}') {
					key := GearScoreID(in.IntStr())
					in.WantColon()
					var v44 GearScore
					(v44).UnmarshalEasyJSON(in)
					(out.GearScore)[key] = v44
					in.WantComma()
				}
				in.Delim('}')
			}
		case "item":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Item = make(map[ItemID]Item)
				} else {
					out.Item = nil
				}
				for !in.IsDelim('}') {
					key := ItemID(in.IntStr())
					in.WantColon()
					var v45 Item
					(v45).UnmarshalEasyJSON(in)
					(out.Item)[key] = v45
					in.WantComma()
				}
				in.Delim('}')
			}
		case "player":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Player = make(map[PlayerID]Player)
				} else {
					out.Player = nil
				}
				for !in.IsDelim('}') {
					key := PlayerID(in.IntStr())
					in.WantColon()
					var v46 Player
					(v46).UnmarshalEasyJSON(in)
					(out.Player)[key] = v46
					in.WantComma()
				}
				in.Delim('}')
			}
		case "position":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Position = make(map[PositionID]Position)
				} else {
					out.Position = nil
				}
				for !in.IsDelim('}') {
					key := PositionID(in.IntStr())
					in.WantColon()
					var v47 Position
					(v47).UnmarshalEasyJSON(in)
					(out.Position)[key] = v47
					in.WantComma()
				}
				in.Delim('}')
			}
		case "zone":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Zone = make(map[ZoneID]Zone)
				} else {
					out.Zone = nil
				}
				for !in.IsDelim('}') {
					key := ZoneID(in.IntStr())
					in.WantColon()
					var v48 Zone
					(v48).UnmarshalEasyJSON(in)
					(out.Zone)[key] = v48
					in.WantComma()
				}
				in.Delim('}')
			}
		case "zoneItem":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ZoneItem = make(map[ZoneItemID]ZoneItem)
				} else {
					out.ZoneItem = nil
				}
				for !in.IsDelim('}') {
					key := ZoneItemID(in.IntStr())
					in.WantColon()
					var v49 ZoneItem
					(v49).UnmarshalEasyJSON(in)
					(out.ZoneItem)[key] = v49
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState35(out *jwriter.Writer, in Tree) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.EquipmentSet) != 0 {
		const prefix string = ",\"equipmentSet\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v50First := true
			for v50Name, v50Value := range in.EquipmentSet {
				if v50First {
					v50First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v50Name))
				out.RawByte(':')
				(v50Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.GearScore) != 0 {
		const prefix string = ",\"gearScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v51First := true
			for v51Name, v51Value := range in.GearScore {
				if v51First {
					v51First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v51Name))
				out.RawByte(':')
				(v51Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Item) != 0 {
		const prefix string = ",\"item\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v52First := true
			for v52Name, v52Value := range in.Item {
				if v52First {
					v52First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v52Name))
				out.RawByte(':')
				(v52Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Player) != 0 {
		const prefix string = ",\"player\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v53First := true
			for v53Name, v53Value := range in.Player {
				if v53First {
					v53First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v53Name))
				out.RawByte(':')
				(v53Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Position) != 0 {
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v54First := true
			for v54Name, v54Value := range in.Position {
				if v54First {
					v54First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v54Name))
				out.RawByte(':')
				(v54Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Zone) != 0 {
		const prefix string = ",\"zone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v55First := true
			for v55Name, v55Value := range in.Zone {
				if v55First {
					v55First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v55Name))
				out.RawByte(':')
				(v55Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.ZoneItem) != 0 {
		const prefix string = ",\"zoneItem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v56First := true
			for v56Name, v56Value := range in.ZoneItem {
				if v56First {
					v56First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v56Name))
				out.RawByte(':')
				(v56Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tree) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tree) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tree) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tree) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState35(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState36(in *jlexer.Lexer, out *State) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "equipmentSet":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.EquipmentSet = make(map[EquipmentSetID]equipmentSetCore)
				} else {
					out.EquipmentSet = nil
				}
				for !in.IsDelim('}') {
					key := EquipmentSetID(in.IntStr())
					in.WantColon()
					var v57 equipmentSetCore
					(v57).UnmarshalEasyJSON(in)
					(out.EquipmentSet)[key] = v57
					in.WantComma()
				}
				in.Delim('}')
			}
		case "gearScore":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.GearScore = make(map[GearScoreID]gearScoreCore)
				} else {
					out.GearScore = nil
				}
				for !in.IsDelim('}') {
					key := GearScoreID(in.IntStr())
					in.WantColon()
					var v58 gearScoreCore
					(v58).UnmarshalEasyJSON(in)
					(out.GearScore)[key] = v58
					in.WantComma()
				}
				in.Delim('}')
			}
		case "item":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Item = make(map[ItemID]itemCore)
				} else {
					out.Item = nil
				}
				for !in.IsDelim('}') {
					key := ItemID(in.IntStr())
					in.WantColon()
					var v59 itemCore
					(v59).UnmarshalEasyJSON(in)
					(out.Item)[key] = v59
					in.WantComma()
				}
				in.Delim('}')
			}
		case "player":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Player = make(map[PlayerID]playerCore)
				} else {
					out.Player = nil
				}
				for !in.IsDelim('}') {
					key := PlayerID(in.IntStr())
					in.WantColon()
					var v60 playerCore
					(v60).UnmarshalEasyJSON(in)
					(out.Player)[key] = v60
					in.WantComma()
				}
				in.Delim('}')
			}
		case "position":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Position = make(map[PositionID]positionCore)
				} else {
					out.Position = nil
				}
				for !in.IsDelim('}') {
					key := PositionID(in.IntStr())
					in.WantColon()
					var v61 positionCore
					(v61).UnmarshalEasyJSON(in)
					(out.Position)[key] = v61
					in.WantComma()
				}
				in.Delim('}')
			}
		case "zone":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Zone = make(map[ZoneID]zoneCore)
				} else {
					out.Zone = nil
				}
				for !in.IsDelim('}') {
					key := ZoneID(in.IntStr())
					in.WantColon()
					var v62 zoneCore
					(v62).UnmarshalEasyJSON(in)
					(out.Zone)[key] = v62
					in.WantComma()
				}
				in.Delim('}')
			}
		case "zoneItem":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ZoneItem = make(map[ZoneItemID]zoneItemCore)
				} else {
					out.ZoneItem = nil
				}
				for !in.IsDelim('}') {
					key := ZoneItemID(in.IntStr())
					in.WantColon()
					var v63 zoneItemCore
					(v63).UnmarshalEasyJSON(in)
					(out.ZoneItem)[key] = v63
					in.WantComma()
				}
				in.Delim('}')
			}
		case "equipmentSetEquipmentRef":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.EquipmentSetEquipmentRef = make(map[EquipmentSetEquipmentRefID]equipmentSetEquipmentRefCore)
				} else {
					out.EquipmentSetEquipmentRef = nil
				}
				for !in.IsDelim('}') {
					key := EquipmentSetEquipmentRefID(in.IntStr())
					in.WantColon()
					var v64 equipmentSetEquipmentRefCore
					(v64).UnmarshalEasyJSON(in)
					(out.EquipmentSetEquipmentRef)[key] = v64
					in.WantComma()
				}
				in.Delim('}')
			}
		case "itemBoundToRef":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ItemBoundToRef = make(map[ItemBoundToRefID]itemBoundToRefCore)
				} else {
					out.ItemBoundToRef = nil
				}
				for !in.IsDelim('}') {
					key := ItemBoundToRefID(in.IntStr())
					in.WantColon()
					var v65 itemBoundToRefCore
					(v65).UnmarshalEasyJSON(in)
					(out.ItemBoundToRef)[key] = v65
					in.WantComma()
				}
				in.Delim('}')
			}
		case "playerEquipmentSetRef":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.PlayerEquipmentSetRef = make(map[PlayerEquipmentSetRefID]playerEquipmentSetRefCore)
				} else {
					out.PlayerEquipmentSetRef = nil
				}
				for !in.IsDelim('}') {
					key := PlayerEquipmentSetRefID(in.IntStr())
					in.WantColon()
					var v66 playerEquipmentSetRefCore
					(v66).UnmarshalEasyJSON(in)
					(out.PlayerEquipmentSetRef)[key] = v66
					in.WantComma()
				}
				in.Delim('}')
			}
		case "playerGuildMemberRef":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.PlayerGuildMemberRef = make(map[PlayerGuildMemberRefID]playerGuildMemberRefCore)
				} else {
					out.PlayerGuildMemberRef = nil
				}
				for !in.IsDelim('}') {
					key := PlayerGuildMemberRefID(in.IntStr())
					in.WantColon()
					var v67 playerGuildMemberRefCore
					(v67).UnmarshalEasyJSON(in)
					(out.PlayerGuildMemberRef)[key] = v67
					in.WantComma()
				}
				in.Delim('}')
			}
		case "playerTargetRef":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.PlayerTargetRef = make(map[PlayerTargetRefID]playerTargetRefCore)
				} else {
					out.PlayerTargetRef = nil
				}
				for !in.IsDelim('}') {
					key := PlayerTargetRefID(in.IntStr())
					in.WantColon()
					var v68 playerTargetRefCore
					(v68).UnmarshalEasyJSON(in)
					(out.PlayerTargetRef)[key] = v68
					in.WantComma()
				}
				in.Delim('}')
			}
		case "playerTargetedByRef":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.PlayerTargetedByRef = make(map[PlayerTargetedByRefID]playerTargetedByRefCore)
				} else {
					out.PlayerTargetedByRef = nil
				}
				for !in.IsDelim('}') {
					key := PlayerTargetedByRefID(in.IntStr())
					in.WantColon()
					var v69 playerTargetedByRefCore
					(v69).UnmarshalEasyJSON(in)
					(out.PlayerTargetedByRef)[key] = v69
					in.WantComma()
				}
				in.Delim('}')
			}
		case "anyOfPlayer_Position":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.AnyOfPlayer_Position = make(map[AnyOfPlayer_PositionID]anyOfPlayer_PositionCore)
				} else {
					out.AnyOfPlayer_Position = nil
				}
				for !in.IsDelim('}') {
					key := AnyOfPlayer_PositionID(in.IntStr())
					in.WantColon()
					var v70 anyOfPlayer_PositionCore
					(v70).UnmarshalEasyJSON(in)
					(out.AnyOfPlayer_Position)[key] = v70
					in.WantComma()
				}
				in.Delim('}')
			}
		case "anyOfPlayer_ZoneItem":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.AnyOfPlayer_ZoneItem = make(map[AnyOfPlayer_ZoneItemID]anyOfPlayer_ZoneItemCore)
				} else {
					out.AnyOfPlayer_ZoneItem = nil
				}
				for !in.IsDelim('}') {
					key := AnyOfPlayer_ZoneItemID(in.IntStr())
					in.WantColon()
					var v71 anyOfPlayer_ZoneItemCore
					(v71).UnmarshalEasyJSON(in)
					(out.AnyOfPlayer_ZoneItem)[key] = v71
					in.WantComma()
				}
				in.Delim('}')
			}
		case "anyOfItem_Player_ZoneItem":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.AnyOfItem_Player_ZoneItem = make(map[AnyOfItem_Player_ZoneItemID]anyOfItem_Player_ZoneItemCore)
				} else {
					out.AnyOfItem_Player_ZoneItem = nil
				}
				for !in.IsDelim('}') {
					key := AnyOfItem_Player_ZoneItemID(in.IntStr())
					in.WantColon()
					var v72 anyOfItem_Player_ZoneItemCore
					(v72).UnmarshalEasyJSON(in)
					(out.AnyOfItem_Player_ZoneItem)[key] = v72
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState36(out *jwriter.Writer, in State) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.EquipmentSet) != 0 {
		const prefix string = ",\"equipmentSet\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v73First := true
			for v73Name, v73Value := range in.EquipmentSet {
				if v73First {
					v73First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v73Name))
				out.RawByte(':')
				(v73Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.GearScore) != 0 {
		const prefix string = ",\"gearScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v74First := true
			for v74Name, v74Value := range in.GearScore {
				if v74First {
					v74First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v74Name))
				out.RawByte(':')
				(v74Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Item) != 0 {
		const prefix string = ",\"item\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v75First := true
			for v75Name, v75Value := range in.Item {
				if v75First {
					v75First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v75Name))
				out.RawByte(':')
				(v75Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Player) != 0 {
		const prefix string = ",\"player\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v76First := true
			for v76Name, v76Value := range in.Player {
				if v76First {
					v76First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v76Name))
				out.RawByte(':')
				(v76Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Position) != 0 {
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v77First := true
			for v77Name, v77Value := range in.Position {
				if v77First {
					v77First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v77Name))
				out.RawByte(':')
				(v77Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Zone) != 0 {
		const prefix string = ",\"zone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v78First := true
			for v78Name, v78Value := range in.Zone {
				if v78First {
					v78First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v78Name))
				out.RawByte(':')
				(v78Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.ZoneItem) != 0 {
		const prefix string = ",\"zoneItem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v79First := true
			for v79Name, v79Value := range in.ZoneItem {
				if v79First {
					v79First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v79Name))
				out.RawByte(':')
				(v79Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.EquipmentSetEquipmentRef) != 0 {
		const prefix string = ",\"equipmentSetEquipmentRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v80First := true
			for v80Name, v80Value := range in.EquipmentSetEquipmentRef {
				if v80First {
					v80First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v80Name))
				out.RawByte(':')
				(v80Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.ItemBoundToRef) != 0 {
		const prefix string = ",\"itemBoundToRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v81First := true
			for v81Name, v81Value := range in.ItemBoundToRef {
				if v81First {
					v81First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v81Name))
				out.RawByte(':')
				(v81Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.PlayerEquipmentSetRef) != 0 {
		const prefix string = ",\"playerEquipmentSetRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v82First := true
			for v82Name, v82Value := range in.PlayerEquipmentSetRef {
				if v82First {
					v82First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v82Name))
				out.RawByte(':')
				(v82Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.PlayerGuildMemberRef) != 0 {
		const prefix string = ",\"playerGuildMemberRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v83First := true
			for v83Name, v83Value := range in.PlayerGuildMemberRef {
				if v83First {
					v83First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v83Name))
				out.RawByte(':')
				(v83Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.PlayerTargetRef) != 0 {
		const prefix string = ",\"playerTargetRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v84First := true
			for v84Name, v84Value := range in.PlayerTargetRef {
				if v84First {
					v84First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v84Name))
				out.RawByte(':')
				(v84Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.PlayerTargetedByRef) != 0 {
		const prefix string = ",\"playerTargetedByRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v85First := true
			for v85Name, v85Value := range in.PlayerTargetedByRef {
				if v85First {
					v85First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v85Name))
				out.RawByte(':')
				(v85Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.AnyOfPlayer_Position) != 0 {
		const prefix string = ",\"anyOfPlayer_Position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v86First := true
			for v86Name, v86Value := range in.AnyOfPlayer_Position {
				if v86First {
					v86First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v86Name))
				out.RawByte(':')
				(v86Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.AnyOfPlayer_ZoneItem) != 0 {
		const prefix string = ",\"anyOfPlayer_ZoneItem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v87First := true
			for v87Name, v87Value := range in.AnyOfPlayer_ZoneItem {
				if v87First {
					v87First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v87Name))
				out.RawByte(':')
				(v87Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.AnyOfItem_Player_ZoneItem) != 0 {
		const prefix string = ",\"anyOfItem_Player_ZoneItem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v88First := true
			for v88Name, v88Value := range in.AnyOfItem_Player_ZoneItem {
				if v88First {
					v88First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v88Name))
				out.RawByte(':')
				(v88Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v State) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v State) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *State) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *State) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState36(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState37(in *jlexer.Lexer, out *SpawnZoneItemsParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]ItemID, 0, 8)
					} else {
						out.Items = []ItemID{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v89 ItemID
					v89 = ItemID(in.Int())
					out.Items = append(out.Items, v89)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState37(out *jwriter.Writer, in SpawnZoneItemsParams) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v90, v91 := range in.Items {
				if v90 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v91))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SpawnZoneItemsParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SpawnZoneItemsParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SpawnZoneItemsParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SpawnZoneItemsParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState37(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState38(in *jlexer.Lexer, out *Room) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState38(out *jwriter.Writer, in Room) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Room) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Room) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Room) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Room) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState38(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState39(in *jlexer.Lexer, out *PositionReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "id":
			out.ElementID = PositionID(in.Int())
		case "elementKind":
			out.ElementKind = ElementKind(in.String())
		case "referencedDataStatus":
			out.ReferencedDataStatus = ReferencedDataStatus(in.String())
		case "elementPath":
			out.ElementPath = string(in.String())
		case "position":
			if in.IsNull() {
				in.Skip()
				out.Position = nil
			} else {
				if out.Position == nil {
					out.Position = new(Position)
				}
				(*out.Position).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState39(out *jwriter.Writer, in PositionReference) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.OperationKind))
	}
	if in.ElementID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ElementID))
	}
	if in.ElementKind != "" {
		const prefix string = ",\"elementKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElementKind))
	}
	if in.ReferencedDataStatus != "" {
		const prefix string = ",\"referencedDataStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReferencedDataStatus))
	}
	if in.ElementPath != "" {
		const prefix string = ",\"elementPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElementPath))
	}
	if in.Position != nil {
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Position).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PositionReference) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PositionReference) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PositionReference) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PositionReference) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState39(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState40(in *jlexer.Lexer, out *Position) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = PositionID(in.Int())
		case "x":
			out.X = float64(in.Float64())
		case "y":
			out.Y = float64(in.Float64())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState40(out *jwriter.Writer, in Position) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.X != 0 {
		const prefix string = ",\"x\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Y))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Position) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Position) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Position) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Position) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState40(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState41(in *jlexer.Lexer, out *PlayerReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "id":
			out.ElementID = PlayerID(in.Int())
		case "elementKind":
			out.ElementKind = ElementKind(in.String())
		case "referencedDataStatus":
			out.ReferencedDataStatus = ReferencedDataStatus(in.String())
		case "elementPath":
			out.ElementPath = string(in.String())
		case "player":
			if in.IsNull() {
				in.Skip()
				out.Player = nil
			} else {
				if out.Player == nil {
					out.Player = new(Player)
				}
				(*out.Player).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState41(out *jwriter.Writer, in PlayerReference) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.OperationKind))
	}
	if in.ElementID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ElementID))
	}
	if in.ElementKind != "" {
		const prefix string = ",\"elementKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElementKind))
	}
	if in.ReferencedDataStatus != "" {
		const prefix string = ",\"referencedDataStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReferencedDataStatus))
	}
	if in.ElementPath != "" {
		const prefix string = ",\"elementPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElementPath))
	}
	if in.Player != nil {
		const prefix string = ",\"player\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Player).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlayerReference) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlayerReference) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlayerReference) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlayerReference) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState41(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState42(in *jlexer.Lexer, out *Player) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = PlayerID(in.Int())
		case "equipmentSets":
			if in.IsNull() {
				in.Skip()
				out.EquipmentSets = nil
			} else {
				in.Delim('[')
				if out.EquipmentSets == nil {
					if !in.IsDelim(']') {
						out.EquipmentSets = make([]EquipmentSetReference, 0, 0)
					} else {
						out.EquipmentSets = []EquipmentSetReference{}
					}
				} else {
					out.EquipmentSets = (out.EquipmentSets)[:0]
				}
				for !in.IsDelim(']') {
					var v92 EquipmentSetReference
					(v92).UnmarshalEasyJSON(in)
					out.EquipmentSets = append(out.EquipmentSets, v92)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "gearScore":
			if in.IsNull() {
				in.Skip()
				out.GearScore = nil
			} else {
				if out.GearScore == nil {
					out.GearScore = new(GearScore)
				}
				(*out.GearScore).UnmarshalEasyJSON(in)
			}
		case "guildMembers":
			if in.IsNull() {
				in.Skip()
				out.GuildMembers = nil
			} else {
				in.Delim('[')
				if out.GuildMembers == nil {
					if !in.IsDelim(']') {
						out.GuildMembers = make([]PlayerReference, 0, 0)
					} else {
						out.GuildMembers = []PlayerReference{}
					}
				} else {
					out.GuildMembers = (out.GuildMembers)[:0]
				}
				for !in.IsDelim(']') {
					var v93 PlayerReference
					(v93).UnmarshalEasyJSON(in)
					out.GuildMembers = append(out.GuildMembers, v93)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]Item, 0, 0)
					} else {
						out.Items = []Item{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v94 Item
					(v94).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v94)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "position":
			if in.IsNull() {
				in.Skip()
				out.Position = nil
			} else {
				if out.Position == nil {
					out.Position = new(Position)
				}
				(*out.Position).UnmarshalEasyJSON(in)
			}
		case "target":
			if in.IsNull() {
				in.Skip()
				out.Target = nil
			} else {
				if out.Target == nil {
					out.Target = new(AnyOfPlayer_ZoneItemReference)
				}
				(*out.Target).UnmarshalEasyJSON(in)
			}
		case "targetedBy":
			if in.IsNull() {
				in.Skip()
				out.TargetedBy = nil
			} else {
				in.Delim('[')
				if out.TargetedBy == nil {
					if !in.IsDelim(']') {
						out.TargetedBy = make([]AnyOfPlayer_ZoneItemReference, 0, 0)
					} else {
						out.TargetedBy = []AnyOfPlayer_ZoneItemReference{}
					}
				} else {
					out.TargetedBy = (out.TargetedBy)[:0]
				}
				for !in.IsDelim(']') {
					var v95 AnyOfPlayer_ZoneItemReference
					(v95).UnmarshalEasyJSON(in)
					out.TargetedBy = append(out.TargetedBy, v95)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState42(out *jwriter.Writer, in Player) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if len(in.EquipmentSets) != 0 {
		const prefix string = ",\"equipmentSets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v96, v97 := range in.EquipmentSets {
				if v96 > 0 {
					out.RawByte(',')
				}
				(v97).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.GearScore != nil {
		const prefix string = ",\"gearScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.GearScore).MarshalEasyJSON(out)
	}
	if len(in.GuildMembers) != 0 {
		const prefix string = ",\"guildMembers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v98, v99 := range in.GuildMembers {
				if v98 > 0 {
					out.RawByte(',')
				}
				(v99).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v100, v101 := range in.Items {
				if v100 > 0 {
					out.RawByte(',')
				}
				(v101).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Position != nil {
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Position).MarshalEasyJSON(out)
	}
	if in.Target != nil {
		const prefix string = ",\"target\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Target).MarshalEasyJSON(out)
	}
	if len(in.TargetedBy) != 0 {
		const prefix string = ",\"targetedBy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v102, v103 := range in.TargetedBy {
				if v102 > 0 {
					out.RawByte(',')
				}
				(v103).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Player) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Player) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Player) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Player) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState42(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState43(in *jlexer.Lexer, out *MovePlayerParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "changeX":
			out.ChangeX = float64(in.Float64())
		case "changeY":
			out.ChangeY = float64(in.Float64())
		case "player":
			out.Player = PlayerID(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState43(out *jwriter.Writer, in MovePlayerParams) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ChangeX != 0 {
		const prefix string = ",\"changeX\":"
		first = false
		out.RawString(prefix[1:])
		out.Float64(float64(in.ChangeX))
	}
	if in.ChangeY != 0 {
		const prefix string = ",\"changeY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.ChangeY))
	}
	if in.Player != 0 {
		const prefix string = ",\"player\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Player))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MovePlayerParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MovePlayerParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MovePlayerParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MovePlayerParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState43(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState44(in *jlexer.Lexer, out *ItemReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "id":
			out.ElementID = ItemID(in.Int())
		case "elementKind":
			out.ElementKind = ElementKind(in.String())
		case "referencedDataStatus":
			out.ReferencedDataStatus = ReferencedDataStatus(in.String())
		case "elementPath":
			out.ElementPath = string(in.String())
		case "item":
			if in.IsNull() {
				in.Skip()
				out.Item = nil
			} else {
				if out.Item == nil {
					out.Item = new(Item)
				}
				(*out.Item).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState44(out *jwriter.Writer, in ItemReference) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.OperationKind))
	}
	if in.ElementID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ElementID))
	}
	if in.ElementKind != "" {
		const prefix string = ",\"elementKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElementKind))
	}
	if in.ReferencedDataStatus != "" {
		const prefix string = ",\"referencedDataStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReferencedDataStatus))
	}
	if in.ElementPath != "" {
		const prefix string = ",\"elementPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElementPath))
	}
	if in.Item != nil {
		const prefix string = ",\"item\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Item).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ItemReference) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ItemReference) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ItemReference) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ItemReference) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState44(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState45(in *jlexer.Lexer, out *Item) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ItemID(in.Int())
		case "boundTo":
			if in.IsNull() {
				in.Skip()
				out.BoundTo = nil
			} else {
				if out.BoundTo == nil {
					out.BoundTo = new(PlayerReference)
				}
				(*out.BoundTo).UnmarshalEasyJSON(in)
			}
		case "gearScore":
			if in.IsNull() {
				in.Skip()
				out.GearScore = nil
			} else {
				if out.GearScore == nil {
					out.GearScore = new(GearScore)
				}
				(*out.GearScore).UnmarshalEasyJSON(in)
			}
		case "name":
			out.Name = string(in.String())
		case "origin":
			if m, ok := out.Origin.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Origin.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Origin = in.Interface()
			}
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState45(out *jwriter.Writer, in Item) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.BoundTo != nil {
		const prefix string = ",\"boundTo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BoundTo).MarshalEasyJSON(out)
	}
	if in.GearScore != nil {
		const prefix string = ",\"gearScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.GearScore).MarshalEasyJSON(out)
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Origin != nil {
		const prefix string = ",\"origin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Origin.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Origin.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Origin))
		}
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Item) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Item) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Item) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Item) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState45(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState46(in *jlexer.Lexer, out *GearScoreReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "id":
			out.ElementID = GearScoreID(in.Int())
		case "elementKind":
			out.ElementKind = ElementKind(in.String())
		case "referencedDataStatus":
			out.ReferencedDataStatus = ReferencedDataStatus(in.String())
		case "elementPath":
			out.ElementPath = string(in.String())
		case "gearScore":
			if in.IsNull() {
				in.Skip()
				out.GearScore = nil
			} else {
				if out.GearScore == nil {
					out.GearScore = new(GearScore)
				}
				(*out.GearScore).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState46(out *jwriter.Writer, in GearScoreReference) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.OperationKind))
	}
	if in.ElementID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ElementID))
	}
	if in.ElementKind != "" {
		const prefix string = ",\"elementKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElementKind))
	}
	if in.ReferencedDataStatus != "" {
		const prefix string = ",\"referencedDataStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReferencedDataStatus))
	}
	if in.ElementPath != "" {
		const prefix string = ",\"elementPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElementPath))
	}
	if in.GearScore != nil {
		const prefix string = ",\"gearScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.GearScore).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GearScoreReference) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GearScoreReference) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GearScoreReference) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GearScoreReference) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState46(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState47(in *jlexer.Lexer, out *GearScore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = GearScoreID(in.Int())
		case "level":
			out.Level = int(in.Int())
		case "score":
			out.Score = int(in.Int())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState47(out *jwriter.Writer, in GearScore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Level != 0 {
		const prefix string = ",\"level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Level))
	}
	if in.Score != 0 {
		const prefix string = ",\"score\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Score))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GearScore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GearScore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GearScore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GearScore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState47(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState48(in *jlexer.Lexer, out *EquipmentSetReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "id":
			out.ElementID = EquipmentSetID(in.Int())
		case "elementKind":
			out.ElementKind = ElementKind(in.String())
		case "referencedDataStatus":
			out.ReferencedDataStatus = ReferencedDataStatus(in.String())
		case "elementPath":
			out.ElementPath = string(in.String())
		case "equipmentSet":
			if in.IsNull() {
				in.Skip()
				out.EquipmentSet = nil
			} else {
				if out.EquipmentSet == nil {
					out.EquipmentSet = new(EquipmentSet)
				}
				(*out.EquipmentSet).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState48(out *jwriter.Writer, in EquipmentSetReference) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.OperationKind))
	}
	if in.ElementID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ElementID))
	}
	if in.ElementKind != "" {
		const prefix string = ",\"elementKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElementKind))
	}
	if in.ReferencedDataStatus != "" {
		const prefix string = ",\"referencedDataStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReferencedDataStatus))
	}
	if in.ElementPath != "" {
		const prefix string = ",\"elementPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElementPath))
	}
	if in.EquipmentSet != nil {
		const prefix string = ",\"equipmentSet\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EquipmentSet).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EquipmentSetReference) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EquipmentSetReference) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EquipmentSetReference) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EquipmentSetReference) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState48(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState49(in *jlexer.Lexer, out *EquipmentSet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = EquipmentSetID(in.Int())
		case "equipment":
			if in.IsNull() {
				in.Skip()
				out.Equipment = nil
			} else {
				in.Delim('[')
				if out.Equipment == nil {
					if !in.IsDelim(']') {
						out.Equipment = make([]ItemReference, 0, 0)
					} else {
						out.Equipment = []ItemReference{}
					}
				} else {
					out.Equipment = (out.Equipment)[:0]
				}
				for !in.IsDelim(']') {
					var v104 ItemReference
					(v104).UnmarshalEasyJSON(in)
					out.Equipment = append(out.Equipment, v104)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name = string(in.String())
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState49(out *jwriter.Writer, in EquipmentSet) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if len(in.Equipment) != 0 {
		const prefix string = ",\"equipment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v105, v106 := range in.Equipment {
				if v105 > 0 {
					out.RawByte(',')
				}
				(v106).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationKind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EquipmentSet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState49(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EquipmentSet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState49(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EquipmentSet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState49(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EquipmentSet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState49(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState50(in *jlexer.Lexer, out *Engine) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "State":
			(out.State).UnmarshalEasyJSON(in)
		case "Patch":
			(out.Patch).UnmarshalEasyJSON(in)
		case "Tree":
			(out.Tree).UnmarshalEasyJSON(in)
		case "PathTrack":
			(out.PathTrack).UnmarshalEasyJSON(in)
		case "IDgen":
			out.IDgen = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState50(out *jwriter.Writer, in Engine) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"State\":"
		first = false
		out.RawString(prefix[1:])
		(in.State).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"Patch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Patch).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"Tree\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Tree).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"PathTrack\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.PathTrack).MarshalEasyJSON(out)
	}
	if in.IDgen != 0 {
		const prefix string = ",\"IDgen\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.IDgen))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Engine) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState50(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Engine) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState50(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Engine) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState50(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Engine) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState50(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState51(in *jlexer.Lexer, out *Connection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Conn":
			if in.IsNull() {
				in.Skip()
				out.Conn = nil
			} else {
				if out.Conn == nil {
					out.Conn = new(websocket.Conn)
				}
				easyjsonBd887cf1DecodeNhooyrIoWebsocket(in, out.Conn)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState51(out *jwriter.Writer, in Connection) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Conn != nil {
		const prefix string = ",\"Conn\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonBd887cf1EncodeNhooyrIoWebsocket(out, *in.Conn)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Connection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState51(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Connection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState51(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Connection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState51(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Connection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState51(l, v)
}
func easyjsonBd887cf1DecodeNhooyrIoWebsocket(in *jlexer.Lexer, out *websocket.Conn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeNhooyrIoWebsocket(out *jwriter.Writer, in websocket.Conn) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState52(in *jlexer.Lexer, out *Client) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState52(out *jwriter.Writer, in Client) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Client) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState52(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Client) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState52(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Client) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState52(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Client) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState52(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer4(in *jlexer.Lexer, out *AnyOfPlayer_ZoneItemReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "operationKind":
			out.OperationKind = OperationKind(in.String())
		case "id":
			out.ElementID = int(in.Int())
		case "elementKind":
			out.ElementKind = ElementKind(in.String())
		case "referencedDataStatus":
			out.ReferencedDataStatus = ReferencedDataStatus(in.String())
		case "elementPath":
			out.ElementPath = string(in.String())
		case "element":
			if m, ok := out.Element.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Element.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Element = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer4(out *jwriter.Writer, in AnyOfPlayer_ZoneItemReference) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OperationKind != "" {
		const prefix string = ",\"operationKind\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.OperationKind))
	}
	if in.ElementID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ElementID))
	}
	if in.ElementKind != "" {
		const prefix string = ",\"elementKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElementKind))
	}
	if in.ReferencedDataStatus != "" {
		const prefix string = ",\"referencedDataStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReferencedDataStatus))
	}
	if in.ElementPath != "" {
		const prefix string = ",\"elementPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElementPath))
	}
	if in.Element != nil {
		const prefix string = ",\"element\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Element.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Element.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Element))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AnyOfPlayer_ZoneItemReference) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AnyOfPlayer_ZoneItemReference) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AnyOfPlayer_ZoneItemReference) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AnyOfPlayer_ZoneItemReference) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestStateAnyOfPlayer4(l, v)
}
func easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState53(in *jlexer.Lexer, out *AddItemToPlayerParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "item":
			out.Item = ItemID(in.Int())
		case "newName":
			out.NewName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState53(out *jwriter.Writer, in AddItemToPlayerParams) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Item != 0 {
		const prefix string = ",\"item\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Item))
	}
	if in.NewName != "" {
		const prefix string = ",\"newName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NewName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddItemToPlayerParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState53(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddItemToPlayerParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComJavaJonasBarCliIntegrationtestState53(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddItemToPlayerParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState53(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddItemToPlayerParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComJavaJonasBarCliIntegrationtestState53(l, v)
}
